<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" role="presentation"><tr><td class="mbox-image"><div style="width:52px;">[[File:Question book-new.svg|50x40px|alt=]]</div></td><td class="mbox-text"><span class="mbox-text-span">This article '''needs additional citations for [[Wikipedia:Verifiability|verification]]'''.<span class="hide-when-compact"> Please help [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit improve this article] by [[Help:Introduction to referencing/1|adding citations to reliable sources]]. Unsourced material may be challenged and removed.</span>  <small>''(October 2009)''</small><span class="hide-when-compact"></span></span></td></tr></table>
<table class="vertical-navbox nowraplinks " cellspacing="5" cellpadding="0" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;"><tr><th class="" style=";padding:0.2em 0.4em 0.2em;;font-size:145%;line-height:1.2em;">[[Comparison of programming languages|Programming language comparisons]]</th>
      </tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Comparison of programming languages|General comparison]]
* [[Comparison of programming languages (syntax)|Basic syntax]]
* [[Comparison of programming languages (basic instructions)|Basic instructions]]
* [[Comparison of programming languages (array)|Arrays]]
* [[Comparison of programming languages (mapping)|Associative arrays]]
* [[Comparison of programming languages (strings)|String operations]]
* [[Comparison of programming languages (string functions)|String functions]]
* [[Comparison of programming languages (list comprehension)|List comprehension]]
* [[Comparison of programming languages (object-oriented programming)|Object-oriented programming]]
* [[Constructor (object-oriented programming)|Object-oriented constructors]]
* [[Comparison of database access|Database access]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Evaluation strategy]]
* [[b:Computer Programming/Hello world|List of "Hello World" programs]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Comparison of web application frameworks|Web application frameworks]]
* [[Comparison of the Java and .NET platforms]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* Comparison of individual programming languages
** [[ALGOL 58#ALGOL 58's influence on ALGOL 60|ALGOL 58's influence on ALGOL 60]]
** [[ALGOL 60#Comparisons with other languages|ALGOL 60: Comparisons with other languages]]
** [[Comparison of ALGOL 68 and C++]]
** [[ALGOL 68#Comparisons with other languages|ALGOL 68: Comparisons with other languages]]
** [[Compatibility of C and C++]]
** [[Comparison of Pascal and Delphi|Comparison of Pascal and Borland Delphi]]
** [[Comparison of Object Pascal and C]]
** [[Comparison of Pascal and C]]
** [[Comparison of Java and C++]]
** [[Comparison of C Sharp and Java|Comparison of C# and Java]]
** [[Comparison of C Sharp and Visual Basic .NET|Comparison of C# and Visual Basic .NET]]
** [[Comparison of Visual Basic and Visual Basic .NET]]</td>
</tr><tr><td style="text-align:right;font-size:115%;"><div class="plainlinks hlist navbar mini" style=""><ul><li class="nv-view">[[Template:Programming language comparisons|<span title="View this template" style="">v</span>]]</li><li class="nv-talk">[[Template talk:Programming language comparisons|<span title="Discuss this template" style="">t</span>]]</li><li class="nv-edit">[//en.wikipedia.org/w/index.php?title=Template:Programming_language_comparisons&action=edit <span title="Edit this template" style="">e</span>]</li></ul></div></td></tr>
</table>

This '''comparison of programming languages (syntax)''' compares the features of [[Syntax (programming languages)|language syntax]] (format) for over 50 various computer [[programming language]]s.

==Expressions==

Programming language [[Expression (programming)|expressions]] can be broadly classified
in three classes:

'''prefix notation'''
* [[Lisp (programming language)|Lisp]] <tt>(* (+ 2 3) (expt 4 5))</tt>
'''infix notation'''
* [[Fortran]] <tt>(2 + 3) * (4 ** 5)</tt>
* [[TUTOR (programming language)|TUTOR]] <tt>(2 + 3)(4<sup>5</sup>) $$ note implicit multiply operator</tt>
'''suffix, postfix, or [[Reverse Polish notation]]'''
* [[Forth (programming language)|Forth]] <tt>2 3 + 4 5 ** *</tt>

== Statements ==

Programming language [[Statement (programming)|statement]]s  typically have conventions for:
* statement separators;
* statement terminators; and
* line continuation

A '''statement separator''' is used to demarcate boundaries between two separate statements.
A '''statement terminator''' is used to demarcate the end of an individual statement.
'''Line continuation''' is a convention in languages where the [[newline]] character could potentially be misinterpreted as a statement terminator. In such languages, it allows a single statement to span more than just one line.

{| class="wikitable sortable"
|-
! Language
! Statement separator/terminator
! Secondary separator
|-
| [[ABAP]]
| period separated
|-
| [[Ada (programming language)|Ada]]
| semicolon terminated
|-
| [[ALGOL]]
| semicolon separated
|-
| [[ALGOL 68]]
| semicolon and comma separated
|-
| [[AppleScript]]
| newline  terminated
|-
| [[AutoHotkey]]
| newline terminated
|-
| [[BASIC]]
| newline terminated
| colon separated
|-
| [[Boo (programming language)|Boo]]
| newline  terminated
|-
| [[C (programming language)|C]]
| semicolon terminates statements
| comma separates expressions
|-
| [[C++]]
| semicolon terminates statements
| comma separates expressions
|-
| [[C Sharp (programming language)|C#]]
| semicolon terminated
|-
| [[COBOL]]
| space separated, sometimes period separated.
| comma or semicolon
|-
| [[Cobra (programming language)|Cobra]]
| newline terminated
|-
| [[D programming language|D]]
| semicolon terminated
|-
| [[Eiffel (programming language)|Eiffel]]
| newline terminated
| semicolon
|-
| [[Erlang (programming language)|Erlang]]
| colon separated, period terminated
|-
| [[Falcon (programming language)|Falcon]]
| newline separated
|-
| [[Fortran]]
| newline terminated
| semicolon
|-
| [[Forth (programming language)|Forth]]
| ?
| whitespace
|-
| [[GFA BASIC]]
| newline terminated
|-
| [[Go (programming language)|Go]]
| semicolon separated (inserted by compiler)
|-
| [[Haskell (programming language)|Haskell]] (in do-notation)
| semicolon separated
|-
| [[Haskell (programming language)|Haskell]] (in do-notation, when braces are omitted)
| newline separated
|-
| [[Java (programming language)|Java]]
| semicolon terminated
|-
| [[JavaScript]]
| semicolon separated (but sometimes implicitly inserted on newlines)
|-
| [[Lua (programming language)|Lua]]
| whitespace separated (semicolon optional)
|-
| [[Mathematica]]
| semicolon separated
|-
| [[MATLAB]]
| newline terminated
| semicolon or comma
|-
| [[Object Pascal|Object Pascal (Delphi)]]
| semicolon separated
|-
| [[Objective-C]]
| semicolon terminated
|-
| [[OCaml]]
| semicolon separated
|-
| [[Pascal (programming language)|Pascal]]
| semicolon separated
|-
| [[Perl]]
| semicolon separated
|-
| [[PHP]]
| semicolon terminated
|-
| [[Prolog]]
| period  terminated
|-
| [[Python (programming language)|Python]]
| newline  terminated
| semicolon
|-
| [[Ruby (programming language)|Ruby]]
| newline  terminated
| semicolon
|-
| [[Rust (programming language)|Rust]]
| semicolon terminates statements
| comma separates expressions
|-
| [[Scala (programming language)|Scala]]
| newline terminated (semicolon optional)
| semicolon
|-
| [[Seed7]]
| semicolon separated (semicolon termination is allowed)
|-
| [[Simula]]
| semicolon separated
|-
| [[S-Lang (programming language)|S-Lang]]
| semicolon separated
|-
| [[Smalltalk]]
| period separated
|-
| [[Standard ML]]
| semicolon separated
|-
| [[Visual Basic]]
| newline terminated
| colon separated
|-
| [[Visual Basic .NET]]
| newline terminated
| colon separated
|-
| [[Windows PowerShell]]
| newline  terminated
| semicolon separated
|-
|-class="sortbottom"
! Language
! Statement separator/terminator
! Secondary separator
|}

=== Line continuation ===
Line continuation is generally done as part of [[lexical analysis]]: a newline normally results in a token being added to the token stream, unless line continuation is detected.

'''[[Whitespace character|Whitespace]] - Languages that do not need continuations '''
* [[Ada (programming language)|Ada]]  Lines terminate with semicolon
* [[C Sharp (programming language)|C#]]  Lines terminate with semicolon
* [[Lua (programming language)|Lua]]
* [[OCaml]]

'''[[Ampersand]] as last character of line'''
* [[Fortran 90]]/[[Fortran 95]]/[[Fortran 2003]]/[[Fortran 2008]]

'''[[Backslash]] as last character of line'''
* [[Bash (Unix shell)|bash]] and other Unix shells
* [[C (programming language)|C]] and [[C++]] preprocessor
* [[Falcon (programming language)|Falcon]]
* [[Mathematica]]
* [[Python programming language|Python]]
* [[Ruby programming language|Ruby]]

'''[[Backtick]] as last character of line'''
* [[Windows PowerShell]]

'''[[Hyphen]] as last character of line'''
* [[SQL*Plus]]

'''[[Bracket|Left parenthesis]] as last character of line'''
* [[COMMAND.COM]], [[cmd.exe]]: starting a parenthetical block can allow line continuation.

'''[[Underscore]] as last character of line'''
* [[Autoit]]
* [[Cobra (programming language)|Cobra]]
* [[Visual Basic]]

'''[[Ellipsis]] (as three periods–not one special character)'''
* [[MATLAB]]: The ellipsis token need not be the last characters on the line, but any following it will be ignored. (In essence, it begins a comment that extends ''through'' (i.e. including) the first subsequent newline character. Contrast this with an inline comment, which extends ''until'' the first subsequent newline.)

'''Some form of [[#Inline comments|inline comment]] serves as line continuation'''
* [[Turbo Assembler]]: <code>\</code>
* [[M4 (computer language)|m4]]: <code>dnl</code>
* [[TeX]]: <code>%</code>

'''Character position'''
* [[Fortran 77]]: A non-comment line is a continuation of the previous non-comment line if any non-space character appears in column 6.  Comment lines cannot be continued.
* [[Cobol]]: String constants may be continued by not ending the original string in a PICTURE clause with <code>'</code>, then inserting a <code>-</code> in column 7 (same position as the <code>*</code> for comment is used.)
* [[TUTOR (programming language)|TUTOR]]: Lines starting with a tab (after any indentation required by the context) continue the previous command.

'''[End and Begin] using normal quotes'''
* [[C (programming language)|C]] and [[C++]] preprocessor: The string is ended normally and continues by starting with a quote on the next line.

== Libraries ==
<table class="metadata plainlinks ambox mbox-small-left ambox-content" role="presentation"><tr><td class="mbox-image">[[File:Wiki letter w cropped.svg|20px|alt=&#91;icon&#93;]]</td><td class="mbox-text"><span class="mbox-text-span">This section requires [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit expansion].  <small>''(December 2009)''</small></span></td></tr></table>
To '''import''' a library is a way to read external, possibly compiled, routines, programs or packages. Imports can be classified by level (module, package, class, procedure,...) and by syntax (directive name, attributes,...)

'''File import'''
* [[Active Server Pages|ASP]]: <code>#include file="''filename''"</code>
* [[AutoIt]], [[C (programming language)|C]], [[C++]]: <code>#include "''filename''"</code>, <code>#include <''filename''></code>
* [[COBOL (programming language)|COBOL]]: <code>COPY filename.</code>
* [[Falcon (programming language)|Falcon]]: <code>load "''filename''"</code>
* [[Fortran]]: <code>include 'filename'</code>
* [[Lua (programming language)|Lua]]: <code>require("''filename''")</code>
* [[MATLAB]]: <code>addpath(''directory'')</code>
* [[Perl]]: <code>require "''filename''";</code>
* [[PHP]]: <code>include "''filename''";</code>, <code>require "''filename''";</code>
* [[Rust (programming language)|Rust]]: <code>include!("''filename''");</code>

'''Package import'''
* [[Ada (programming language)|Ada]]: <code>with ''package''</code>
* [[C (programming language)|C]], [[C++]]: <code>#include ''filename''</code>
* [[Cobra (programming language)|Cobra]]: <code>use Package.Name</code>
* [[D (programming language)|D]]: <code>import ''package.module'';</code>, <code>import ''altname'' = ''package.module'';</code>
* [[Falcon (programming language)|Falcon]]: <code>load ''module''</code>, <code>load ''module.submodule''</code>
* [[Fortran|Fortran 90+]]: <code>use ''module''</code>, <code>use ''module'', only : ''identifier''</code>
* [[Go (programming language)|Go]]: <code>import altname "''package/name''"</code>
* [[Haskell (programming language)|Haskell]]: <code>import ''Module''</code>, <code>import qualified ''Module'' as ''M''</code>
* [[Java (programming language)|Java]], [[MATLAB]]: <code>import ''package''.*</code>
* [[Lua (programming language)|Lua]]: <code>require("''modname''")</code>
* [[Mathematica]]: <code><<''name''</code>
* [[Oberon (programming language)|Oberon]]: <code>IMPORT ''module''</code>
* [[Pascal (programming language)|Pascal]]: <code>uses ''unit''</code>
* [[Perl]]: <code>use Module;</code>, <code>use Module qw(''import options'');</code>
* [[Python (programming language)|Python]]: <code>import ''module''</code>, <code>from ''module'' import *</code>
* [[Rust (programming language)|Rust]]: <code>mod ''modname'';</code>, <code>#[path = "''filename''"] mod ''altname'';</code>, <code>extern crate ''libname'';</code>, <code>extern crate ''altname'' = "''libname#version''";</code>
* [[Scala (programming language)|Scala]]: <code>import ''package''._</code>, <code>import ''package''</code>

'''Class import'''
* [[Falcon (programming language)|Falcon]]: <code>import ''class''</code>
* [[Java (programming language)|Java]], [[MATLAB]]: <code>import ''package''.''class''</code>
* [[Python (programming language)|Python]]: <code>from ''module'' import ''class''</code>
* [[Scala (programming language)|Scala]]: <code>import ''package''.''class''</code>, <code>import ''package''.{ ''class1'' => ''alternativeName'', 'class2'' }</code>, <code>import ''package''._</code>

'''Procedure/function import'''
* [[D (programming language)|D]]: <code>import ''package.module'' : ''symbol'';</code>, <code>import ''package.module'' : ''altsymbolname'' = ''symbol'';</code>
* [[Haskell (programming language)|Haskell]]: <code>import ''Module'' (''function'')</code>
* [[MATLAB]]: <code>import ''package''.''function''</code>
* [[Perl]]: <code>use Module ('symbol');</code>
* [[Python (programming language)|Python]]: <code>from ''module'' import ''function''</code>
* [[Rust (programming language)|Rust]]: <code>use ''module''::''submodule''::''symbol'';</code>, <code>use ''module''::''submodule''::{''symbol1'', ''symbol2''};</code>, <code>use ''altname'' = ''module''::''submodule''::''symbol'';</code>
* [[Scala (programming language)|Scala]]: <code>import ''package''.''class''.''function''</code>, <code>import ''package''.''class''.{ ''function'' => ''alternativeName'', ''otherFunction'' }</code>

The above statements can also be classified by whether they are a syntactic convenience (allowing things to be referred to by a shorter name, but they can still be referred to by some fully qualified name without import), or whether they are actually required to access the code (without which it is impossible to access the code, even with fully qualified names).

'''Syntactic convenience'''
* [[Java (programming language)|Java]]: <code>import ''package''.*</code>, <code>import ''package''.''class''</code>
* [[OCaml]]: <code>open ''module''</code>

'''Required to access code'''
* [[Go (programming language)|Go]]: <code>import altname "''package/name''"</code>
* [[Python (programming language)|Python]]: <code>import ''module''</code>

== Blocks ==
<table class="metadata plainlinks ambox mbox-small-left ambox-content" role="presentation"><tr><td class="mbox-image">[[File:Wiki letter w cropped.svg|20px|alt=&#91;icon&#93;]]</td><td class="mbox-text"><span class="mbox-text-span">This section requires [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit expansion].  <small>''(November 2008)''</small></span></td></tr></table>
A '''block''' is a notation for a group of two or more statements, expressions or other units of code that are related in such a way as to comprise a whole.

'''Braces (aka Curly brackets) <code>{</code> ... <code>}</code>''':
* [[Curly bracket programming language]]s: [[C (programming language)|C]], [[C++]], [[Objective-C]], [[Go (programming language)|Go]], [[Java (programming language)|Java]], [[JavaScript]], [[ECMAScript]], [[C Sharp (programming language)|C#]], [[D (programming language)|D]], [[Perl]], [[PHP]] (<code>for</code> & <code>loop</code> loops, or pass a block as argument), [[Rust (programming language)|Rust]], [[Scala (programming language)|Scala]], [[S-Lang]], [[Windows PowerShell]], [[Haskell (programming language)|Haskell]] (in do-notation)
'''Parentheses <code>(</code> ... <code>)</code>'''
* [[OCaml]], [[Standard ML]]
'''Brackets <code>[</code> ... <code>]</code>'''
* [[Smalltalk]] (blocks are first class objects. aka closures)
'''<code>begin</code> ... <code>end</code>''':
* [[Ada (programming language)|Ada]], [[ALGOL]], [[Pascal (programming language)|Pascal]], [[Ruby (programming language)|Ruby]] (<code>for</code>, <code>do/while</code> & <code>do/until</code> loops), [[OCaml]], [[Simula]], [[Erlang (programming language)|Erlang]].
'''<code>do</code> ... <code>done</code>''':
* [[Visual Basic]], [[Fortran]], [[TUTOR (programming language)|TUTOR]] (with mandatory indenting of block body), [[Visual Prolog]]
'''<code>do</code> ... <code>end</code>'''
* [[Lua (programming language)|Lua]], [[Ruby (programming language)|Ruby]] (pass blocks as arguments, <code>for</code> loop), [[Seed7]] (encloses loop bodies between '''<code>do</code>''' and '''<code>end</code>''')
'''X ... <code>end</code>''' (e.g. <code>if</code> ... <code>end</code>):
* [[Bash (Unix shell)|Bash]] (<code>for</code> & <code>while</code> loops), [[Ruby (programming language)|Ruby]] (<code>if</code>, <code>while</code>, <code>until</code>, <code>def</code>, <code>class</code>, <code>module</code> statements), [[OCaml]] (<code>for</code> & <code>while</code> loops), [[MATLAB]] (<code>if</code> & <code>switch</code> conditionals, <code>for</code> & <code>while</code> loops, <code>try</code> clause, <code>package</code>, <code>classdef</code>, <code>properties</code>, <code>methods</code>, <code>events</code>, & <code>function</code> blocks), [[Lua (programming language)|Lua]] (<code>then</code> / <code>else</code> & <code>function</code>)
'''(<code>begin</code> ...)''':
* [[Scheme (programming language)|Scheme]]
'''(progn ...)''':
* [[Lisp (programming language)|Lisp]]
'''(<code>do</code> ...)''':
* [[Clojure]]
'''Indentation'''
* [[Off-side rule]] languages: [[Cobra (programming language)|Cobra]], [[Haskell (programming language)|Haskell]] (in do-notation when braces are omitted), [[occam (programming language)|occam]], [[Python (programming language)|Python]], [[F Sharp (programming language)|F#]]
'''Others'''
* [[Ada (programming language)|Ada]], [[Visual Basic]], [[Seed7]]: <code>if</code> ... <code>end if</code>
* [[Bash (Unix shell)|Bash]], [[Bourne shell|sh]], and [[Korn shell|ksh]]: <code>if</code> ... <code>fi</code>, <code>do</code> ... <code>done</code>, <code>case</code> ... <code>esac</code>;
* [[ALGOL 68]]: <code>begin</code> ... <code>end</code>, <code>(</code> ... <code>)</code>, <code>if</code> ... <code>fi</code>, <code>do</code> ... <code>od</code>
* [[Lua (programming language)|Lua]], [[Pascal (programming language)|Pascal]], [[Modula-2]], [[Seed7]]: <code>repeat</code> ... <code>until</code>
* [[COBOL]]: <code>IF</code> ... <code>END-IF</code>, <code>PERFORM</code> ... <code>END-PERFORM</code>, etc. for statements; ... <code>.</code> for sentences.

== Comments ==
[[Comment (computer programming)|Comment]]s can be classified by:
* style (inline/block)
* parse rules (ignored/interpolated/stored in memory)
* recursivity (nestable/non-nestable)
* uses ([[docstring]]s/throwaway comments/other)

=== Inline comments ===
Inline comments are generally those that use a [[newline]] character to indicate the end of a comment, and an arbitrary [[delimiter]] or sequence of [[token (parser)|token]]s to indicate the beginning of a comment.

Examples:
{| class="wikitable"
|-
! Symbol
! Languages
|-
|<code>C</code>
|[[Fortran|Fortran 77]] and earlier; the 'C' must be in column 1 of a line to indicate a comment.
|-
|<code>REM</code>, <code>::</code>, <code>:</code>
|[[BASIC]], [[COMMAND.COM]], [[cmd.exe]], batch files
|-
|-
|<code>NB.</code>
|[[J (programming language)|J]]; from the (historically) common abbreviation [[Nota bene]], the Latin for "note well".
|-
|-
|<code>⍝</code>
|[[APL (programming language)|APL]]; the mnemonic is the glyph (jot overstruck with shoe-down) resembles a desk lamp, and hence "illuminates" the foregoing.
|-
|<code>#</code>
|[[Bourne shell]] and other [[UNIX shell]]s, [[Cobra (programming language)|Cobra]], [[Perl]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Seed7]], [[Windows PowerShell]], [[PHP]], [[R (programming language)|R]], [[Maple (software)|Maple]], [[Nimrod (programming language)|Nimrod]]
|-
|<code>%</code>
|[[TeX]], [[Prolog]], [[MATLAB]],  [[Erlang (programming language)|Erlang]], [[S-Lang (programming language)|S-Lang]], [[Visual Prolog]]
|-
|<code>//</code>
|[[ActionScript]], [[C (programming language)|C (C99)]], [[C++]], [[C Sharp (programming language)|C#]], [[D (programming language)|D]], [[Go (programming language)|Go]], [[Java (programming language)|Java]], [[JavaScript]], [[Object Pascal]] (Delphi), [[Objective-C]], [[PHP]], [[Rust (programming language)|Rust]], [[Scala (programming language)|Scala]], [[Sass (stylesheet language)|SASS]]
|-
|<code>'</code>
|[[Visual Basic]], [[VBScript]], [[RealBasic]]
|-
|<code>!</code>
|[[Fortran]], Basic Plus, Inform
|-
|<code>;</code>
|[[AutoHotkey]], [[AutoIt]], [[Lisp (programming language)|Lisp]], [[Common Lisp]], [[Clojure]], [[Rebol]], [[Scheme (programming language)|Scheme]], many assemblers
|-
|<code></code>
|[[Euphoria (programming language)|Euphoria]], [[Haskell (programming language)|Haskell]], [[SQL]], [[Ada (programming language)|Ada]], [[AppleScript]], [[Eiffel (programming language)|Eiffel]], [[Lua (programming language)|Lua]], [[VHDL]], [[SGML]]
|-
|<code>*</code>
|[[COBOL]] (if fixed-form and * in column 7), [[Physics Analysis Workstation|PAW]], many assemblers, Fortran (if fixed-form and * in column 1)
|-
|<code></code>
|[[Curl (programming language)|Curl]]
|-
|<code></code>
|[[Vimscript]]
|-
|<code></code>
|[[Forth (programming language)|Forth]]

|}

=== Block comments ===
Block comments are generally those that use a delimiter to indicate the beginning of a comment, and another delimiter to indicate the end of a comment. In this context, [[Whitespace character|whitespace]] and [[newline]] characters are not counted as delimiters.

Examples:
{| class="wikitable"
|-
! Symbol
! Languages
|-
| <code>¢</code> ~ <code>¢</code>, <code>#</code> ~ <code>#</code>, <code>co</code> ~ <code>co</code>, <code>comment</code> ~ <code>comment</code>
| [[ALGOL 68]]
|-
| <code>/*</code> <code>*/</code>
| ActionScript, AutoHotkey, C, C++, C#, D, Go, Java, JavaScript, Objective-C, PHP, PL/I, [[Rust (programming language)|Rust]] (can be nested), Scala (can be nested), SASS, SQL, [[Visual Prolog]], [[CSS]]
|-
| <code>#cs</code> <code>#ce</code>
| [[AutoIt]]
|-
| <code>/+</code> <code>+/</code>
| D (can be nested)
|-
| <code>/#</code> <code>#/</code>
| [[Cobra (programming language)|Cobra]] (can be nested)
|-
| <code>&lt;#</code> <code>#&gt;</code>
| [[Powershell]]
|-
| <code>=begin</code> <code>=cut</code>
| Perl
|-
| <code>=begin</code> <code>=end</code>
| Ruby
|-
| <code></code>
| [[S-Lang (programming language)|S-Lang]]
|-
| <code>{-</code> <code>-}</code>
| [[Haskell (programming language)|Haskell]] (can be nested)
|-
| <code>(*</code> <code>*)</code>
| Object Pascal (Delphi), ML, Mathematica, [[Pascal (programming language)|Pascal]], [[Seed7]], [[Applescript]], [[OCaml]] (can be nested), Standard ML (can be nested), Maple, [[Newspeak (programming language)|Newspeak]]
|-
| <code>{</code> <code>}</code>
| Object Pascal (Delphi), Pascal
|-
| <code></code> <code></code>
| Curl
|-
| <code>%{</code> <code>%}</code>
| [[MATLAB]] (the symbols must be in a separate line)
|-
| <code></code> <code></code>
| [[Lisp (programming language)|Lisp]], [[Scheme (programming language)|Scheme]], [[Racket (programming language)|Racket]] (can be nested in all three).
|-
| <code>--[[ ]]</code>
| [[Lua (programming language)|Lua]]
|-
| <code>"</code> <code>"</code>
| [[Smalltalk]]
|-
| <code></code>comment ...<code></code>
|[[Clojure]]
|}

=== Unique variants ===

==== Fortran ====
* The indentation of lines in [[FORTRAN]] 66/77 is significant. The actual statement is in columns 7 through 72 of a line. Any non-space character in column 6 indicates that this line is a continuation of the previous line. A '<code>C</code>' in column 1 indicates that this entire line is a comment. Columns 1 though 5 may contain a number which serves as a label. Columns 73 though 80 are ignored and may be used for comments; in the [[Computer programming in the punched card era|days of punched cards]], these columns often contained a sequence number so that the deck of cards could be sorted into the correct order if someone accidentally dropped the cards. Fortran 90 removed the need for the indentation rule and added inline comments, using the <code>!</code> character as the comment delimiter.

==== Cobra ====
* Cobra supports block comments with "<code>/#</code> ... <code>#/</code>" which is like the "<code>/*</code> ... <code>*/</code>" often found in C-based languages, but with two differences. The <code>#</code> character is reused from the single-line comment form "<code>#</code> ...", and the block comments can be nested which is convenient for commenting out large blocks of code.

==== Curl ====
* Curl supports block comments with user-defined tags as in <code>|foo# ... #foo|</code>.

==== Lua ====
* Like raw strings, there can be any number of equals signs between the square brackets, provided both the opening and closing tags have a matching number of equals signs; this allows nesting as long as nested block comments/raw strings use a different number of equals signs than their enclosing comment: <code>--[[comment --[=[ nested comment ]=] ]]</code>. Lua discards the first newline (if present) that directly follows the opening tag.

==== Perl ====
* Block comments in Perl are considered part of the documentation, and are given the name [[Plain Old Documentation]] (POD). Technically, Perl does not have a convention for including block comments in source code, but POD is routinely used as a workaround.

==== PHP ====
<div class="rellink relarticle mainarticle">Main article: [[PHP syntax and semantics|PHP syntax and semantics]]</div>
* PHP supports standard C/C++ style comments, but supports Perl style as well.

==== Python ====
* The use of the triple-(double)quotes although sometimes used to comment-out lines of source, does not actually form a comment. The enclosed text becomes a string, usually a string statement. Python usually ignores a lone string as a statement (except when a string is the first statement in the body of a module, class or function; see [[docstring]]).

==== Ruby ====
* As with Python and Perl, Ruby has no specific block-comment syntax. However, like Perl, documentation blocks can be used as block comments as they are ignored by the interpreter.

==== S-Lang ====
* The region of lines enclosed by the <code></code> and <code></code> delimiters are ignored by the interpreter. The tag name can be any sequence of alphanumeric characters that may be used to indicate how the enclosed block is to be deciphered. For example, <code></code> could indicate the start of a block of LaTeX formatted documentation.

==== Scheme and Racket ====
* The next complete syntactic component (s-expression) can be commented out with <code>#;</code> .

==== Esoteric languages ====
* Many [[esoteric programming language]]s follow the convention that any text not executed by the [[instruction pointer]] (e.g., [[Befunge]]) or otherwise assigned a meaning (e.g., [[Brainfuck]], [[ETA (programming language)|ETA]]) is considered a "comment".

=== Comment comparison ===
There is a wide variety of syntax styles for declaring comments in source code.
<code>''BlockComment''</code> in italics is used here to indicate block comment style.
<code>''InlineComment''</code> in italics is used here to indicate inline comment style.


{| class="wikitable"
|-
!width=30%| Language
!width=30%| In-line comment
!width=40%| Block comment
|-
|[[Ada (programming language)|Ada]], [[Eiffel (programming language)|Eiffel]], [[Euphoria (programming language)|Euphoria]], [[Occam (programming language)|Occam]], [[SPARK (programming language)|SPARK]], ANSI [[SQL]], [[ToolBook OpenScript]], and [[VHDL]]
|<code>-- ''InlineComment''</code>
|
|-
|[[Algol 60|ALGOL 60]]
|
|<code>comment ''BlockComment'';</code>
|-
|[[Algol 68|ALGOL 68]]
|
|<code>¢ ''BlockComment'' ¢</code><br>
<code><u>comment</u> ''BlockComment'' <u>comment</u></code><br>
<code><u>co</u> ''BlockComment'' <u>co</u></code><br>
<code># ''BlockComment'' #</code><br>
<code>£ ''BlockComment'' £</code><br>
|-
|[[AppleScript]]
|<code>-- ''InlineComment''</code>
|<code>(* ''BlockComment'' *)</code>
|-
|[[Assembly language]] (varies)
|<code>; ''InlineComment''</code>&nbsp;&nbsp; one example (most assembly languages use line comments only)
|
|-
|[[AutoHotkey]]
|<code>; ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code>
|-
|[[AWK (programming language)|AWK]], [[Bash (Unix shell)|Bash]], [[Bourne shell]], [[C shell]], [[Maple computer algebra system|Maple]], [[R (programming language)|R]], [[Tcl]], and [[Windows PowerShell]]
|<code># ''InlineComment''</code>
|<code><# ''BlockComment'' #></code>
|-
|[[BASIC programming language|BASIC]] (various dialects):
|<code>&#39;''InlineComment''</code> (not all dialects)<br>
<code>REM ''InlineComment''</code>
|
|-
|[[C (programming language)|C]] (K&R, ANSI/C89/C90), [[CHILL programming language|CHILL]], [[PL/I]], and [[REXX]]
|
|<code>/* ''BlockComment'' */</code>
|-
|[[C (programming language)#C99|C (C99)]], [[C++]], [[Go (programming language)|Go]], and [[JavaScript]]
|<code>// ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code>
|-
|[[C Sharp (programming language)|C#]]
|<code>// ''InlineComment''</code><br><code>/// ''InlineComment''</code> (XML documentation comment)
|<code>/* ''BlockComment'' */</code><br><code>/** ''BlockComment'' */</code> (XML documentation comment)
|-
|[[COBOL]]
|<code> ''InlineComment''</code> (when * or / is in column 7)
<code>*> ''InlineComment''</code>
|
|-
|[[Curl programming language|Curl]]
|<code>&#124;&#124; ''InlineComment''</code>
|<code>&#124;# ''BlockComment'' #&#124;</code><br>
<code>&#124;foo# ''BlockComment'' #&#124;</code>
|-
|[[Cobra (programming language)|Cobra]]
|<code># ''InlineComment''</code>
|<code>/# ''BlockComment'' #/</code> (nestable)
|-
|[[D programming language|D]]
|<code>// ''InlineComment''</code><br><code>/// Documentation ''InlineComment''</code> ([[ddoc]] comments)
|<code>/* ''BlockComment'' */</code><br><code>/** Documentation ''BlockComment'' */</code> ([[ddoc]] comments)<br>
<code>/+ ''BlockComment'' +/</code> (nestable)<br><code>/++ Documentation ''BlockComment'' +/</code> (nestable, [[ddoc]] comments)
|-
|[[DIGITAL Command Language|DCL]]
|<code>$! ''InlineComment''</code>
|
|-
|[[ECMAScript]] ([[JavaScript]], [[ActionScript]], etc.)
|<code>// ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code>
|-
|[[Forth (programming language)|Forth]]
|<code>\ ''InlineComment''</code>
|<code>( ''BlockComment'' )</code> (single line only)<br>
<code>( ''before'' -- ''after'' )</code> stack comment convention
|-
|[[FORTRAN]] 66/77
|<code>C ''InlineComment''</code> (the letter 'C' in the first column makes the entire line a comment).
|
|-
|[[Fortran 90]]
|<code>! ''InlineComment''</code> (all characters on the line, from the exclamation mark onwards, are comments)
|
|-
|[[Haskell (programming language)|Haskell]]
|<code>-- ''InlineComment''</code>
|<code>{- ''BlockComment'' -}</code>
|-
|[[Java (programming language)|Java]]
|<code>// ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code><br>
<code>/** ''BlockComment'' */</code> ([[Javadoc]] documentation comment)
|-
|[[Lisp (programming language)|Lisp]] and [[Scheme (programming language)|Scheme]]
|<code>; ''InlineComment''</code>
|<code>#&#124; ''BlockComment'' &#124;#</code>
|-
|[[Lua (programming language)|Lua]]
|<code>-- ''InlineComment''</code>
|<code>''BlockComment''</code> (variable number of = signs)
|-
|[[Maple (software)|Maple]]
|<code># ''InlineComment''</code>
|<code>(* ''BlockComment'' *)</code>
|-
|[[Mathematica]]
|
|<code>(* ''BlockComment'' *)</code>
|-
|[[Matlab]]
|<code>% ''InlineComment''</code>
|<code>%{<br>''BlockComment (nestable)''<br>%}</code><br>Note: Both percent–bracket symbols must be the only non-whitespace characters on their respective lines.
|-
|[[Object Pascal|Object Pascal (Delphi)]]
|<code>// ''InlineComment''</code>
|<code>(* ''BlockComment'' *)</code><br><code>{ ''BlockComment'' }</code>
|-
|[[OCaml]]
|
|<code>(* ''BlockComment (* nestable *)'' *)</code>
|-
|[[Pascal (programming language)|Pascal]], [[Modula-2]], [[Modula-3]], [[Oberon (programming language)|Oberon]], and [[ML (programming language)|ML]]:
|
|<code>(* ''BlockComment'' *)</code>
|-
|[[Perl]] and [[Ruby (programming language)|Ruby]]
|<code># ''InlineComment'' </code>
|<code>=begin<br/>''BlockComment''<br/>=cut</code> ([[Plain Old Documentation|POD]] documentation comment)<br>
<code><br>''Comments after end of code''</code>
|-
|[[PHP]]
|<code># ''InlineComment''</code><br/><code>// ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code><br><code>/** Documentation ''BlockComment'' */</code> ([[PHPDoc|PHP Doc comments]])
|-
|[[PILOT]]
|<code>R:''InlineComment''</code>
|
|-
|[[PL/SQL]] and [[TSQL]]
|<code>-- ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code>
|-
|[[Python (programming language)|Python]]
|<code># ''InlineComment'' </code>
|<code> ''BlockComment'' <br>""" ''BlockComment'' """</code><br>
([[Docstring|Documentation string]] when first line of module, class, method, or function)
|-
|[[REALbasic]]
|<code>' ''InlineComment''</code><br><code>// ''InlineComment''</code><br><code>rem ''InlineComment''</code>
|
|-
|[[Rust (programming language)|Rust]]
|<code>// ''InlineComment''</code><br>
<code>/// ''InlineComment''</code>  ("Outer" rustdoc comment)<br>
<code>//! ''InlineComment''</code>  ("Inner" rustdoc comment)
|<code>/* ''BlockComment'' */</code>  (nestable)<br>
<code>/** ''BlockComment'' */</code>  ("Outer" rustdoc comment)<br>
<code>/*! ''BlockComment'' */</code>  ("Inner" rustdoc comment)
|-
|[[SAS System|SAS]]
|
|<code>* ''BlockComment'';</code><br><code>/* ''BlockComment'' */</code>
|-
|[[Seed7]]
|<code># ''InlineComment''</code>
|<code>(* ''BlockComment'' *)</code>
|-
|[[Simula]]
|
|<code>comment ''BlockComment'';</code><br><code>! ''BlockComment'';</code>
|-
|[[Smalltalk]]
|
|<code>"''BlockComment''"</code>
|-
|[[Smarty]]
|
|<code>{* ''BlockComment'' *}</code>
|-
|[[Standard ML]]
|
|<code>(* ''BlockComment'' *)</code>
|-
|[[TeX]], [[LaTeX]], [[PostScript]], [[Erlang (programming language)|Erlang]], and [[S-Lang (programming language)|S-Lang]]
|<code>% ''InlineComment''</code>
|
|-
|[[Texinfo]]
|<code>@c ''InlineComment''</code>
<code>@comment ''InlineComment''</code>
|
|-
|[[TUTOR (programming language)|TUTOR]]
|<code>* ''InlineComment''</code><br><code>''command''       $$ ''InlineComment''</code>
|
|-
|[[Visual Basic]]
|<code> ''InlineComment''</code><br><code>Rem ''InlineComment''</code>
|
|-
|[[Visual Basic .NET]]
|<code> ''InlineComment''</code><br>
<code> ''InlineComment''</code> (XML documentation comment)<br>
<code>Rem ''InlineComment''</code>
|
|-
|[[Visual Prolog]]
|<code>% ''InlineComment''</code>
|<code>/* ''BlockComment'' */</code>
|}

==See also==
* [[Curly bracket programming languages]], a broad family of programming language syntaxes
* [[PHP syntax and semantics]]
* [[C syntax]]
* [[C++ syntax]]
* [[Java syntax]]
* [[Javascript syntax]]
* [[Python syntax and semantics]]

==References==
<div class="reflist " style=" list-style-type: decimal;">
<references group=""></references></div>






[[Category:Programming language comparisons| ]]
