<table class="plainlinks ombox ombox-style" role="presentation"><tr><td class="mbox-image">[[File:Edit-clear.svg|40x40px|link=|alt=]]</td><td class="mbox-text">This special '''may require [[Wikipedia:cleanup|cleanup]] to meet Wikipedia's [[Wikipedia:Manual of Style|quality standards]]'''. The specific problem is: '''This article's [[#References and notes|reference section]] contains many footnotes, but not does not list any external references or sources.'''. Please help [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit improve this special] if you can&#59; the [[|talk page]] may contain suggestions.</td></tr></table>
<table class="vertical-navbox nowraplinks " cellspacing="5" cellpadding="0" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;"><tr><th class="" style=";padding:0.2em 0.4em 0.2em;;font-size:145%;line-height:1.2em;">[[Comparison of programming languages|Programming language comparisons]]</th>
      </tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Comparison of programming languages|General comparison]]
* [[Comparison of programming languages (syntax)|Basic syntax]]
* [[Comparison of programming languages (basic instructions)|Basic instructions]]
* [[Comparison of programming languages (array)|Arrays]]
* [[Comparison of programming languages (mapping)|Associative arrays]]
* [[Comparison of programming languages (strings)|String operations]]
* [[Comparison of programming languages (string functions)|String functions]]
* [[Comparison of programming languages (list comprehension)|List comprehension]]
* [[Comparison of programming languages (object-oriented programming)|Object-oriented programming]]
* [[Constructor (object-oriented programming)|Object-oriented constructors]]
* [[Comparison of database access|Database access]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Evaluation strategy]]
* [[b:Computer Programming/Hello world|List of "Hello World" programs]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Comparison of web application frameworks|Web application frameworks]]
* [[Comparison of the Java and .NET platforms]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* Comparison of individual programming languages
** [[ALGOL 58#ALGOL 58's influence on ALGOL 60|ALGOL 58's influence on ALGOL 60]]
** [[ALGOL 60#Comparisons with other languages|ALGOL 60: Comparisons with other languages]]
** [[Comparison of ALGOL 68 and C++]]
** [[ALGOL 68#Comparisons with other languages|ALGOL 68: Comparisons with other languages]]
** [[Compatibility of C and C++]]
** [[Comparison of Pascal and Delphi|Comparison of Pascal and Borland Delphi]]
** [[Comparison of Object Pascal and C]]
** [[Comparison of Pascal and C]]
** [[Comparison of Java and C++]]
** [[Comparison of C Sharp and Java|Comparison of C# and Java]]
** [[Comparison of C Sharp and Visual Basic .NET|Comparison of C# and Visual Basic .NET]]
** [[Comparison of Visual Basic and Visual Basic .NET]]</td>
</tr><tr><td style="text-align:right;font-size:115%;"><div class="plainlinks hlist navbar mini" style=""><ul><li class="nv-view">[[Template:Programming language comparisons|<span title="View this template" style="">v</span>]]</li><li class="nv-talk">[[Template talk:Programming language comparisons|<span title="Discuss this template" style="">t</span>]]</li><li class="nv-edit">[//en.wikipedia.org/w/index.php?title=Template:Programming_language_comparisons&action=edit <span title="Edit this template" style="">e</span>]</li></ul></div></td></tr>
</table>
This '''Comparison of programming languages''' compares how [[object-oriented programming]] languages such as [[C++]], [[Python (programming language)|Python]], [[Perl]], [[Java (programming language)|Java]], [[Object Pascal]] and others manipulate [[data structures]].
__TOC__
<br style="clear:both;" />

== Object construction and destruction ==

{| class="wikitable"
|-
! 
! construction
! destruction
|-
| [[ABAP Objects]]
| <tt>'''data''' variable '''type ref to''' class '''.'''<br />'''create object''' variable «'''exporting''' parameter = argument»'''.'''</tt>
|
|-
| [[C++]] ([[Standard Template Library|STL]])
| <tt>class variable«'''('''parameters''')'''»''';''' or<br /> class '''[[Pointer (computer programming)|*]]'''variable '''= [[new (C++)|new]] '''class«'''('''parameters''')'''»''';'''</tt>
| <tt>'''[[delete (C++)|delete]]''' pointer''';'''</tt>
|-
| [[C Sharp (programming language)|C#]]
| rowspan=3|<tt>class variable '''= new''' class'''('''parameters''');</tt>
| <tt>variable'''.Dispose();'''</tt>
|-
| [[Java (programming language)|Java]]
| 
|-
| [[D (programming language)|D]]
| <tt>'''delete''' variable''';'''</tt>
|-
| [[Objective-C]] ([[Cocoa (API)|Cocoa]])
| <tt>class '''[[Pointer (computer programming)|*]]'''variable '''= [['''class''' alloc ] init];''' or <br /> class '''[[Pointer (computer programming)|*]]'''variable '''= [['''class''' alloc ] '''initWithFoo''':'''parameter «bar''':'''parameter ...»'''];'''</tt>
| <tt>'''['''variable '''release];'''</tt>
|-
| [[Python (programming language)|Python]]
| <tt>variable '''=''' class'''('''parameters''')'''</tt>
| <tt>'''del''' variable (Normally not needed)</tt>
|-
| [[Visual Basic .NET]]
| <tt>'''Dim''' variable '''As New''' class'''('''parameters''')'''</tt>
| <tt>variable'''.Dispose()'''</tt>
|-
| [[Eiffel (programming language)|Eiffel]]
| <tt>'''create''' variable or<br />'''create''' «'''{'''TYPE'''}'''» variable'''.'''make_foo «'''('''parameters''')'''» or<br /> variable ''':= create''' '''{'''TYPE'''}''' or<br /> variable ''':= create {'''TYPE'''}.'''make_foo «'''('''parameters''')'''» </tt>
|
|-
| [[PHP]]
| <tt>'''[[sigil (computer programming)|$]]'''variable '''= new''' class'''('''parameters''');'''</tt>
| <tt>'''unset($'''variable''');'''</tt>
|-
| [[Perl]] 5
| <tt>«'''my '''»'''$'''variable '''=''' class'''->new'''«'''('''parameters''')'''»''';'''</tt>
| <tt>'''undef($'''variable''');'''</tt>
|-
| [[Perl 6]]
| <tt>«'''my '''»$variable '''=''' class'''.new'''«'''('''parameters''')'''»''';'''</tt>
| <tt>$variable'''.undefine;'''</tt>
|-
| [[Ruby (programming language)|Ruby]]
| <tt>variable '''=''' class'''.new'''«'''('''parameters''')'''»</tt>
|
|-
| [[Windows PowerShell]]
| <tt>'''$'''variable '''= New-Object '''«'''-TypeName'''» class ««'''-ArgumentList'''» parameters»</tt>
| <tt>'''Remove-Variable''' «'''-Name'''» variable</tt>
|-
| [[OCaml]]
| <tt>'''let''' variable '''= new''' class «parameters» or <br /> '''let''' variable '''= object''' members '''end'''</tt>
| rowspan=2|
|-
| [[F Sharp (programming language)|F#]]
| <tt>'''let''' variable '''= '''«'''new''' »class'''('''«parameters»''')'''</tt>
|-
| [[Smalltalk]]
| "The class is an Object.<br/>Just send a message to a class, usually <tt>#new</tt> or <tt>#new:</tt>, and many others, for example:"
<source lang="smalltalk">
Pointy x: 10 y: 20.
Array with: -1 with: 3 with: 2.
</source>
|
|-
| [[JavaScript]]
| <tt>'''var''' variable '''= new''' class«(parameters)» or <br /> '''var''' variable '''= {''' «key1''':''' value1«''',''' key2''':''' value2 ...»»'''}'''</tt>
| 
|-
| [[Object Pascal|Object Pascal / Delphi]]
| <tt>ClassVar ''':=''' ClassType.ConstructorName'''('''parameters''');</tt>
| <tt>ClassVar'''.Free;'''</tt>
|-
| [[Scala (programming language)|Scala]]
| <source lang="scala">
val obj = new Object // no parameters
val obj = new Object(arg0, arg1, arg2...)
val obj = Object(arg0, arg1, arg2...) // case class
val obj = new Object(arg0, arg1, param1 = value1, ...) // named parameters
</source>
|
|-
| [[COBOL]]
| <code>'''INVOKE''' class '''"NEW"''' '''RETURNING''' variable or <br/> '''MOVE''' class'''::"NEW"''' '''TO''' variable</code>
|
|-
|}

== Class declaration ==
{| class="wikitable"
|-
! 
! [[class (computer science)|class]]
! [[Protocol (object-oriented programming)|protocol]]
! [[namespace]]
|-
| ABAP Objects
| <tt>'''class''' name '''definition''' «'''inheriting from''' parentclass»'''.''' «'''interfaces:''' interfaces'''.'''» method_and_field_declarations '''endclass.'''<br />'''class''' name '''implementation.''' method_implementations '''endclass.'''</tt>
| <tt>'''interface''' name'''.''' members '''endinterface.'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| <tt>'''class '''name«''' : public '''parentclasses</tt><tt>»''' { '''members''' };'''</tt>
| 
| rowspan=2| <tt>'''namespace '''name''' { '''members''' }'''</tt>
|-
| C#
| rowspan=2| <tt>'''class '''name«''' : '''«parentclass»«''',''' interfaces»»''' { '''members''' }'''</tt>
| rowspan=2| <tt>'''interface '''name«''' : '''parentinterfaces» { '''members''' }'''</tt>
|-
| D
| <tt>'''module '''name''';''' <br /> members</tt>
|-
| Java
| rowspan=2| <tt>'''class '''name«''' extends '''parentclass»«''' implements '''interfaces»''' { '''members''' }'''</tt>
| rowspan=2| <tt>'''interface '''name«''' extends '''parentinterfaces» { '''members''' }'''</tt>
| <tt>'''package '''name''';''' members</tt>
|-
| PHP
| <tt>'''namespace '''name'''; '''members</tt>
|-
| Objective-C
| <tt>'''@interface '''name«''' : '''parentclass»«'''<''' protocols '''>'''»''' { '''instance_fields''' } '''method_and_property_declarations''' @end <br /> @implementation '''name method_implementations''' @end'''</tt>
| <tt>'''@protocol '''name«'''<''' parentprotocols '''>'''» members''' @end'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small></small>
|-
| Python
| <tt>'''class '''name«'''('''parentclasses''')'''»''':<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''members</tt>
|
| <tt>'''__all__ = [ '''member1''','''member2''',... ]'''</tt>
|-
| Visual Basic .NET
| <tt>'''Class '''name«''' Inherits '''parentclass»«''' Implements '''interfaces»<br />members <br />'''End Class'''</tt>
| <tt>'''Interface '''name«''' Inherits '''parentinterfaces»<br />members <br />'''End Interface'''</tt>
| <tt>'''Namespace '''name<br />members <br />'''End Namespace'''</tt>
|-
| Eiffel
| <tt>'''class '''name«''' inherit '''parentclasses»<br />members<br />'''end'''</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Perl
| <tt>'''package '''name'''; '''«'''@ISA = qw('''parentclasses''');'''» members '''1;'''</tt>
| 
| <tt>'''package '''name''';''' members</tt>
|-
| Perl 6
| <tt>'''class '''name «'''is''' parentclass «'''is''' parentclass ...»» «'''does''' role «'''does''' role ...»» '''{''' members '''}'''</tt>
| <tt>'''role '''name «'''does''' role «'''does''' role ...»» '''{''' members '''}'''</tt>
| <tt>'''module''' name '''{''' members '''}'''</tt>
|-
| Ruby
| <tt>'''class '''name« '''<''' parentclass» <br /> members <br /> '''end'''</tt>
| 
| <tt>'''module '''name <br /> members <br /> '''end'''</tt>
|-
| Windows PowerShell
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
| <tt>'''class '''name «parameters»''' = object '''«'''(self)'''» «'''inherit '''parentclass «parameters» «'''inherit '''parentclass «parameters» ...»» members '''end'''</tt>
| 
| <tt>'''module''' name <br /> members</tt>
|-
| F#
| <tt>'''type '''name«'''('''parameters''')'''»''' '''«'''as this'''» '''= class''' «'''inherit '''parentclass«'''('''parameters''')'''» «'''as base'''»» members «'''interface''' interface '''with''' implementation «'''interface''' interface '''with''' implementation ...»» '''end'''</tt>
| <tt>'''type '''name '''= interface''' members '''end'''</tt>
| <tt>'''namespace''' name <br /> members</tt>
|-
| Smalltalk
| 
| 
| 
|-
| Object Pascal (Delphi)
| <poem><tt>'''ClassName = Class'''''' '''«('''ClassParent, Interfaces)'''»
private
// Private members(include Methods and Fields)
public
// Public members
protected
// Protected members
published
// Published members
end;</tt></poem>
| 
| <tt>'''package '''name''';''' members</tt>
|-
| Scala
| <source lang="scala">
class ConcreteClass(constructor params)
extends ParentClass
with Trait1 with Trait2 with Trait2 {
// members
}
</source>
| <source lang="scala">
trait TraitName
extends OtherTrait1
with OtherTrait2 with OtherTrait3 {
// members
}
</source>
| <source lang="scala">
package name
</source>
|-
| COBOL
| <code>'''CLASS-ID.''' name« '''INHERITS'''« '''FROM'''» parentclasses»'''.'''
<ul>'''FACTORY'''« '''IMPLEMENTS''' interfaces»'''.'''
<ul>class-members</ul>
'''END FACTORY.'''</ul>
<ul>'''OBJECT'''« '''IMPLEMENTS''' interfaces»'''.'''
<ul>instance-members</ul>
'''END OBJECT.'''</ul>
'''END CLASS''' name'''.'''</code>
| <code>'''INTERFACE-ID.''' name« '''INHERITS'''« '''FROM'''» interfaces»'''.'''
<ul>members</ul>
'''END INTERFACE''' name'''.'''</code>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}

== Class members ==

=== Constructors and destructors ===
{| class="wikitable"
|-
! 
! [[constructor (computer science)|constructor]]
! [[destructor (computer science)|destructor]]
! [[finalizer]]
|-
| ABAP Objects
| <tt>'''methods constructor''' «'''importing''' parameter = argument»<br />'''method constructor.''' instructions '''endmethod.'''</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| <tt>class'''('''«parameters»''') '''«''': '''initializers</tt><tt>»''' { '''instructions''' }'''</tt>
| <tt>'''~'''class'''() { '''instructions''' }'''</tt>
| 
|-
| C#
| <tt>class'''('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''void Dispose(){ '''instructions''' }'''</tt>
| <tt>'''~'''class'''() { '''instructions''' }'''</tt>
|-
| D
| <tt>'''this('''«parameters»''') { '''instructions''' }'''</tt>
| 
| <tt>'''~this() { '''instructions''' }'''</tt>
|-
| Java
| <tt>class'''('''«parameters»''') { '''instructions''' }'''</tt>
| 
| <tt>'''void finalize() { '''instructions''' }'''</tt>
|-
| Eiffel
|
| 
|
|-
| Objective-C (Cocoa)
| <tt>'''- (id)init { '''instructions...''' return self; }''' or <br /> '''- (id)'''initWithFoo''':'''parameter «bar''':'''parameter ...»''' { '''instructions...''' return self; }'''</tt>
| <tt>'''- (void)dealloc { '''instructions''' }'''</tt>
| <tt>'''- (void)finalize { '''instructions''' }'''</tt>
|-
| Python
| <tt>'''def __init__(self'''«''', '''parameters»'''):'''<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
| 
| <tt>'''def __del__(self):'''<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
|-
| Visual Basic .NET
| <tt>'''Sub New('''«parameters»''')'''<br /> instructions <br />'''End Sub'''</tt>
| <tt>'''Sub Dispose()'''<br /> instructions <br />'''End Sub'''</tt>
| <tt>'''Overrides Sub Finalize()'''<br /> instructions <br />'''End Sub'''</tt>
|-
| PHP
| <tt>'''function __construct('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''function __destruct() { '''instructions''' }'''</tt>
|
|-
| Perl
| <tt>'''sub new { my ($class'''«''', '''parameters»''') = @_; my $self = {}; '''instructions ...''' bless($self, $class); return $self; }'''</tt>
| <tt>'''sub DESTROY { my ($self) = @_; '''instructions''' }'''</tt>
|
|-
| Perl 6
| <tt>'''submethod BUILD {''' instructions '''}''' or<br /> «'''multi''' » '''method new('''««$self''':''' »parameters»''') { self.bless(*, '''field1 '''=>''' value1, ...''');''' ... instructions }'''</tt>
| <tt>'''submethod DESTROY {''' instructions '''}'''</tt>
| 
|-
| Ruby
| <tt>'''def initialize'''«'''('''parameters''')'''» <br /> instructions <br /> '''end'''</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Windows PowerShell
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
| <tt>'''initializer''' instructions</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| F#
| <tt>'''do''' instructions or<br /> '''new('''parameters''') = ''' expression</tt>
| <tt>'''member this.Dispose() =''' instructions</tt>
| <tt>'''override this.Finalize() =''' instructions</tt>
|-
| JavaScript
| <tt>'''function''' name«(«parameters») { instructions }</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| COBOL
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}

=== Fields ===

{| class="wikitable"
|-
! 
! public
! private
! protected
! friend
|-
| ABAP Objects
| <tt>'''public section. data''' field '''type''' type'''.'''</tt>
| <tt>'''private section. data''' field '''type''' type'''.'''</tt>
| <tt>'''protected section. data''' field '''type''' type'''.'''</tt>
|
|-
| C++ (STL)
| <tt>'''public: '''type field''';'''</tt>
| <tt>'''private: '''type field''';'''</tt>
| <tt>'''protected: '''type field''';'''</tt>
|
|-
| C#
| rowspan=3| <tt>'''public '''type field «'''=''' value»''';'''</tt>
| rowspan=3| <tt>'''private '''type field «'''=''' value»''';'''</tt>
| <tt>'''protected '''type field «'''=''' value»''';'''</tt>
| <tt>'''internal''' type field «'''=''' value»''';'''</tt>
|-
| D
| 
| <tt>'''package''' type field «'''=''' value»''';'''</tt>
|-
| Java
| <tt>'''protected '''type field «'''=''' value»''';'''</tt>
| <tt>type field «'''=''' value»''';'''</tt>
|-
| Eiffel
| <tt>'''feature'''<br /> field: TYPE</tt>
| <tt>'''feature {NONE}'''<br /> field: TYPE</tt>
| <tt>'''feature {'''current_class'''}''' <br /> field: TYPE</tt>
| <tt>'''feature {FRIEND}''' <br /> field: TYPE</tt>
|-
| Objective-C
| <tt>'''@public '''type field''';'''</tt>
| <tt>'''@private '''type field''';'''</tt>
| <tt>'''@protected '''type field''';'''</tt>
| <tt>'''@package '''type field''';'''</tt>
|-
| Smalltalk
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small> 
| 
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small> 
|-
| Python
| <tt>'''self.'''field''' = '''value</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small> 
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Visual Basic .NET
| <tt>'''Public '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Private '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Protected '''field''' As '''type «'''=''' value»</tt>
| <tt>'''Friend '''field''' As '''type «'''=''' value»</tt>
|-
| PHP
| <tt>'''public $'''field «'''=''' value»''';'''</tt>
| <tt>'''private $'''field «'''=''' value»''';'''</tt>
| <tt>'''protected $'''field «'''=''' value»''';'''</tt>
| 
|-
| Perl
| <tt>'''$self->{'''field'''} = '''value''';'''</tt>
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Perl 6
| <tt>'''has'''« type »$'''.'''field« '''is rw'''»</tt>
| <tt>'''has'''« type »$'''!'''field</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Ruby
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''[[sigil (computer programming)|@]]'''field '''=''' value</tt>
| 
|-
| Windows PowerShell
| <tt>'''Add-Member '''<br />«'''-MemberType '''»'''NoteProperty '''<br />«'''-Name '''»Bar «'''-Value '''»value<br />'''-InputObject '''variable</tt>
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''val''' «'''mutable'''» field '''=''' value</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| F#
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''let''' «'''mutable'''» field '''=''' value</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| JavaScript
| <tt>'''this.'''field''' = '''value <br /> '''this'''["field"] = value</tt>
|
|
|
|-
| COBOL
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| level-number field clauses'''.'''
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|}

=== Methods ===
{| class="wikitable"
|- valign="top"
!
! basic/void method
! value-returning method
|- valign="top"
| ABAP Objects
| <tt>'''methods''' name «'''importing''' parameter = argument» «'''exporting''' parameter = argument» «'''changing''' parameter = argument» «'''returning value('''parameter''')'''»<br />'''method''' name'''.''' instructions '''endmethod.'''</tt>
|
|- valign="top"
| C++
| rowspan=4| <tt>'''void '''foo'''('''«parameters»''') { '''instructions''' }'''</tt>
| rowspan=4| <tt>type foo'''('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| C#
|- valign="top"
| D
|- valign="top"
| Java
|- valign="top"
| Eiffel
| <tt>foo '''(''' «parameters» ''')'''<br /> '''do''' <br /> instructions <br /> '''end'''</tt>
| <tt>foo '''(''' «parameters» '''):''' TYPE <br /> '''do''' <br /> instructions... <br /> '''Result''' := value <br /> '''end'''</tt>
|- valign="top"
| Objective-C
| <tt>'''- (void)'''foo«''':'''parameter «bar''':'''parameter ...»»''' { '''instructions''' }'''</tt>
| <tt>'''- ('''type''')'''foo«''':'''parameter «bar''':'''parameter ...»»''' { '''instructions... '''return''' value'''; }'''</tt>
|- valign="top"
| Python
| <tt>'''def '''foo'''(self'''«''',''' parameters»'''):<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''instructions</tt>
| <tt>'''def '''foo'''(self'''«''',''' parameters»'''):<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''instructions'''<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> return '''value</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Sub '''Foo'''('''«parameters»''') <br /> '''instructions''' <br /> End Sub'''</tt>
| <tt>'''Function '''Foo'''('''«parameters»''') As '''type''' <br /> '''instructions <br /> ... <br /> '''Return''' value<br /> '''End Function'''</tt>
|- valign="top"
| PHP
| <tt>'''function '''foo'''('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''function '''foo'''('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| Perl
| <tt>'''sub '''foo''' { my ($self'''«''', '''parameters»''') = @_; '''instructions''' }'''</tt>
| <tt>'''sub '''foo''' { my ($self'''«''', '''parameters»''') = @_; '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| Perl 6
| <tt>«'''has''' »«'''multi''' »'''method '''foo'''('''««$self''': ''' »parameters»''') { '''instructions''' }'''</tt>
| <tt>«'''has''' «type »»«'''multi''' »'''method '''foo'''('''««$self''': ''' »parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
|- valign="top"
| Ruby
| <tt>'''def '''foo«'''('''parameters''')'''» <br /> instructions <br /> '''end'''</tt>
| <tt>'''def '''foo«'''('''parameters''')'''» <br /> instructions <br /> expression resulting in return value <br /> '''end''' <br /> or <br /> '''def '''foo«'''('''parameters''')»''' <br /> instructions <br /> '''return''' value <br /> '''end'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''Add-Member '''«'''-MemberType'''»''' ScriptMethod '''«'''-Name'''» foo «'''-Value'''»''' { '''«'''param('''parameters''')'''»''' '''instructions''' } -InputObject '''variable</tt>
| <tt>'''Add-Member '''«'''-MemberType'''»''' ScriptMethod '''«'''-Name'''» foo «'''-Value'''»''' { '''«'''param('''parameters''')'''»''' '''instructions ... '''return''' value '''} -InputObject '''variable</tt>
|- valign="top"
| OCaml
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''method''' foo «parameters» '''=''' expression</tt>
|- valign="top"
| F#
| <tt>'''member this.'''foo'''('''«parameters»''') =''' expression</tt>
|- valign="top"
| JavaScript
| <tt>'''this.'''method''' = function('''«parameters»''') {'''instructions'''}''' <br /> name«.'''prototype.'''method''' = function('''«parameters»''') {'''instructions'''}'''</tt>
| <tt> '''this.'''method''' = function('''«parameters»''') {'''instructions... '''return''' value''';}''' <br /> name«.'''prototype.'''method''' = function('''«parameters»''') {'''instructions... '''return''' value;'''}'''</tt>
|- valign="top"
| COBOL
| <code>'''METHOD-ID.''' foo'''.'''<br/>
«'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
parameter declarations»<br/>
'''PROCEDURE DIVISION'''« '''USING''' parameters»'''.'''
<ul>instructions</ul>
'''END METHOD''' foo'''.'''</code>
| <code>'''METHOD-ID.''' foo'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
«parameter declarations»<br/>
result-var declaration<br/>
'''PROCEDURE DIVISION'''« '''USING''' parameters» '''RETURNING''' result-var'''.'''
<ul>instructions</ul>
'''END METHOD''' foo'''.'''</code>
|}

=== Properties ===
How to declare a property named "Bar"

==== Manually implemented ====

{| class="wikitable"
|- valign="top"
! 
! read-write
! read-only
! write-only
|- valign="top"
| ABAP Objects
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| C++ (STL)
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| C#
| <tt>type Bar '''{<br/>  get { '''instructions ... '''return '''value''';''' '''}<br/>  set { '''instructions''' } }'''</tt>
| <tt>type Bar '''{ get { '''instructions ... '''return '''value''';''' '''} }'''</tt>
| <tt>type Bar '''{ set { '''instructions''' } }'''</tt>
|- valign="top"
| D
| <tt>'''@property''' type bar'''() { '''instructions ... '''return '''value''';''' '''} <br /> @property''' type bar'''('''type value''') { '''instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>'''@property''' type bar'''() { '''instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>'''@property''' type bar'''('''type value''') { '''instructions ... '''return '''value''';''' '''}'''</tt>
|- valign="top"
| Java
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Objective-C 2.0 (Cocoa)
| <tt>'''@property (readwrite)''' type bar''';''' <br /></tt> and then inside <br/><tt>@implementation <br /> '''- ('''type''')'''bar''' { '''instructions''' }''' <br /> '''- (void)'''setBar''':('''type''')'''value''' { '''instructions''' }'''</tt>
| <tt>'''@property (readonly)''' type bar''';''' <br /></tt> and then inside <br/><tt>@implementation <br /> 
'''- ('''type''')'''bar''' { '''instructions''' }'''</tt>
| 
|- valign="top"
| Eiffel
| <tt>'''feature''' -- Access <br />x: TYPE '''assign''' set_x<br /> '''feature''' -- Settings <br /> set_x (a_x: '''like''' x) '''do''' instructions '''ensure''' x_set: verification '''end'''</tt>
|
|
|- valign="top"
| Python
| <tt>'''def''' setBar'''(self, '''value'''):''' <br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions'''<br />def''' getBar'''(self):<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''instructions<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''return''' value<br />bar''' = property('''getBar''',''' setBar''')'''</tt>
| <tt>'''def''' getBar'''(self):''' <br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''return''' value<br />bar''' = property('''getBar''')'''</tt>
| <tt>'''def''' setBar'''(self, '''value'''): '''<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions<br />bar''' = property(fset = '''setBar''')'''</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Property '''Bar'''() As '''type<br />'''Get<br />'''instructions<br />'''Return''' value<br />'''End Get<br />Set (ByVal '''Value''' As '''type''')'''<br />instructions'''<br />End Set<br />End Property'''</tt>
| <tt>'''ReadOnly Property '''Bar'''() As '''type<br />'''Get<br />'''instructions<br />'''Return''' value<br />'''End Get<br />End Property'''</tt>
| <tt>'''WriteOnly Property '''Bar'''() As '''type<br />'''Set (ByVal '''Value''' As '''type''')'''<br />instructions<br />'''End Set<br />End Property'''</tt>
|- valign="top"
| PHP
| <tt>'''function __get('''$property''') {<br/> switch ('''$property''') {<br/> case ''''Bar'''' : '''instructions ... '''return''' value''';<br/> } }<br />function __set('''$property''', '''$value''') {<br/> switch ('''$property''') {<br/> case ''''Bar'''' : '''instructions'''<br/> } }'''</tt>
| <tt>'''function __get('''$property''') {<br/> switch ($'''property''') {<br/> case ''''Bar'''' : '''instructions ... '''return''' value''';<br/> } }'''</tt>
| <tt>'''function __set('''$property''', '''$value''') {<br/> switch ('''$property''') {<br/> case ''''Bar'''' : '''instructions'''<br/> } }'''</tt>
|- valign="top"
| Perl
| <tt>'''sub''' Bar {<br />   '''my''' $self = '''shift''';<br />   '''if''' ('''my''' $Bar = '''shift''') {<br />        # setter<br />        $self->{Bar} = $Bar;<br />        return $self;<br />  } '''else''' {<br />        # getter<br />        '''return''' $self->{Bar};    <br />   }<br />}</tt>
| <tt>'''sub''' Bar {<br />   '''my''' $self = '''shift''';<br />   '''if''' ('''my''' $Bar = '''shift''') {<br />        # read-only<br />        '''die''' "Bar is read-only\n";<br />  } '''else''' {<br />        # getter<br />        '''return''' $self->{Bar};    <br />   }<br />}</tt>
| <tt>'''sub''' Bar {<br />   '''my''' $self = '''shift''';<br />   '''if''' ('''my''' $Bar = '''shift''') {<br />        # setter<br />        $self->{Bar} = $Bar;<br />        return $self;<br />  } '''else''' {<br />        # write-only<br />        '''die''' "Bar is write-only\n";  <br />   }<br />}</tt>
|- valign="top"
| Perl 6
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Ruby
| <tt>'''def '''bar <br /> instructions <br /> expression resulting in return value <br /> '''end''' <br /> '''def '''bar'''=('''value''')''' <br /> instructions <br /> '''end'''</tt>
| <tt>'''def '''bar <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| <tt>'''def '''bar'''=('''value''')''' <br /> instructions <br /> '''end'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''Add-Member '''<br/>«'''-MemberType '''»'''ScriptProperty '''<br/>«'''-Name '''»Bar «'''-Value '''»'''{''' instructions ... '''return''' value''' }''' <br/>«'''-SecondValue '''»'''{''' instructions '''}''' <br/>'''-InputObject '''variable</tt>
| <tt>'''Add-Member '''<br/>«'''-MemberType '''»'''ScriptProperty '''<br/>«'''-Name '''»Bar «'''-Value '''»'''{''' instructions ... '''return''' value'''}''' <br/>'''-InputObject '''variable</tt>
| <tt>'''Add-Member '''<br/>«'''-MemberType '''»'''ScriptProperty '''<br/>«'''-Name '''»Bar '''-SecondValue {''' instructions '''}''' <br/>'''-InputObject '''variable</tt>
|- valign="top"
| OCaml
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| F#
| <tt>'''member this.'''Bar '''with get() =''' expression '''and set('''value''') =''' expression</tt>
| <tt>'''member this.'''Bar '''=''' expression</tt>
| <tt>'''member this.'''Bar '''with set('''value''') =''' expression</tt>
|- valign="top"
| COBOL
| <code>'''METHOD-ID. GET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
return-var declaration<br/>
'''PROCEDURE DIVISION RETURNING''' return-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''<br/>
'''METHOD-ID. SET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
value-var declaration<br/>
'''PROCEDURE DIVISION USING''' value-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''</code>
| <code>'''METHOD-ID. GET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
return-var declaration<br/>
'''PROCEDURE DIVISION RETURNING''' return-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''</code>
| <code>'''METHOD-ID. SET PROPERTY''' bar'''.'''<br/>
'''DATA DIVISION.'''<br/>
'''LINKAGE SECTION.'''<br/>
value-var declaration<br/>
'''PROCEDURE DIVISION USING''' value-var'''.'''
<ul>instructions</ul>
'''END METHOD.'''</code>
|}

==== Automatically implemented ====

{| class="wikitable"
|- valign="top"
! 
! read-write
! read-only
! write-only
|- valign="top"
| ABAP Objects
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| C++ (STL)
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| C#
| <tt>type Bar '''{  get; set; }'''</tt>
| <tt>type Bar '''{  get; private set; }'''</tt>
| <tt>type Bar '''{  private get; set; }'''</tt>
|- valign="top"
| D
| 
| 
| 
|- valign="top"
| Java
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Objective-C 2.0 (Cocoa)
| <tt>'''@property (readwrite)''' type bar''';''' <br /> and then inside @implementation <br /> '''@synthesize''' bar''';'''</tt>
| <tt>'''@property (readonly)''' type bar''';''' <br /> and then inside @implementation <br /> '''@synthesize''' bar''';'''</tt>
| 
|- valign="top"
| Eiffel
| 
|
|
|- valign="top"
| Python
| <tt>'''@property'''<br />'''def''' bar('''self'''):<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd>instructions<br />'''@'''bar'''.setter'''<br />'''def''' bar('''self''', value):<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd>instructions</tt>
| <tt>'''@property'''<br />'''def''' bar('''self'''):<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd>instructions</tt>
| <tt>bar '''= property()'''<br />'''@'''bar'''.setter'''<br />'''def''' bar('''self''', value):<br /><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd>instructions</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Property''' Bar '''As''' type« '''=''' initial_value» (VB 10)</tt>
| 
| 
|- valign="top"
| PHP
| 
| 
| 
|- valign="top"
| Perl
| <tt>'''use''' '''base''' '''qw'''(Class::Accessor);<br />'''__PACKAGE__'''->'''mk_accessors'''('Bar');</tt>
| <tt>'''use''' '''base''' '''qw'''(Class::Accessor);<br />'''__PACKAGE__'''->'''mk_ro_accessors'''('Bar');</tt>
| <tt>'''use''' '''base''' '''qw'''(Class::Accessor);<br />'''__PACKAGE__'''->'''mk_wo_accessors'''('Bar');</tt>
|- valign="top"
| Perl 6
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Ruby
| <tt>'''attr_accessor''' :bar</tt>
| <tt>'''attr_reader''' :bar</tt>
| <tt>'''attr_writer''' :bar</tt>
|- valign="top"
| Windows PowerShell
| 
| 
| 
|- valign="top"
| OCaml
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| F#
| <tt>'''member val''' Bar '''=''' value '''with get, set'''</tt>
| 
| 
|- valign="top"
| COBOL
| <code>level-number bar clauses '''PROPERTY.'''</code>
| <code>level-number bar clauses '''PROPERTY «WITH» NO SET.'''</code>
| <code>level-number bar clauses '''PROPERTY «WITH» NO GET.'''</code>
|}

=== Overloaded operators ===

==== Standard operators ====

{| class="wikitable"
|
! unary
! binary
! function call
|-
| ABAP Objects
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| <tt>type '''operator'''symbol'''() { '''instructions''' }'''</tt>
| <tt>type '''operator'''symbol'''('''type operand2''') { '''instructions''' }'''</tt>
| <tt>type '''operator()('''«parameters»''') { '''instructions''' }'''</tt>
|-
| C#
| <tt>'''static '''type''' operator '''symbol'''('''type operand''') { '''instructions''' }'''</tt>
| <tt>'''static '''type''' operator '''symbol'''('''type operand1''', '''type operand2''') { '''instructions''' }'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| D
| <tt>type '''opUnary(string''' s''')() if ('''s''' == "'''symbol'''") { '''instructions''' }'''</tt>
| <tt>type '''opBinary(string''' s''')('''type operand2''') if ('''s''' == "'''symbol'''") { '''instructions''' }''' <br /> type '''opBinaryRight(string''' s''')('''type operand1''') if ('''s''' == "'''symbol'''") { switch ('''s''') { '''instructions''' }'''</tt>
| <tt>type '''opCall('''«parameters»''') { '''instructions''' }'''</tt>
|-
| Java
| rowspan=2 colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Objective-C
|-
| Eiffel
| <tt>op_name '''alias "'''symbol'''":''' TYPE <br />'''do''' instructions '''end'''</tt>
| <tt>op_name '''alias "'''symbol'''" ('''operand: TYPE1'''):''' TYPE2 <br />'''do''' instructions '''end'''</tt>
| 
|-
| Python
| <tt>'''def __'''opname'''__(self): <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''instructions'''<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> return '''value</tt>
| <tt>'''def __'''opname'''__(self, '''operand2'''): <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''instructions'''<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> return '''value</tt>
| <tt>'''def __call__(self'''«''', '''paramters»'''): <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''instructions'''<br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> return '''value</tt>
|-
| Visual Basic .NET
| <tt>'''Shared Operator '''symbol'''('''operand''' As '''type''') As '''type'''<br /> '''instructions''' <br /> End Operator'''</tt>
| <tt>'''Shared Operator '''symbol'''('''operand1''' As '''type''', '''operand2''' As '''type''') As '''type'''<br /> '''instructions''' <br /> End Operator'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| PHP
| colspan=2|
| <tt>'''function __invoke('''«parameters»''') { '''instructions''' }''' (PHP 5.3+)</tt>
|-
| Perl
| <tt>'''use overload "'''symbol'''" => sub { my ($self) = @_; '''instructions''' };'''</tt>
| <tt>'''use overload "'''symbol'''" => sub { my ($self, '''$operand2''', '''$operands_reversed''') = @_; '''instructions''' };'''</tt>
| 
|-
| Perl 6
| <tt>«'''our''' «type »»«'''multi''' »'''method prefix:<'''symbol'''> ('''«$operand''':''' »''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method postfix:<'''symbol'''> ('''«$operand''':''' »''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method circumfix:<'''symbol1 symbol2'''> ('''«$operand''':''' »''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>«'''our''' «type »»«'''multi''' »'''method infix:<'''symbol'''> ('''«$operand1''':''' » type operand2''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>«'''our''' «type »»«'''multi''' »'''method postcircumfix:<( )> ('''«$self''':''' » «parameters»''') {''' instructions '''}'''</tt>
|-
| Ruby
| <tt>'''def '''symbol <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| <tt>'''def '''symbol'''('''operand2''')''' <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Windows PowerShell
| rowspan=2 colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
|-
| F#
| <tt>'''static member ('''symbol''')''' operand '''=''' expression</tt>
| <tt>'''static member ('''symbol''')''' '''('''operand1''',''' operand2''') =''' expression</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| COBOL
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|}

==== Indexers ====

{| class="wikitable"
|
! read-write
! read-only
! write-only
|- valign="top"
| ABAP Objects
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| C++ (STL)
| <tt>type'''& operator[]('''type index''') { '''instructions''' }'''</tt>
| <tt>type '''operator[]('''type index''') { '''instructions''' }'''</tt>
| 
|- valign="top"
| C#
| <tt>type '''this['''type index'''] { <br /> get{ '''instructions''' } <br /> set{ '''instructions''' } }'''</tt>
| <tt>type '''this['''type index'''] { get{ '''instructions''' } }'''</tt>
| <tt>type '''this['''type index'''] { set{ '''instructions''' } }'''</tt>
|- valign="top"
| D
| <tt>type '''opIndex('''type index''') { '''instructions''' }''' <br /> type '''opIndexAssign('''type value''', '''type index''') { '''instructions''' }'''</tt>
| <tt>type '''opIndex('''type index''') { '''instructions''' }'''</tt>
| <tt>type '''opIndexAssign('''type value''', '''type index''') { '''instructions''' }'''</tt>
|- valign="top"
| Java
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Objective-C (recent Clang compiler)
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''- (id)objectAtIndexedSubscript:(NSUInteger)'''index''' { '''instructions''' return '''value'''; }''' or<br />'''- (id)objectForKeyedSubscript:(id)'''index''' { '''instructions''' return '''value'''; }'''</tt>
| <tt>'''- (void)setObject:(id)'''value''' atIndexedSubscript:(NSUInteger)'''index''' { '''instructions''' }''' or<br />'''- (void)setObject:(id)'''value''' forKeyedSubscript:(id)'''index''' { '''instructions''' }'''</tt>
|- valign="top"
| Eiffel
| <tt>bracket_name '''alias "[]" ('''index: TYPE'''):''' TYPE '''assign''' set_item <br />'''do''' instructions '''end''' <br /> set_item '''('''value: TYPE; index: TYPE'''):''' <br />'''do''' instructions '''end'''</tt>
| <tt>bracket_name '''alias "[]" ('''index: TYPE'''):''' TYPE <br />'''do''' instructions '''end'''</tt>
| 
|- valign="top"
| Python
| <tt>'''def __getitem__(self, '''index'''): <br /> '''<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''return''' value <br /> '''def __setitem__(self, '''index''', '''value'''):''' <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
| <tt>'''def __getitem__(self, '''index'''): <br /> '''<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''return''' value</tt>
| <tt>'''def __setitem__(self, '''index''', '''value'''):''' <br /> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Default Property Item('''Index''' As '''type''') As '''type''' <br /> Get <br /> '''instructions''' <br /> End Get <br /> Set(ByVal '''Value''' As '''type''') <br /> '''instructions''' <br /> End Set <br /> End Property'''</tt>
| <tt>'''Default ReadOnly Property Item('''Index''' As '''type''') As '''type''' <br /> Get <br /> '''instructions''' <br /> End Get <br /> End Property'''</tt>
| <tt>'''Default WriteOnly Property Item('''Index''' As '''type''') As '''type''' <br /> Set(ByVal '''Value''' As '''type''') <br /> '''instructions''' <br /> End Set <br /> End Property'''</tt>
|- valign="top"
| PHP
|colspan=3| 
|- valign="top"
| Perl
|colspan=3| 
|- valign="top"
| Perl 6
| <tt>«'''our''' «type »»«'''multi''' »'''method postcircumfix:<[ ]> is rw ('''«$self''':''' » type $index''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method postcircumfix:<{ }> is rw  ('''«$self''':''' » type $key''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| <tt>«'''our''' «type »»«'''multi''' »'''method postcircumfix:<[ ]>('''«$self''':''' » type $index''') {''' instructions ... '''return '''value''';''' '''}''' or<br /> «'''our''' «type »»«'''multi''' »'''method postcircumfix:<{ }> ('''«$self''':''' » type $key''') {''' instructions ... '''return '''value''';''' '''}'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Ruby
| <tt>'''def []('''index''')''' <br /> instructions <br /> expression resulting in return value <br /> '''end''' <br /> '''def []=('''index, value''')''' <br /> instructions <br /> '''end'''</tt>
| <tt>'''def []('''index''')''' <br /> instructions <br /> expression resulting in return value <br /> '''end'''</tt>
| <tt>'''def []=('''index, value''')''' <br /> instructions <br /> '''end'''</tt>
|- valign="top"
| Windows PowerShell
| rowspan=2 colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| OCaml
|- valign="top"
| F#
| <tt>'''member this.Item with get('''index''') =''' expression '''and set '''index value '''=''' expression</tt>
| <tt>'''member this.Item with get('''index''') =''' expression</tt>
| <tt>'''member this.Item with set '''index value '''=''' expression</tt>
|- valign="top"
| COBOL
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|}

==== Type casts ====

{| class="wikitable"
|
! downcast
! upcast
|-
| ABAP Objects
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| 
| <tt>'''operator '''returntype'''() { '''instructions''' }'''</tt>
|-
| C#
| <tt>'''static explicit operator '''returntype'''('''type operand''') { '''instructions''' }'''</tt>
| <tt>'''static implicit operator '''returntype'''('''type operand''') { '''instructions''' }'''</tt>
|-
| D
| 
| <tt>T '''opCast('''T''')() { if (is('''T''' == '''type''')) { '''instructions''' } '''...''' }'''</tt>
|-
| Java
| rowspan=4 colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Objective-C
|-
| Eiffel
|-
| Python
|-
| Visual Basic .NET
| <tt>'''Shared Narrowing Operator CType('''operand''' As '''type''') As '''returntype''' <br /> '''instructions ''' <br /> End Operator''' </tt>
| <tt>'''Shared Widening Operator CType('''operand''' As '''type''') As '''returntype''' <br /> '''instructions ''' <br /> End Operator'''</tt>
|-
| Perl 6
| 
| <tt>'''multi method '''type«'''('''$self''':)'''» '''is export {''' instructions '''}'''</tt>
|-
| PHP
| rowspan=5 colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Perl
|-
| Ruby
|-
| Windows PowerShell
|-
| OCaml
|-
| F#
| 
| 
|-
| COBOL
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|}

== Member access ==
How to access members of an object x
{| class="wikitable"
|-
! 
! colspan=3| object member
! rowspan=2| class member
! rowspan=2| namespace member
|-
! 
! method
! field
! property
|-
| ABAP Objects
| <tt>'''x->'''method'''(«'''parameters»''').'''
| <tt>'''x->'''field</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''x=>'''field or '''x=>'''method'''(«'''parameters»''').'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| <tt>'''x.'''method'''('''parameters''')''' or<br />'''ptr->'''method'''('''parameters''')'''</tt>
| <tt>'''x.'''field or<br />'''ptr->'''field</tt>
| 
| <tt>cls'''::'''member</tt>
| <tt>ns'''::'''member</tt>
|-
| Objective-C
| <tt>'''[x '''method«''':'''parameter «bar''':'''parameter ...»»''']'''</tt>
| <tt>'''x->'''field</tt>
| <tt>'''x.'''property (2.0 only) or<br />'''[x '''property''']'''</tt>
| <tt>'''['''cls method«''':'''parameter «bar''':'''parameter ...»»''']'''</tt>
| 
|-
| Smalltalk
| <tt>'''x '''method«''':'''parameter «bar''':'''parameter ...»»</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| 
| <tt>cls method«''':'''parameter «bar''':'''parameter ...»»</tt>
| 
|-
| C#
| rowspan=7| <tt>'''x.'''method'''('''parameters''')'''</tt>
| rowspan=6| <tt>'''x.'''field</tt>
| <tt>'''x.'''property</tt>
| rowspan=5| <tt>cls'''.'''member</tt>
| rowspan=7| <tt>ns'''.'''member</tt>
|-
| Java
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| D
| rowspan=5| <tt>'''x.'''property</tt>
|-
| Python 
|-
| Visual Basic .NET
|-
| Windows PowerShell
| <tt>'''['''cls''']::'''member</tt>
|-
| F#
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>cls'''.'''member</tt>
|-
| Eiffel
| rowspan=2|<tt>'''x.'''method«'''('''parameters''')'''»</tt>
| <tt>'''x.'''field</tt>
|
| <tt>'''{'''cls'''}.'''member</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Ruby
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''x.'''property</tt>
| <tt>cls'''.'''member</tt>
|-
| PHP
| <tt>'''x->'''method'''('''parameters''')'''</tt>
| <tt>'''x->'''field</tt>
| <tt>'''x->'''property</tt>
| <tt>cls'''::'''member</tt>
| <tt>ns'''\'''member</tt>
|-
| Perl
| <tt>'''x->'''method«'''('''parameters''')'''»</tt>
| <tt>'''x->{'''field'''}'''</tt>
| 
| <tt>cls'''->'''method«'''('''parameters''')'''»</tt>
| <tt>ns'''::'''member</tt>
|-
| Perl 6
| <tt>'''x.'''method«'''('''parameters''')'''» or<br /> '''x!'''method«'''('''parameters''')'''»</tt>
| <tt>'''x.'''field or<br /> '''x!'''field</tt>
| 
| <tt>cls'''.'''method«'''('''parameters''')'''» or<br /> cls'''!'''method«'''('''parameters''')'''»</tt>
| <tt>ns'''::'''member</tt>
|-
| OCaml
| <tt>'''x#'''method «parameters»</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| 
| 
|-
| JavaScript
| <tt>'''x.'''method'''('''parameters''')'''<br />'''x'''["method"]'''('''parameters''')'''</tt>
| <tt>'''x.'''field<br />'''x'''["field"]</tt>
| <tt>'''x.'''property<br />'''x'''["property"]</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| COBOL
| <code>'''INVOKE x''' '''"'''method'''"''' «'''USING''' parameters» «'''RETURNING''' result» or<br/>
'''x::"'''method'''"'''«'''('''«parameters»''')'''»</code>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <code>property '''OF x'''</code>
| <code>'''INVOKE''' cls '''"'''method'''"''' «'''USING''' parameters» «'''RETURNING''' result» or<br/>
cls'''::"'''method'''"'''«'''('''«parameters»''')'''» or<br/>
property '''OF''' cls</code>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|}

== Member availability ==
{| class="wikitable"
|-
! 
! colspan=2| Has member?
! colspan=2| Handler for missing member
|-
!
! Method
! Field
! Method
! Field
|-
| ABAP Objects
| rowspan=2 colspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
|-
| Objective-C (Cocoa)
| <tt>'''['''x''' respondsToSelector:@selector('''method''')]'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>forwardInvocation:</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Smalltalk
| <tt>x '''respondsTo:''' selector</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>doesNotUnderstand:</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C#
| rowspan=2 colspan=4| (using reflection)
|-
| Java
|-
| D
| 
| 
| colspan=2| <tt>opDispatch()</tt>
|-
| Eiffel 
| colspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Python 
| <tt>'''hasattr('''x''', "'''method'''") and callable('''x'''.'''method''')'''</tt>
| <tt>'''hasattr('''x''', "'''field'''")'''</tt>
| colspan=2 | <tt>__getattr__()</tt>
|-
| Visual Basic .NET
| colspan=4 |(using reflection)
|-
| Windows PowerShell
| colspan=4 |(using reflection)
|-
| F#
| colspan=4 |(using reflection)
|-
| Ruby
| <tt>x'''.respond_to?(:'''method''')'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>method_missing()</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| PHP
| <tt>'''method_exists('''x''', "'''method'''")'''</tt>
| <tt>'''property_exists('''x''', "'''field'''")'''</tt>
| <tt>__call()</tt>
| <tt>__get() / __set()</tt>
|-
| Perl
| <tt>x'''->can("'''method'''")'''</tt>
| <tt>'''exists '''x'''->{'''field'''}'''</tt>
| AUTOLOAD
|
|-
| Perl 6
| <tt>x'''.can("'''method'''")'''</tt>
| <tt>x'''.'''field'''.defined'''</tt>
| AUTOLOAD
|
|-
| OCaml
| colspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| JavaScript 
| <tt>'''typeof '''x'''.'''method''' === "function"</tt>
| <tt>field '''in''' x</tt>
| 
| 
|-
| COBOL
| colspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}

== Special variables ==
{| class="wikitable"
|-
! 
! [[this (computer science)|current object]]
! [[this (computer science)|current object]]'s [[parent class|parent object]]
! [[Nullable type|null reference]]
! [[Context (computing)|Current Context of Execution]]
|-
| Smalltalk
| <tt>'''self'''</tt>
| <tt>'''super'''</tt>
| <tt>'''nil'''</tt>
| <tt>'''thisContext'''</tt>
|-
| ABAP Objects
| <tt>'''me'''</tt>
| <tt>'''super'''</tt>
| <tt>'''initial'''</tt>
|
|-
| C++ (STL)
| <tt>'''*this'''</tt>
|
| <tt>'''NULL''', '''nullptr'''</tt>
|
|-
| C#
| rowspan=4| <tt>'''this'''</tt>
| <tt>'''base'''</tt>
| rowspan=3| <tt>'''null'''</tt>
|
|-
| Java
| rowspan=2| <tt>'''super'''</tt>
|
|-
| D
| 
|-
| JavaScript
| 
| <tt>'''null''', '''undefined'''</tt>
|
|-
| Objective-C
| <tt>'''self'''</tt>
| <tt>'''super'''</tt>
| <tt>'''nil'''</tt>
|
|-
| Python
| <tt>'''self'''</tt>
| <tt>'''super('''current_class_name''', self)'''</tt><br /><tt>'''super()'''</tt> (3.x only)
| <tt>'''None'''</tt>
|
|-
| Visual Basic .NET
| <tt>'''Me'''</tt>
| <tt>'''MyBase'''</tt>
| <tt>'''Nothing'''</tt>
|
|-
| Eiffel
| <tt>'''Current'''</tt>
| <tt>'''Precursor''' «'''{'''superclass'''}'''» «'''('''args''')'''»</tt>
| <tt>'''Void'''</tt>
|
|-
| PHP
| <tt>'''$this'''</tt>
| <tt>'''parent'''</tt>
| <tt>'''NULL'''</tt>
|
|-
| Perl
| <tt>'''$self'''</tt>
| <tt>'''$self->SUPER'''</tt>
| <tt>'''undef'''</tt>
|
|-
| Perl 6
| <tt>'''self'''</tt>
| <tt>'''SUPER'''</tt>
| <tt>'''Nil'''</tt>
|
|-
| Ruby
| <tt>'''self'''</tt>
| <tt>'''super'''«'''('''args''')'''»</tt>
| <tt>'''nil'''</tt>
| <tt>'''binding'''</tt>
|-
| Windows PowerShell
| <tt>'''$this'''</tt>
|
| <tt>'''$NULL'''</tt>
|
|-
| OCaml
| <tt>'''self'''</tt>
| <tt>'''super'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| F#
| <tt>'''this'''</tt>
| <tt>'''base'''</tt>
| <tt>'''null'''</tt>
|
|-
| COBOL
| <code>'''SELF'''</code>
| <code>'''SUPER'''</code>
| <code>'''NULL'''</code>
|
|}

== Special methods ==
{| class="wikitable"
|-
!rowspan=2|
!colspan=2| String representation
!rowspan=2| [[Object copy]]
!rowspan=2| Value equality
!rowspan=2| Object comparison
!rowspan=2| Hash code
!rowspan=2| Object ID
|-
! Human-readable
! Source-compatible
|-
| ABAP Objects
| colspan=7 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| 
| 
| 
| <tt>x '''==''' y</tt>
| 
| 
| <small>pointer to object can be converted into an integer ID</small>
|-
| C#
| <tt>x'''.ToString()'''</tt>
|
| <tt>x'''.Clone()'''</tt>
| <tt>x'''.Equals('''y''')'''</tt>
| <tt>x'''.CompareTo('''y''')'''</tt>
| <tt>x'''.GetHashCode()'''</tt>
| <tt>'''System<wbr/>.Runtime<wbr/>.CompilerServices<wbr/>.RuntimeHelpers<wbr/>.GetHashCode('''x''')'''</tt>
|-
| Java
| <tt>x'''.toString()'''</tt>
|
| <tt>x'''.[[clone (Java method)|clone]]()'''</tt>
| <tt>x'''.equals('''y''')'''</tt>
| <tt>x'''.compareTo('''y''')'''</tt>
| <tt>x'''.hashCode()'''</tt>
| <tt>'''System<wbr/>.identityHashCode<wbr/>('''x''')'''</tt>
|-
| JavaScript
| <tt>x'''.toString()'''</tt>
|
| 
| 
| 
| 
| 
|-
| D
| <tt>x'''.toString()''' or <br /> '''std.conv<wbr/>.to!string<wbr/>('''x''')'''</tt>
| <tt>x'''.stringof'''</tt>
|
| <tt>x '''==''' y</tt>
| 
| <tt>x'''.toHash()'''</tt>
| 
|-
| Objective-C (Cocoa)
| <tt>'''['''x''' description]'''</tt>
| <tt>'''['''x''' debugDescription]'''</tt>
| <tt>'''['''x''' copy]'''</tt>
| <tt>'''['''x''' isEqual:'''y''']'''</tt>
| <tt>'''['''x''' compare:'''y''']'''</tt>
| <tt>'''['''x''' hash]'''</tt>
| <small>pointer to object can be converted into an integer ID</small>
|-
| Smalltalk
| <tt>x '''displayString'''</tt>
| <tt>x '''printString'''</tt>
| <tt>x '''copy'''</tt>
| <tt>x '''=''' y</tt>
| 
| <tt>x '''hash'''</tt>
| <tt>x '''identityHash'''</tt>
|-
| Python
| <tt>'''str('''x''')'''</tt>
| <tt>'''repr('''x''')'''</tt>
| <tt>'''copy.copy('''x''')'''</tt>
| <tt>x '''==''' y</tt>
| <tt>'''cmp('''x''', '''y''')'''</tt>
| <tt>'''hash('''x''')'''</tt>
| <tt>'''id('''x''')'''</tt>
|-
| Visual Basic .NET
| <tt>x'''.ToString()'''</tt>
|
| <tt>x'''.Clone()'''</tt>
| <tt>x'''.Equals('''y''')'''</tt>
| <tt>x'''.CompareTo('''y''')'''</tt>
| <tt>x'''.GetHashCode()'''</tt>
| 
|-
| Eiffel
| <tt>x'''.out'''</tt>
|
| <tt>x'''.twin'''</tt>
| <tt>x'''.is_equal('''y''')'''</tt>
| When x is <tt>'''COMPARABLE'''</tt>, one can simply do <tt>x '''<''' y</tt>
| When x is <tt>'''HASHABLE'''</tt>, one can use <tt>x'''.hash_code'''</tt>
| When x is <tt>'''IDENTIFIED'''</tt>, one can use <tt>x'''.object_id'''</tt>
|-
| PHP
| <tt>'''sprintf("%s", '''x''')'''</tt>
|
| <tt>'''clone''' x</tt>
| <tt>x '''==''' y</tt>
| <tt></tt>
| 
| <tt>'''spl_object_hash('''x''')'''</tt>
|-
| Perl
| <tt>'''"'''$x'''"'''</tt>
| <tt>'''Data::Dumper<wbr/>->Dump<wbr/>(['''$x'''],[''''x''''])'''</tt>
| <tt>'''Storable<wbr/>::dclone<wbr/>('''$x''')'''</tt>
| 
| 
| 
| <tt>'''Scalar<wbr/>::Util<wbr/>::refaddr<wbr/>( '''$x''' )'''</tt>
|-
| Perl 6
| <tt>'''~'''x</tt>
| <tt>x'''.perl'''</tt>
| <tt>x'''.clone'''</tt>
| <tt>x '''eqv''' y</tt>
| <tt>x '''cmp''' y</tt>
| 
| <tt>x'''.WHICH'''</tt>
|-
| Ruby
| <tt>x'''.to_s'''</tt>
| <tt>x'''.inspect'''</tt>
| <tt>x'''.dup''' or <br /> x'''.clone'''</tt>
| <tt>x '''==''' y or <br /> x'''.eql?('''y''')'''</tt>
| <tt>x '''<=>''' y</tt>
| <tt>x'''.hash'''</tt>
| <tt>x'''.object_id'''</tt>
|-
| Windows PowerShell
| <tt>x'''.ToString()'''</tt>
|
| <tt>x'''.Clone()'''</tt>
| <tt>x'''.Equals('''y''')'''</tt>
| <tt>x'''.CompareTo('''y''')'''</tt>
| <tt>x'''.GetHashCode()'''</tt>
| 
|-
| OCaml
| 
| 
| <tt>'''Oo.copy''' x</tt>
| <tt>x '''=''' y</tt>
|
| <tt>'''Hashtbl<wbr/>.hash''' x</tt>
| <tt>'''Oo.id''' x</tt>
|-
| F#
| <tt>'''string''' x or x'''<wbr/>.ToString()''' or '''sprintf "%O"''' x</tt>
| <tt>'''sprintf "%A"''' x</tt>
| <tt>x'''.Clone()'''</tt>
| <tt>x '''=''' y or x'''<wbr/>.Equals('''y''')'''</tt>
| <tt>'''compare''' x y or x'''<wbr/>.CompareTo('''y''')'''</tt>
| <tt>'''hash''' x or x'''<wbr/>.GetHashCode()'''</tt>
| 
|-
| COBOL
| colspan=7 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}

== Type manipulation ==

{| class="wikitable"
|-
! rowspan=2|
! rowspan=2| Get object type
! rowspan=2| Is instance of (includes subtypes)
! rowspan=2| Upcasting
! colspan=2| [[Downcasting]]
|-
! Runtime check
! No check
|-
| ABAP Objects
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| =
| ?=
|-
| C++ (STL)
| <tt>'''[[typeid]]('''x''')'''</tt>
| <tt>'''[[dynamic_cast]]<'''type''' *>(&'''x''') != [[null pointer|NULL]]'''</tt>
| rowspan=5 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''[[dynamic_cast]]<'''type'''*>('''ptr''')'''</tt>
| <tt>'''('''type'''*)''' ptr or <br /> '''static_cast<'''type'''*>('''ptr''')'''</tt>
|-
| C#
| <tt>x'''.GetType()'''</tt>
| <tt>x '''is''' type</tt>
| <tt>'''('''type''')''' x or x '''as''' type</tt>
|
|-
| D
| <tt>'''typeid('''x''')'''</tt>
| 
| <tt>'''cast('''type''')''' x</tt>
|
|-
| Delphi
| 
| <tt>x '''is''' type</tt>
| <tt>x '''as''' type</tt>
|
|-
| Java
| <tt>x.'''getClass()'''</tt>
| <tt>x '''instanceof''' class</tt>
| <tt>'''('''type''')''' x</tt>
|
|-
| Objective-C (Cocoa)
| <tt>'''['''x''' class]'''</tt>
| <tt>'''['''x''' isKindOfClass:['''class''' class]]'''</tt>
|
| <tt>'''('''type'''*)''' x</tt>
|-
| JavaScript
| <tt>x.'''constructor''' <small>(If not rewritten.)</small></tt>
| <tt>x '''instanceof''' class</tt>
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Visual Basic .NET
| <tt>x'''.GetType()'''</tt>
| <tt>'''TypeOf''' x '''Is''' type</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''CType('''x''', '''type''')''' or '''TryCast('''x''', '''type''')'''</tt>
|
|-
| Eiffel
| <tt>x'''.generating_type'''</tt>
| <tt>'''attached {TYPE}''' x</tt>
| <tt>'''attached {TYPE}''' x '''as''' down_x</tt>
|
|-
| Python
| <tt>'''type('''x''')'''</tt>
| <tt>'''isinstance('''x''', '''type''')'''</tt>
| colspan=3 rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| PHP
| <tt>'''get_class('''x''')'''</tt>
| <tt>x '''instanceof''' class</tt>
|-
| Perl
| <tt>'''ref('''x''')'''</tt>
| <tt>x'''->isa("'''class'''")'''</tt>
|-
| Perl 6
| <tt>x'''.WHAT'''</tt>
| <tt>x'''.isa('''class''')'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>type'''('''x''')''' or<br /> x'''.'''type</tt>
|
|-
| Ruby
| <tt>x'''.class'''</tt>
| <tt>x'''.instance_of?('''type''')''' or<br /> x'''.kind_of?('''type''')'''</tt>
| colspan=3 rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Smalltalk
| <tt>x '''class'''</tt>
| <tt>x '''isKindOf:''' class</tt>
|-
| Windows PowerShell
| <tt>x'''.GetType()'''</tt>
| <tt>x '''-is ['''type''']'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''['''type''']'''x or x '''-as ['''type''']'''</tt>
|
|-
| OCaml
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>'''('''x ''':>''' type''')'''</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| F#
| <tt>x'''.GetType()'''</tt>
| <tt>x ''':?''' type</tt>
| <tt>'''('''x ''':?>''' type''')'''</tt>
|
|-
| COBOL
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <code>x '''AS''' type</code>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|}

== Namespace management ==
{| class="wikitable"
|-
! rowspan=2|
! colspan=2| Import namespace
! rowspan=2| Import item
|-
! qualified
! unqualified
|-
| ABAP Objects
| 
| 
| 
|-
| C++ (STL)
|
| <tt>'''using namespace''' ns''';'''</tt>
| <tt>'''using''' ns::item ''';'''</tt>
|-
| C#
| 
| <tt>'''using''' ns''';'''</tt>
| <tt>'''using''' item '''=''' ns'''.'''item''';'''</tt>
|-
| D
| 
| <tt>'''import''' ns''';'''</tt>
| <tt>'''import''' ns ''':''' item''';'''</tt>
|-
| Java
| 
| <tt>'''import''' ns'''.*;'''</tt>
| <tt>'''import''' ns'''.'''item</tt>
|-
| Objective-C
| 
| 
| 
|-
| Visual Basic .NET
| 
| <tt>'''Imports''' ns</tt>
| 
|-
| Eiffel
| 
| 
| 
|-
| Python
| <tt>'''import''' ns</tt>
| <tt>'''from''' ns '''import''' *</tt>
| <tt>'''from''' ns '''import''' item</tt>
|-
| PHP
| 
| <tt>'''use''' ns''';'''</tt>
| <tt>'''use''' ns'''\'''item''';'''</tt>
|-
| Perl
| rowspan=2| <tt>'''use''' ns''';'''</tt>
| 
| <tt>'''use''' ns qw(item)''';'''</tt>
|-
| Perl 6
| 
| 
|-
| Ruby
| 
| 
| 
|-
| Windows PowerShell
| 
| 
| 
|-
| OCaml
| 
| rowspan=2| <tt>'''open''' ns</tt>
| 
|-
| F#
| 
| 
|-
| COBOL
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}

== Contracts ==

{| class="wikitable"
|-
!
! Precondition
! Postcondition
! Check
! Invariant
! Loop
|-
| ABAP Objects
| colspan=5 rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
|-
| C#
| <tt>''Spec#'':<br /> type foo'''(''' «parameters» ''')'''<br />&nbsp;&nbsp;&nbsp;&nbsp;'''requires''' expression <br />{<br /> &nbsp;&nbsp;&nbsp;&nbsp;body <br />}</tt>
| <tt>''Spec#'':<br /> type foo'''(''' «parameters» ''')'''<br />&nbsp;&nbsp;&nbsp;&nbsp;'''ensures''' expression <br />{<br /> &nbsp;&nbsp;&nbsp;&nbsp;body <br />}</tt>
|-
| Java
| colspan=5 rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Objective-C
|-
| Visual Basic .NET
|-
| D
| <tt>f '''in { '''expression''' } body{ '''instructions''' }'''</tt>
| <tt>f '''out ('''result''') { '''expression''' } body{ '''instructions''' }'''</tt>
| 
| <tt>'''invariant() { '''expression''' }'''</tt>
| 
|-
| Eiffel
| <tt>f <br />'''require''' tag: expression <br />'''do end'''</tt>
| <tt>f <br />'''do <br /> ensure''' tag: expression <br />'''end'''</tt>
| <tt>f <br />'''do''' <br /> '''check''' tag: expression '''end <br /> end'''</tt>
| <tt>'''class''' X <br />'''invariant''' tag: expression <br />'''end'''</tt>
| <tt>'''from ''' instructions <br /> '''invariant''' <br />tag: expression <br /> '''until''' <br /> expr <br /> '''loop''' <br /> instructions <br />'''variant''' <br /> tag: expression <br />'''end'''</tt>
|-
| Python
| colspan=5 rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| PHP
|-
| Perl
|-
| Perl 6
| <tt>'''PRE {''' condition '''}'''</tt>
| <tt>'''POST {''' condition '''}'''</tt>
| 
| 
| 
|-
| Ruby
| colspan=5 rowspan=5 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Windows PowerShell
|-
| OCaml
|-
| F#
|-
| COBOL
|}

== See also ==
* [[Object-oriented programming]]

== References and notes ==
<div class="reflist columns references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;">
<references group=""></references></div>[[Category:Articles using fixed number of columns in reflist]]

[[Category:Programming language comparisons]]
[[Category:Object-oriented programming]]
