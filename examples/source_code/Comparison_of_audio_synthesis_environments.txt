Software '''audio synthesis environment'''s typically consist of an [[audio programming language]] (which may be [[Visual programming language|graphical]]) and a user environment to design/run the language in. Although many of these environments are comparable in their abilities to produce high-quality audio, their differences and specialties are what draw users to a particular platform. This article compares noteworthy audio synthesis environments, and enumerates basic issues associated with their use.

==Subjective comparisons==
Audio synthesis environments comprise a wide and varying range of software and hardware configurations. Even different versions of the same environment can differ dramatically. Because of this broad variability, certain aspects of different systems cannot be directly compared. Moreover, some levels of comparison are either very difficult to objectively quantify, or depend purely on personal preference.

Some of the commonly considered subjective attributes for comparison include:
* [[Usability]] (how difficult is it for beginners to generate some kind of meaningful output)
* [[Usability#Definition|Learnability]] (how steep the [[learning curve]] is for new, average, and advancing users)
* Sound "quality" (which environment produces the most subjectively appealing sound)
* [[Flow (psychology)|Creative flow]] (in what ways does the environment affect the creative process - e.g. guiding the user in certain directions)

These attributes can vary strongly depending on the tasks used for evaluation.

Some other common comparisons include:
* Audio performance (issues such as throughput, latency, concurrency, etc.)
* System performance (issues such as ''buggyness'' or stability)
* Support and community (who uses the system and who provides help, advice, training and tutorials)
* System capabilities (what is possible and what is not possible [regardless of effort] with the system)
* Interoperability (how well does the system integrate with other systems from different vendors)

=== Building blocks of sound and sound "quality" ===
Audio software often has a slightly different "sound" when compared against others. This is because there are different ways to implement the basic building blocks (such as [[sinewave]]s, [[pink noise]], or [[Fast Fourier transform|FFT]]) which result in slightly different aural characteristics. Although people can of course prefer one system's "sound" over another, perhaps the best output can be determined by using sophisticated audio analyzers in combination with the listener's ears. The idea of this would be to arrive at what most would agree is as "pure" a sound as possible.

=== User interface ===
The interface to an audio system often has a significant influence on the creative flow of the user, not because of what is ''possible'' (the stable/mature systems listed here are fully featured enough to be able to achieve an enormous range of sonic/compositional objectives), but because of ''what is made easy'' and ''what is made difficult''. This is again very difficult to boil down to a brief comparative statement. One issue may be which [[interface metaphor]]s are used (e.g. boxes-and-wires, documents, flow graphs, hardware mixing desks).

==General==

{| class="wikitable sortable" style="text-align: center"
! Name
! Creator
! Primary Purpose(s)
! First release date
! Most recent update
! Most recent version
! Cost
! License
! Main user interface type
! Development status
|-
| [[Audulus]]
| Taylor Holliday
| Realtime synthesis, audio processing, mobile music
| 2011/09
| 2013/01
| v1.9
| $19.99 (iPad), $29.99 (Mac)
| Proprietary
| Graphical
| Stable
|-
| [[ChucK]]
| Ge Wang and Perry Cook
| Realtime synthesis, [[live coding]], [[pedagogy]], [[acoustics|acoustic research]], [[algorithmic composition]]
| 2004
| 2012/09
| v1.3.1.2
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[GNU General Public License|GPL]]
| Document
| Immature
|-
| [[Csound]]
| [[Barry Vercoe]]
| Realtime performance, sound synthesis, [[algorithmic composition]], [[acoustics|acoustic research]]
| 1986
| 2013/07
| v6.00
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[GNU Lesser General Public License|LGPL]]
| Document, graphical for realtime
| Mature
|-
| [[Impromptu (programming environment)|Impromptu]]
| Andrew Sorensen
| [[Live coding]], [[algorithmic composition]], hardware control, realtime synthesis, 2d/3d graphics programming
| 2006
| 2010/10
| v2.5
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| Proprietary
| Document
| Stable
|-
| [[Max/MSP]]
| [[Miller Puckette]]
| Realtime audio + video synthesis, hardware control
| 1980s (mid)
| 2012/02/15
| v6.0.1
| $400.00 
| Proprietary
| Graphical
| Mature
|-
| [http://nsound.sourceforge.net/ nsound]
| Nick Hilton
| Realtime synthesis, offline audio rendering, [[algorithmic composition]], [[acoustics|acoustic research]]
| 2003
| 2011/06/26
| 0.8.2
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[GNU General Public License|GPL]]
| Document
| Mature
|-
| [[Pure Data]]
| [[Miller Puckette]]
| Realtime synthesis, hardware control, [[acoustics|acoustic research]]
| 1990s
| 2011/03/29
| v0.43
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[BSD licenses|BSD]]-like
| Graphical
| Mature
|-
| [[Reaktor]]
| [[Native Instruments]]
| Realtime synthesis, hardware control, [[GUI]] design
| 1996
| 2011/09
| 5.6.1
| $399
| Proprietary
| Graphical
| Mature
|-
| [[SuperCollider]]
| James McCartney
| Realtime synthesis, [[live coding]], [[algorithmic composition]], [[acoustics|acoustic research]], all-purpose programming language
| 1996, March
| 2013/04
| v3.6.5
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[GNU General Public License|GPL]]
| Document
| Mature
|-
| [http://www.eecs.berkeley.edu/~lazzaro/sa/ sfront]
| John Lazzaro
| [[MPEG-4 Structured Audio|MPEG-4/SA]] implementation, Realtime synthesis, [[algorithmic composition]], structured Web audio.
| 1997
| 2010/01/12
| 0.96
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[BSD licenses|BSD]]-like
| Document
| Stable
|-
| [[Usine]]
| Olivier Sens
| Audio manipulation, [[live coding]], [[algorithmic composition]]
| 2006
| 2013/07
| v1.01.007e
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free/159â‚¬
| Proprietary
| Graphical
| Mature
|-
| [http://byond.codeplex.com Byond]
| Ronald Schlenker
| Realtime synthesis and audio manipulation, algorithmic composition, general purpose programming language, interactive GUI.
| 2013
| 2013/11
| 0.1
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Free
| [[GNU General Public License|GPL]]
| Graphical
| Beta
|-
|}

==Programming language features==



{| class="wikitable sortable" style="text-align: center"
! Name
! Textual/graphical
! [[Object-oriented]]
! [[Type system]]
|-
| [[Audulus]]
| Graphical
| No
| 
|-
| [[ChucK]]
| Textual
| Yes
| Static
|-
| [[Csound]]
| Textual/Graphical (FLTK)
| No
|
|-
| [[Impromptu (programming environment)|Impromptu]]
| Mostly textual
| -
| Dynamic & static
|-
| [[Max/MSP]]
| Graphical
| No
|
|-
| [http://nsound.sourceforge.net/ nsound]
| Textual
| Yes
| Dynamic
|-
| [[Pure Data]]
| Graphical
| No
|
|-
| [[Reaktor]]
| Graphical
| No
|
|-
| [[SuperCollider]]
| Textual/Graphical (Cocoa/Swing/Qt)
| Yes
| Dynamic
|-
| [[MPEG-4 Structured Audio|MPEG-4/SA]]
| Textual
| No
| No
|-
| [[Usine]]
| Graphical
| Yes (scripts)
| Dynamic
|-
|-
| [http://byond.codeplex.com Byond]
| Textual
| Yes
| Static
|-
|}

==Data interface methods==

Interfaces between the language environment and other software or hardware (not ''user'' interfaces).

{| class="wikitable" style="text-align: center"
! rowspan="2" | Name
! colspan="2" | Shell scripting
! colspan="2" | [[MIDI]]
! colspan="2" | [[Open Sound Control|OSC]]
! rowspan="2" | [[Human interface device|HID]]
! rowspan="2" | [[Virtual Studio Technology|VST]]
! colspan="2" | [[Audio Units]]
! rowspan="2" | Other
|-
! In
! Out
! In
! Out
! In
! Out
! As host
! As unit
|-
| [[Audulus]]
|
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|
| 
| 
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|-
| [[ChucK]]
|
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|
|
|
|-
| [[Csound]]
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|  
| binding from Haskell (hCsound)
|-
| [[Impromptu (programming environment)|Impromptu]]
|
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| 
| 
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| Bidirectional Scheme to Objective-C bridge
|-
| [[Max/MSP]]
|
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|
|-
| [http://nsound.sourceforge.net/ nsound]
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| C++ API, Python API
|-
| [[Pure Data]]
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| bindings for Python, Lua, Java, GStreamer
|-
| [[Reaktor]]
|
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|  style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
|  style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|-
| [[SuperCollider]]
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| LADSPA Host, scsynth can be controlled by OSC messages (Haskell, Scala, Python, Ruby, Scheme etc.)
|-
| [http://www.eecs.berkeley.edu/~lazzaro/sa/ sfront]
| 
| 
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| style="background:#F99;vertical-align:middle;text-align:center;" class="table-no"|No
| 
| 
| 
| [[MPEG-4 Structured Audio|MPEG-4/SA]] language implementation.
|-
| [[Usine]]
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes

|
| Multi-touch
|-
| [http://byond.codeplex.com Byond]
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|
|
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
| style="background:#9F9;vertical-align:middle;text-align:center;" class="table-yes"|Yes
|

|
| 
|}

==Technical==

{| class="wikitable sortable" style="text-align: center"
! Name
! Operating system(s)
! Source code language(s)
! Programming (plugin) API language(s)
! Other technical features
|-
| [[Audulus]]
| [[iOS]], [[Mac OS X]]
| [[C++]], [[Objective-C]], [[Lua (programming language)|Lua]]
|
| 
|-
| [[ChucK]]
| [[Mac OS X]], [[Linux]], [[Microsoft Windows|Windows]]
| [[C++]]
|
| Unified timing mechanism (no separation between audio-rate and control-rate), [[command-line]] access
|-
| [[Common Music]]
| [[Mac OS X]], [[Linux]], [[Microsoft Windows|Windows]]
| [[Scheme (programming language)|Scheme]], [[C++]]
| [[Scheme (programming language)|Scheme]], [[Source Annotation Language|SAL]]
| [[command-line]] access
|-
| [[Csound]]
| [[Mac OS X]], [[Linux]], [[Microsoft Windows|Windows]]
| [[C (programming language)|C]], [[C++]]
| [[C (programming language)|C]]; also [[Python (programming language)|Python]], [[Java (programming language)|Java]], [[Lisp (programming language)|Lisp]], [[Lua (programming language)|Lua]], [[Tcl]], [[C++]]
| IDE (QuteCsound), multitrack interface (blue); several analysis/resynthesis facilities; can compute double-precision audio; [[Python (programming language)|Python]] [[algorithmic composition]] library
|-
| [[Impromptu (programming environment)|Impromptu]]
| [[Mac OS X]]
| [[Lisp (programming language)|Lisp]],  [[Objective-C]], [[Scheme (programming language)|Scheme]]
| [[C (programming language)|C]], [[C++]],  [[Objective-C]], [[Scheme (programming language)|Scheme]]
| Native access to most OS X APIs including [[Core Image]], [[Quartz]], [[QuickTime]] and [[OpenGL]].  Impromptu also includes [http://impromptu.moso.com.au/extras/ICR.html its own] statically typed (inferencing) systems language for heavy numeric processing - OpenGL, RT AudioDSP etc..
|-
| [[Max/MSP]]
| [[Mac OS X]], [[Microsoft Windows|Windows]]
| [[C (programming language)|C]], [[Objective-C]]
| [[C (programming language)|C]], [[Java (programming language)|Java]], [[JavaScript]], also [[Python (programming language)|Python]] and [[Ruby (programming language)|Ruby]] via externals
|
|-
| [http://nsound.sourceforge.net/ nsound]
| [[Mac OS X]], [[Linux]], [[Microsoft Windows|Windows]]
| [[C++]]
| [[C++]], [[Python (programming language)|Python]]
| Real-Time Dynamic [[Digital Filters]]
|-
| [[Pure Data]]
| [[Mac OS X]], [[Linux]], [[Microsoft Windows|Windows]], [[iPod]], [[Android (operating system)|Android]]
| [[C (programming language)|C]]
| [[C (programming language)|C]], [[C++]], [[FAUST (programming language)|FAUST]], [[Haskell (programming language)|Haskell]], [[Java (programming language)|Java]], [[Lua (programming language)|Lua]], [[Python (programming language)|Python]], [[Q (equational programming language)|Q]], [[Ruby (programming language)|Ruby]], [[Scheme (programming language)|Scheme]], others
|
|-
| [[Reaktor]]
| [[Mac OS X]], [[Microsoft Windows|Windows]]
|
|
|
|-
| [[SuperCollider]]
| [[Mac OS X]], [[Linux]], [[Microsoft Windows|Windows]], [[FreeBSD]]
| [[C (programming language)|C]], [[C++]], [[Objective-C]]
| [[C++]]
| [[Client-server]] architecture; client and server can be used independently, [[command-line]] access
|-
| [http://www.eecs.berkeley.edu/~lazzaro/sa/ sfront]
| [[Linux]], [[Microsoft Windows|Windows]](via cygwin)
| [[C++]]
|
| Conforming [[MPEG-4 Structured Audio|MPEG-4/SA]] implementation.
|-
| [[Usine]]
| [[Mac OS X]]/[[Microsoft Windows|Windows]]
| [[Embarcadero Delphi|Delphi]]
| [[C++]]
| 
|-
| [http://byond.codeplex.com Byond]
| [[Microsoft Windows|Windows]]
| [[C Sharp (programming language)|C#]], [[Extensible Application Markup Language|XAML]]
| [[C Sharp (programming language)|C#]], [[Extensible Application Markup Language|XAML]]
| 
|-
|}



[[Category:Audio programming languages]]
[[Category:Electronic music software]]
[[Category:Free audio software| ]]
[[Category:Software comparisons|Audio synthesis environments]]
[[Category:Software synthesizers]]
