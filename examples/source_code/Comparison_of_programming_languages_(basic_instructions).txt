<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" role="presentation"><tr><td class="mbox-image"><div style="width:52px;">[[File:Question book-new.svg|50x40px|alt=]]</div></td><td class="mbox-text"><span class="mbox-text-span">This article '''needs additional citations for [[Wikipedia:Verifiability|verification]]'''.<span class="hide-when-compact"> Please help [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit improve this article] by [[Help:Introduction to referencing/1|adding citations to reliable sources]]. Unsourced material may be challenged and removed.</span>  <small>''(February 2009)''</small><span class="hide-when-compact"></span></span></td></tr></table>
<table class="vertical-navbox nowraplinks " cellspacing="5" cellpadding="0" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;"><tr><th class="" style=";padding:0.2em 0.4em 0.2em;;font-size:145%;line-height:1.2em;">[[Comparison of programming languages|Programming language comparisons]]</th>
      </tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Comparison of programming languages|General comparison]]
* [[Comparison of programming languages (syntax)|Basic syntax]]
* [[Comparison of programming languages (basic instructions)|Basic instructions]]
* [[Comparison of programming languages (array)|Arrays]]
* [[Comparison of programming languages (mapping)|Associative arrays]]
* [[Comparison of programming languages (strings)|String operations]]
* [[Comparison of programming languages (string functions)|String functions]]
* [[Comparison of programming languages (list comprehension)|List comprehension]]
* [[Comparison of programming languages (object-oriented programming)|Object-oriented programming]]
* [[Constructor (object-oriented programming)|Object-oriented constructors]]
* [[Comparison of database access|Database access]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Evaluation strategy]]
* [[b:Computer Programming/Hello world|List of "Hello World" programs]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Comparison of web application frameworks|Web application frameworks]]
* [[Comparison of the Java and .NET platforms]]</td>
</tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* Comparison of individual programming languages
** [[ALGOL 58#ALGOL 58's influence on ALGOL 60|ALGOL 58's influence on ALGOL 60]]
** [[ALGOL 60#Comparisons with other languages|ALGOL 60: Comparisons with other languages]]
** [[Comparison of ALGOL 68 and C++]]
** [[ALGOL 68#Comparisons with other languages|ALGOL 68: Comparisons with other languages]]
** [[Compatibility of C and C++]]
** [[Comparison of Pascal and Delphi|Comparison of Pascal and Borland Delphi]]
** [[Comparison of Object Pascal and C]]
** [[Comparison of Pascal and C]]
** [[Comparison of Java and C++]]
** [[Comparison of C Sharp and Java|Comparison of C# and Java]]
** [[Comparison of C Sharp and Visual Basic .NET|Comparison of C# and Visual Basic .NET]]
** [[Comparison of Visual Basic and Visual Basic .NET]]</td>
</tr><tr><td style="text-align:right;font-size:115%;"><div class="plainlinks hlist navbar mini" style=""><ul><li class="nv-view">[[Template:Programming language comparisons|<span title="View this template" style="">v</span>]]</li><li class="nv-talk">[[Template talk:Programming language comparisons|<span title="Discuss this template" style="">t</span>]]</li><li class="nv-edit">[//en.wikipedia.org/w/index.php?title=Template:Programming_language_comparisons&action=edit <span title="Edit this template" style="">e</span>]</li></ul></div></td></tr>
</table>
'''Comparison of programming languages''' is a common topic of discussion among [[software engineer]]s. Basic instructions of several [[programming language]]s are compared here.
__TOC__

== Conventions of this article ==
The '''bold''' is the literal code. The non-bold is interpreted by the reader. Statements in [[guillemets]] (« … ») are optional. <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> indicates a necessary indent (with whitespace).
<br style="clear:both;" />

== Type identifiers ==

=== [[Integer (computer science)|Integer]]s ===
{| class="wikitable"
! rowspan=2| 
! colspan=2| 8 bit ([[byte]])
! colspan=2| 16 bit ([[short integer]])
! colspan=2| 32 bit
! colspan=2| 64 bit ([[long integer]])
! colspan=2| Word size
! rowspan=2| Arbitrarily precise ([[Arbitrary-precision arithmetic|bignum]])
|-
! Signed
! Unsigned
! Signed
! Unsigned
! Signed
! Unsigned
! Signed
! Unsigned
! Signed
! Unsigned
|-
| [[Ada (programming language)|Ada]]
| <tt>range -2**7 .. 2**7 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup>
| <tt>range 0 .. 2**8 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup> or <tt>mod 2**8</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod">[[#endnote_Ada_mod|[k]]]</sup>
| <tt>range -2**15 .. 2**15 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup>
| <tt>range 0 .. 2**16 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup> or <tt>mod 2**16</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod">[[#endnote_Ada_mod|[k]]]</sup>
| <tt>range -2**31 .. 2**31 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup>
| <tt>range 0 .. 2**32 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup> or <tt>mod 2**32</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod">[[#endnote_Ada_mod|[k]]]</sup>
| <tt>range -2**63 .. 2**63 - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup>
| <tt>mod 2**64</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod">[[#endnote_Ada_mod|[k]]]</sup>
| <tt>Integer</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup>
| <tt>range 0 .. 2**Integer'<wbr/>Size - 1</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_range">[[#endnote_Ada_range|[j]]]</sup> or <tt>mod Integer'<wbr/>Size</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ada_mod">[[#endnote_Ada_mod|[k]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| rowspan=2| [[ALGOL 68]] (variable-width)
| rowspan=2| <tt>short short int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>short int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>long int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>int</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>long long int</tt> <sup class="reference plainlinks nourlexpansion" id="ref_a68">[[#endnote_a68|[a]]]</sup><sup class="reference plainlinks nourlexpansion" id="ref_a68g">[[#endnote_a68g|[g]]]</sup>
|-
| colspan=2 align=center|<tt>bytes</tt> & <tt>bits</tt>
|-
| [[C (programming language)|C]] ([[C99]] fixed-width)
| rowspan=2| <tt>int8_t</tt>
| rowspan=2| <tt>uint8_t</tt>
| rowspan=2| <tt>int16_t</tt>
| rowspan=2| <tt>uint16_t</tt>
| rowspan=2| <tt>int32_t</tt>
| rowspan=2| <tt>uint32_t</tt>
| rowspan=2| <tt>int64_t</tt>
| rowspan=2| <tt>uint64_t</tt>
| rowspan=4| <tt>int</tt>
| rowspan=4| <tt>unsigned int</tt>
| rowspan=5 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[C++]] ([[C++11]] fixed-width)
|-
| [[C (programming language)|C]] ([[C99]] variable-width)
| rowspan=2| <tt>signed char</tt>
| rowspan=2| <tt>unsigned char</tt>
| rowspan=2| <tt>short</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2| <tt>unsigned short</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2| <tt>long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2| <tt>unsigned long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2| <tt>long long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| rowspan=2| <tt>unsigned long long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
|-
| [[C++]] ([[C++11]] variable-width)
|-
| [[Objective-C]]
| <tt>signed char</tt>
| <tt>unsigned char</tt>
| <tt>short</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| <tt>unsigned short</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| <tt>long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| <tt>unsigned long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| <tt>long long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| <tt>unsigned long long</tt><sup class="reference plainlinks nourlexpansion" id="ref_CInt">[[#endnote_CInt|[c]]]</sup>
| <tt>int''' <br>or<br> '''NSInteger</tt>
| <tt>unsigned int''' <br>or<br> '''NSUInteger</tt>
|-
| [[C Sharp (programming language)|C#]]
| <tt>sbyte</tt>
| <tt>byte</tt>
| rowspan=2| <tt>short</tt>
| <tt>ushort</tt>
| rowspan=2| <tt>int</tt>
| <tt>uint</tt>
| rowspan=2| <tt>long</tt>
| <tt>ulong</tt>
| <tt>IntPtr</tt>
| <tt>UIntPtr</tt>
| <tt>System.Numerics<wbr/>.BigInteger</tt><br/>(.NET 4.0)
|-
| [[Java (programming language)|Java]]
| <tt>byte</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>char</tt><sup class="reference plainlinks nourlexpansion" id="ref_Java char">[[#endnote_Java char|[b]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>java.math<wbr/>.BigInteger</tt>
|-
| [[Go (programming language)|Go]]
| <tt>int8</tt>
| <tt>uint8</tt> or <tt>byte</tt>
| <tt>int16</tt>
| <tt>uint16</tt>
| <tt>int32</tt>
| <tt>uint32</tt>
| <tt>int64</tt>
| <tt>uint64</tt>
| <tt>int</tt>
| <tt>uint</tt>
| <tt>big.Int</tt>
|-
| [[D (programming language)|D]]
| <tt>byte</tt>
| <tt>ubyte</tt>
| <tt>short</tt>
| <tt>ushort</tt>
| <tt>int</tt>
| <tt>uint</tt>
| <tt>long</tt>
| <tt>ulong</tt>
|style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>BigInt</tt>
|-
| [[Common Lisp]]
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
| <tt>bignum</tt>
|-
| [[Scheme (programming language)|Scheme]]
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
|-
| [[ISLISP]]
| 
| 
| 
| 
| 
| 
| 
| 
| 
| 
| <tt>bignum</tt>
|-
| [[Pascal (programming language)|Pascal]] ([[Free Pascal|FPC]])
| <tt>shortint</tt>
| <tt>byte</tt>
| <tt>smallint</tt>
| <tt>word</tt>
| <tt>longint</tt>
| <tt>longword</tt>
| <tt>int64</tt>
| <tt>qword</tt>
| <tt>integer</tt>
| <tt>cardinal</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[Visual Basic]]
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2|<tt>Byte</tt>
| <tt>Integer</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Long</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2 colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=1 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[Visual Basic .NET]]
| <tt>SByte</tt>
| <tt>Short</tt>
| <tt>UShort</tt>
| <tt>Integer</tt>
| <tt>UInteger</tt>
| <tt>Long</tt>
| <tt>ULong</tt>
| <tt>System.Numerics<wbr/>.BigInteger</tt><br/>(.NET 4.0)
|-
| [[Python (programming language)|Python]] 2.x
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>int</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>long</tt>
|-
| Python 3.x
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>int</tt>
|-
| [[S-Lang (programming language)|S-Lang]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[Fortran]]
| <tt>INTEGER<wbr/>(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds">[[#endnote_Kinds|[f]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>INTEGER<wbr/>(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds">[[#endnote_Kinds|[f]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>INTEGER<wbr/>(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds">[[#endnote_Kinds|[f]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>INTEGER<wbr/>(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_Kinds">[[#endnote_Kinds|[f]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|
|
|-
| [[PHP]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>int</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <sup class="reference plainlinks nourlexpansion" id="ref_PHP bignum">[[#endnote_PHP bignum|[e]]]</sup>
|-
| [[Perl]] 5
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_scalars">[[#endnote_scalars|[d]]]</sup>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_scalars">[[#endnote_scalars|[d]]]</sup>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_scalars">[[#endnote_scalars|[d]]]</sup>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_scalars">[[#endnote_scalars|[d]]]</sup>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_scalars">[[#endnote_scalars|[d]]]</sup>
| <tt>Math::BigInt</tt>
|-
| [[Perl 6]]
| <tt>int8</tt>
| <tt>uint8</tt>
| <tt>int16</tt>
| <tt>uint16</tt>
| <tt>int32</tt>
| <tt>uint32</tt>
| <tt>int64</tt>
| <tt>uint64</tt>
| <tt>Int</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[Ruby (programming language)|Ruby]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Fixnum</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Bignum</tt>
|-
| [[Scala (programming language)|Scala]]
| <tt>Byte</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Short</tt>
| <tt>Char</tt><sup class="reference plainlinks nourlexpansion" id="ref_Scala Char">[[#endnote_Scala Char|[l]]]</sup>
| <tt>Int</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Long</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>scala.math.BigInt</tt>
|-
| [[Seed7]]
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>integer</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>bigInteger</tt>
|-
| [[Smalltalk]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>SmallInteger</tt><sup class="reference plainlinks nourlexpansion" id="ref_Smalltalk">[[#endnote_Smalltalk|[i]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>LargeInteger</tt><sup class="reference plainlinks nourlexpansion" id="ref_Smalltalk">[[#endnote_Smalltalk|[i]]]</sup>
|-
| [[Windows PowerShell]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[OCaml]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>int32</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>int64</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>int''' <br/> or <br/> '''nativeint</tt>
|
| <tt>open Big_int;; <br/> big_int</tt>
|-
| [[F Sharp (programming language)|F#]]
| <tt>sbyte</tt>
| <tt>byte</tt>
| <tt>int16</tt>
| <tt>uint16</tt>
| <tt>int32</tt> or <tt>int</tt>
| <tt>uint32</tt>
| <tt>uint64</tt>
| <tt>nativeint</tt>
| <tt>unativeint</tt>
| <tt>bigint</tt>
|-
| [[Standard ML]]
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Word8.word</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Int32.int</tt>
| <tt>Word32.word</tt>
| <tt>Int64.int</tt>
| <tt>Word64.word</tt>
| <tt>int</tt>
| <tt>word</tt>
| <tt>LargeInt.int</tt> or <br/> <tt>IntInf.int</tt>
|-
| [[Haskell (programming language)|Haskell]] ([[Glasgow Haskell Compiler|GHC]])
| «<tt>import Int</tt>» <br/> <tt>Int8</tt>
| «<tt>import Word</tt>» <br/> <tt>Word8</tt>
| «<tt>import Int</tt>» <br/> <tt>Int16</tt>
| «<tt>import Word</tt>» <br/> <tt>Word16</tt>
| «<tt>import Int</tt>» <br/> <tt>Int32</tt>
| «<tt>import Word</tt>» <br/> <tt>Word32</tt>
| «<tt>import Int</tt>» <br/> <tt>Int64</tt>
| «<tt>import Word</tt>» <br/> <tt>Word64</tt>
| <tt>Int</tt>
| «<tt>import Word</tt>» <br/> <tt>Word</tt>
| <tt>Integer</tt>
|-
| [[Eiffel (programming language)|Eiffel]]
| <tt>INTEGER_8</tt>
| <tt>NATURAL_8</tt>
| <tt>INTEGER_16</tt>
| <tt>NATURAL_16</tt>
| <tt>INTEGER_32</tt>
| <tt>NATURAL_32</tt>
| <tt>INTEGER_64</tt>
| <tt>NATURAL_64</tt>
| <tt>INTEGER</tt>
| <tt>NATURAL</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[COBOL]]<sup class="reference plainlinks nourlexpansion" id="ref_Cobol">[[#endnote_Cobol|[h]]]</sup>
| <tt>BINARY-CHAR «SIGNED»</tt>
| <tt>BINARY-CHAR UNSIGNED</tt>
| <tt>BINARY-SHORT «SIGNED»</tt>
| <tt>BINARY-SHORT UNSIGNED</tt>
| <tt>BINARY-LONG «SIGNED»</tt>
| <tt>BINARY-LONG UNSIGNED</tt>
| <tt>BINARY-DOUBLE «SIGNED»</tt>
| <tt>BINARY-DOUBLE UNSIGNED</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| [[Mathematica]]
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Integer</tt>
|}
<span class="citation wikicite" id="endnote_a68"><b>[[#ref_a68|^a]]</b></span> The <u>standard</u> constants <tt>int shorts</tt> and <tt>int lengths</tt> can be used to determine how many '<tt>short</tt>'s and '<tt>long</tt>'s can be usefully prefixed to '<tt>short int</tt>' and '<tt>long int</tt>'.  The actually size of the '<tt>short int</tt>', '<tt>int</tt>' and '<tt>long int</tt>' is available as constants <tt>short max int</tt>, <tt>max int</tt> and <tt>long max int</tt> etc.
<br/><span class="citation wikicite" id="endnote_Java char"><b>[[#ref_Java char|^b]]</b></span> Commonly used for characters.
<br/><span class="citation wikicite" id="endnote_CInt"><b>[[#ref_CInt|^c]]</b></span> The ALGOL 68, C and C++ languages do not specify the exact width of the integer types <tt>short</tt>, <tt>int</tt>, <tt>long</tt>, and (C99, C++11) <tt>long long</tt>, so they are implementation-dependent. In C and C++ <tt>short</tt>, <tt>long</tt>, and <tt>long long</tt> types are required to be at least 16, 32, and 64 bits wide, respectively, but can be more. The <tt>int</tt> type is required to be at least as wide as <tt>short</tt> and at most as wide as <tt>long</tt>, and is typically the width of the word size on the processor of the machine (i.e. on a 32-bit machine it is often 32 bits wide; on 64-bit machines it is often 64 bits wide). C99 and C++11<sup class="Template-Fact" style="white-space:nowrap;">&#91;<i>[[Wikipedia:Citation needed|<span title="This claim needs references to reliable sources. (December 2011)">citation needed</span>]]</i>&#93;</sup> also define the <tt>[u]intN_t</tt> exact-width types in the [[stdint.h]] header. See[[C syntax#Integral types]] for more information.
<br/><span class="citation wikicite" id="endnote_scalars"><b>[[#ref_scalars|^d]]</b></span> Perl 5 does not have distinct types. Integers, floating point numbers, strings, etc. are all considered "scalars".
<br/><span class="citation wikicite" id="endnote_PHP bignum"><b>[[#ref_PHP bignum|^e]]</b></span> PHP has two arbitrary-precision libraries. The BCMath library just uses strings as datatype. The GMP library uses an internal "resource" type.
<br/><span class="citation wikicite" id="endnote_Kinds"><b>[[#ref_Kinds|^f]]</b></span> The value of "n" is provided by the <tt>SELECTED_INT_KIND</tt> intrinsic function.
<br/><span class="citation wikicite" id="endnote_a68g"><b>[[#ref_a68g|^g]]</b></span> [[ALGOL 68G]]'s run time option ''<tt>--precision "number"</tt>'' can set precision for <tt>long long int</tt>s to the required "number" significant digits.  The <u>standard</u> constants ''<tt>long long int width</tt>'' and ''<tt>long long max int</tt>'' can be used to determine actual precision.
<br/><span class="citation wikicite" id="endnote_Cobol"><b>[[#ref_Cobol|^h]]</b></span> [[COBOL]] allows the specification of a required precision and will automatically select an available type capable of representing the specified precision. "<tt>PIC S9999</tt>", for example, would required a signed variable of four decimal digits precision.  If specified as a binary field, this would select a 16 bit signed type on most platforms.
<br/><span class="citation wikicite" id="endnote_Smalltalk"><b>[[#ref_Smalltalk|^i]]</b></span> [[Smalltalk]] automatically chooses an appropriate representation for integral numbers. Typically, two representations are present, one for integers fitting the native word size minus any tag bit (SmallInteger) and one supporting arbitrary sized integers (LargeInteger). Arithmetic operations support polymorphic arguments and return the result in the most appropriate compact representation.
<br/><span class="citation wikicite" id="endnote_Ada_range"><b>[[#ref_Ada_range|^j]]</b></span> [[Ada (programming language)|Ada]] range types are checked for boundary violations at run-time (as well as at compile-time for static expressions). Run time boundary violations raise a "constraint error" exception. Ranges are not restricted to powers of two. Commonly predefined Integer subtypes are: Positive (<tt>range 1 .. Integer'Last</tt>) and Natural (<tt>range 0 .. Integer'Last</tt>). <tt>Short_Short_Integer</tt> (8 bit), <tt>Short_Integer</tt> (16 bit) and <tt>Long_Integer</tt> (64 bit) are also commonly predefined, but not required by the Ada standard. Run time checks can be disabled if performance is more important than integrity checks.
<br/><span class="citation wikicite" id="endnote_Ada_mod"><b>[[#ref_Ada_mod|^k]]</b></span> [[Ada (programming language)|Ada]] modulo types implement modulo arithmetic in all operations, i.e. no range violations are possible. Modulos are not restricted to powers of two.
<br/><span class="citation wikicite" id="endnote_Scala char"><b>[[#ref_Scala char|^l]]</b></span> Commonly used for characters like Java's char.

=== [[Floating point]] ===
{| class="wikitable"
!
! [[Single precision]]
! [[Double precision]]
! Processor dependent
|-
| [[Ada (programming language)|Ada]]
| <tt>Float</tt>
| <tt>Long_Float</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| ALGOL 68
| <tt>real</tt><sup class="reference plainlinks nourlexpansion" id="ref_a68">[[#endnote_a68|[a]]]</sup>
| <tt>long real</tt><sup class="reference plainlinks nourlexpansion" id="ref_a68">[[#endnote_a68|[a]]]</sup>
| <tt>short real</tt>, <tt>long long real</tt>, etc.<sup class="reference plainlinks nourlexpansion" id="ref_a68g">[[#endnote_a68g|[d]]]</sup>
|-
| C
| rowspan=3| <tt>float</tt><sup class="reference plainlinks nourlexpansion" id="ref_lax floats">[[#endnote_lax floats|[b]]]</sup>
| rowspan=5| <tt>double</tt>
| rowspan=3| <tt>long double</tt><sup class="reference plainlinks nourlexpansion" id="ref_C-long-double">[[#endnote_C-long-double|[f]]]</sup>
|-
| Objective-C
|-
| C++ (STL)
|-
| C#
| rowspan=2| <tt>float</tt>
| rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Java
|-
| Go
| <tt>float32</tt>
| <tt>float64</tt>
|-
| D
| <tt>float</tt>
| <tt>double</tt>
| <tt>real</tt>
|-
| Common Lisp
|
|
| 
|-
| Scheme
|
|
|
|-
| ISLISP
|
|
| 
|-
| Pascal (Free Pascal)
| <tt>single</tt>
| <tt>double</tt>
| <tt>real</tt>
|-
| Visual Basic
| rowspan=2| <tt>Single</tt>
| rowspan=2| <tt>Double</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Visual Basic .NET
|-
| Python
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>float</tt>
| 
|-
| JavaScript
| <tt>Number</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| S-Lang
| 
| 
| 
|-
| Fortran
| colspan=2|<tt>REAL(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_real inds">[[#endnote_real inds|[c]]]</sup>
| 
|-
| PHP
| 
| <tt>float</tt>
| 
|-
| Perl
| 
| 
| 
|-
| Perl 6
| <tt>num32</tt>
| <tt>num64</tt>
| <tt>Num</tt>
|-
| Ruby
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Float</tt>
| rowspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Scala
| <tt>Float</tt>
| <tt>Double</tt>
|-
| Seed7
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>float</tt>
|-
| Smalltalk
| <tt>Float</tt>
| <tt>Double</tt>
|-
| Windows PowerShell
| 
| 
|-
| OCaml
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>float</tt>
| rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| F#
| <tt>float32</tt>
|-
| Standard ML
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>real</tt>
|-
| Haskell (GHC)
| <tt>Float</tt>
| <tt>Double</tt>
| 
|-
| Eiffel
| <tt>REAL_32</tt>
| <tt>REAL_64</tt>
| 
|-
| COBOL
| <tt>FLOAT-BINARY-7</tt><sup class="reference plainlinks nourlexpansion" id="ref_Cobol_ieee">[[#endnote_Cobol_ieee|[e]]]</sup>
| <tt>FLOAT-BINARY-34</tt><sup class="reference plainlinks nourlexpansion" id="ref_Cobol_ieee">[[#endnote_Cobol_ieee|[e]]]</sup>
| <tt>FLOAT-SHORT<tt>, <tt>FLOAT-LONG</tt>, <tt>FLOAT-EXTENDED</tt>
|-
| Mathematica
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Real</tt>
|}
<span class="citation wikicite" id="endnote_a68_real"><b>[[#ref_a68_real|^a]]</b></span> The <u>standard</u> constants <tt>real shorts</tt> and <tt>real lengths</tt> can be used to determine how many '<tt>short</tt>'s and '<tt>long</tt>'s can be usefully prefixed to '<tt>short real</tt>' and '<tt>long real</tt>'.  The actually size of the '<tt>short real</tt>', '<tt>real</tt>' and '<tt>long real</tt>' is available as constants <tt>short max real</tt>, <tt>max real</tt> and <tt>long max real</tt> etc.  With the constants <tt>short small real</tt>, <tt>small real</tt> and <tt>long small real</tt> available for each type's [[machine epsilon]].
<br/><span class="citation wikicite" id="endnote_lax floats"><b>[[#ref_lax floats|^b]]</b></span> declarations of single precision often are not honored
<br/><span class="citation wikicite" id="endnote_real kinds"><b>[[#ref_real kinds|^c]]</b></span> The value of "n" is provided by the <tt>SELECTED_REAL_KIND</tt> intrinsic function.
<br/><span class="citation wikicite" id="endnote_a68g-real"><b>[[#ref_a68g-real|^d]]</b></span> [[ALGOL 68G]]'s run time option ''<tt>--precision "number"</tt>'' can set precision for <tt>long long real</tt>s to the required "number" significant digits.  The <u>standard</u> constants <tt>long long real width</tt> and '<tt>long long max real</tt> can be used to determine actual precision.
<br/><span class="citation wikicite" id="endnote_Cobol-ieee"><b>[[#ref_Cobol-ieee|^e]]</b></span> These IEEE floating-point types will be introduced in the next COBOL standard.
<br/><span class="citation wikicite" id="endnote_C-long-double"><b>[[#ref_C-long-double|^f]]</b></span> Same size as '<tt>double</tt>' on many implementations.

=== [[Complex number]]s ===

{|class="wikitable"
! 
! Integer
! Single precision
! Double precision
! Half and Quadruple precision etc.
|-
| [[Ada (programming language)|Ada]]
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Complex</tt><sup class="reference plainlinks nourlexpansion" id="ref_generic type">[[#endnote_generic type|[b]]]</sup>
| <tt>Complex</tt><sup class="reference plainlinks nourlexpansion" id="ref_generic type">[[#endnote_generic type|[b]]]</sup>
| <tt>Complex</tt><sup class="reference plainlinks nourlexpansion" id="ref_generic type">[[#endnote_generic type|[b]]]</sup>
|-
| ALGOL 68
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>compl</tt>
| <tt>long compl</tt> etc.
| <tt>short compl</tt> etc. & <tt>long long compl</tt> etc.
|-
| C (C99) 
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>float complex</tt>
| <tt>double complex</tt>
| rowspan=12 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C++ (STL)
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>std::complex<float></tt>
| <tt>std::complex<double></tt>
|-
| C#
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>System.Numerics.Complex</tt> <br />(.Net 4.0)
|-
| Java
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Go
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>complex64</tt>
| <tt>complex128</tt>
|-
| D
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>cfloat</tt>
| <tt>cdouble</tt>
|-
| Objective-C
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Common Lisp
|
|
|
|-
| Scheme
|
|
|
|-
| Pascal
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| Visual Basic
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| Visual Basic .NET
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>System.Numerics.Complex</tt> <br />(.Net 4.0)
|-
| Perl
| 
| 
| <tt>Math::Complex</tt>
| 
|-
| Perl 6
| 
| <tt>complex64</tt>
| <tt>complex128</tt>
| <tt>Complex</tt>
|-
| Python
| 
|
| <tt>complex</tt>
| rowspan=15 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| JavaScript
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| S-Lang
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| Fortran
| 
| colspan=2|<tt>COMPLEX(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_complex kinds">[[#endnote_complex kinds|[a]]]</sup>
|-
| Ruby
| <tt>Complex</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Complex</tt>
|-
| Scala
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Seed7
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>complex</tt>
|-
| Smalltalk
| <tt>Complex</tt>
| <tt>Complex</tt>
| <tt>Complex</tt>
|-
| Windows PowerShell
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| OCaml
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Complex.t</tt>
|-
| F#
| 
| 
| <tt>System.Numerics.Complex</tt> <br />(.Net 4.0)
|-
| Standard ML
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Haskell (GHC)
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Complex.Complex Float</tt>
| <tt>Complex.Complex Double</tt>
|-
| Eiffel
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| COBOL
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Mathematica
| <tt>Complex</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>Complex</tt>
|}

<span class="citation wikicite" id="endnote_complex kinds"><b>[[#ref_complex kinds|^a]]</b></span> The value of "n" is provided by the <tt>SELECTED_REAL_KIND</tt> intrinsic function.

<span class="citation wikicite" id="endnote_generic type"><b>[[#ref_generic type|^b]]</b></span> Generic type which can be instantiated with any base floating point type.

=== Other variable types ===

{|class="wikitable"
! rowspan=2|
! colspan=2| Text
! rowspan=2| [[Boolean datatype|Boolean]]
! rowspan=2| [[Enumerated type|Enumeration]]
! rowspan=2| [[Object (computer science)|Object]]/[[Top type|Universal]]
|-
! [[Character (computing)|Character]]
! [[String (computer science)|String]]<sup class="reference plainlinks nourlexpansion" id="ref_string">[[#endnote_string|[a]]]</sup>
|-
| [[Ada (programming language)|Ada]]
| <tt>Character</tt>
| <tt>String''' & '''Bounded_String''' & '''Unbounded_String</tt>
| <tt>Boolean</tt>
| <tt>('''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ...''')</tt>
| <tt>tagged null record</tt>
|-
| ALGOL 68
| <tt>char</tt>
| <tt>string''' & '''bytes</tt>
| <tt>bool''' & '''bits</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small> - [http://rosettacode.org/wiki/Enumerations#ALGOL_68 User defined]
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| C (C99)
| rowspan=2| <tt>char'''<br/>'''wchar_t</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>bool</tt><sup class="reference plainlinks nourlexpansion" id="ref_int bool">[[#endnote_int bool|[b]]]</sup>
| rowspan=3|<tt>'''enum''' «name» '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''};</tt>
| rowspan=2| <tt>[[void type|void]] [[pointer (computer programming)|*]]</tt>
|-
| C++ (STL)
| <code>[[std::string|</code>«<tt>std::'''»'''<code>string]]</code></tt>
|-
| Objective-C
| <tt>unichar</tt>
| <tt>NSString *</tt>
| <tt>BOOL</tt>
| <tt>id</tt>
|-
| C#
| rowspan=2| <tt>char</tt>
| <tt>string</tt>
| <tt>bool</tt>
| rowspan=2| <tt>'''enum''' name '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}</tt>
| <tt>object</tt>
|-
| Java
| <tt>String</tt>
| <tt>boolean</tt>
| <tt>Object</tt>
|-
| Go
| <tt>rune</tt>
| <tt>string</tt>
| <tt>bool</tt>
| <tt>const (<ul>'''item<sub>1</sub>''' = iota'''<br/>item<sub>2</sub><br/> ... '''</ul>)</tt>
| <tt>interface{}</tt>
|-
| D
| <tt>char</tt>
| <tt>string</tt>
| <tt>bool</tt>
| <tt>enum''' name '''{'''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''}</tt>
| <tt>std.variant.Variant</tt>
|-
| Common Lisp
|
|
|
|
|
|-
| Scheme
| 
|
| 
|
|
|-
| ISLISP
| 
|
| 
|
|
|-
| Pascal (ISO)
| rowspan=2| <tt>char</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>boolean</tt>
| rowspan=2| <tt>('''item<sub>1</sub>''',''' item<sub>2</sub>''',''' ...''')</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Object Pascal (Delphi)
| <tt>string</tt>
| <tt>variant</tt>
|-
| Visual Basic
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>String</tt>
| rowspan=2| <tt>Boolean</tt>
| rowspan=2| <tt>Enum''' name <ul> item<sub>1</sub> <br /> item<sub>2</sub> <br /> ... </ul> '''End Enum</tt>
| <tt>[[Variant type|Variant]]</tt>
|-
| Visual Basic .NET
| <tt>Char</tt>
| <tt>Object</tt>
|-
| Python
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_string as char">[[#endnote_string as char|[d]]]</sup>
| <tt>str</tt>
| <tt>bool</tt>
|
| <tt>object</tt>
|-
| JavaScript
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_string as char">[[#endnote_string as char|[d]]]</sup>
| <tt>String</tt>
| <tt>Boolean</tt>
|
| <tt>Object</tt>
|-
| S-Lang
| 
|
| 
|
| 
|-
| Fortran
| <tt>CHARACTER(LEN = *)</tt>
| <tt>CHARACTER(LEN = :), allocatable </tt>
| <tt>LOGICAL(KIND = n)</tt><sup class="reference plainlinks nourlexpansion" id="ref_logical kinds">[[#endnote_logical kinds|[f]]]</sup>
|
| <tt>CLASS(*)</tt>
|-
| PHP
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_string as char">[[#endnote_string as char|[d]]]</sup>
| <tt>string</tt>
| <tt>bool</tt>
|
| <tt>object</tt>
|-
| Perl
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_string as char">[[#endnote_string as char|[d]]]</sup>
| 
|
|
|  
|-
| Perl 6
| <tt>Char</tt>
| <tt>Str</tt>
| <tt>Bool</tt>
| <tt>enum''' name '''<'''item<sub>1</sub> item<sub>2</sub> ...'''>''' or<br /> '''enum''' name '''<<:'''item<sub>1</sub>'''('''value''')''' ''':'''item<sub>2</sub>'''('''value''')''' ...'''>></tt>
| <tt>Mu</tt>
|-
| Ruby
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_string as char">[[#endnote_string as char|[d]]]</sup>
| <tt>String</tt>
| <tt>Object</tt><sup class="reference plainlinks nourlexpansion" id="ref_Ruby's bool">[[#endnote_Ruby's bool|[c]]]</sup>
|
| <tt>Object</tt>
|-
| Scala
| <tt>Char</tt>
| <tt>String</tt>
| <tt>Boolean</tt>
| <tt>object''' name '''extends Enumeration {'''<ul>'''val''' item<sub>1</sub>''',''' item<sub>2</sub>''',''' ... '''= Value'''</ul>'''}</tt>
| <tt>Any</tt>
|-
| Seed7
| <tt>char</tt>
| <tt>string</tt>
| <tt>boolean</tt>
| <tt>'''const type''': name '''is new enum'''<ul> item<sub>1</sub>''','''<br />  item<sub>2</sub>''','''<br />  ... </ul>'''end enum;'''</tt>
|
|-
| Windows PowerShell
| 
| 
|
|
|
|-
| OCaml
| rowspan=3| <tt>char</tt>
| rowspan=3| <tt>string</tt>
| rowspan=3| <tt>bool</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_enum">[[#endnote_enum|[e]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| F#
| <tt>type''' name '''=''' item<sub>1</sub> '''=''' value '''''' item<sub>2</sub> = value '''</tt> ...
| <tt>obj</tt>
|-
| Standard ML
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_enum">[[#endnote_enum|[e]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Haskell (GHC)
| <tt>Char</tt>
| <tt>String</tt>
| <tt>Bool</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_enum">[[#endnote_enum|[e]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Eiffel
| <tt>CHARACTER</tt>
| <tt>STRING</tt>
| <tt>BOOLEAN</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>ANY</tt>
|-
| COBOL
| <tt>PIC X</tt>
| <tt>PIC X('''string length''') '''or''' PIC&nbsp;X«X...»</tt>
| <tt>PIC 1«('''number of digits''')» '''or''' PIC&nbsp;1«1...»</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>OBJECT REFERENCE</tt>
|-
| Mathematica
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_string as char">[[#endnote_string as char|[d]]]</sup>
| <tt>String</tt>
| 
| 
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}
<span class="citation wikicite" id="endnote_string"><b>[[#ref_string|^a]]</b></span> specifically, strings of arbitrary length and automatically managed.
<br/><span class="citation wikicite" id="endnote_int bool"><b>[[#ref_int bool|^b]]</b></span> This language represents a boolean as an integer where false is represented as a value of zero and true by a non-zero value.
<br/><span class="citation wikicite" id="endnote_Ruby's bool"><b>[[#ref_Ruby's bool|^c]]</b></span> All values evaluate to either true or false. Everything in '''<tt>TrueClass</tt>''' evaluates to true and everything in '''<tt>FalseClass</tt>''' evaluates to false.
<br/><span class="citation wikicite" id="endnote_string as char"><b>[[#ref_string as char|^d]]</b></span>This language does not have a separate character type. Characters are represented as strings of length 1.
<br/><span class="citation wikicite" id="endnote_enum"><b>[[#ref_enum|^e]]</b></span> Enumerations in this language are algebraic types with only nullary constructors
<br/><span class="citation wikicite" id="endnote_logical kinds"><b>[[#ref_logical kinds|^f]]</b></span> The value of "n" is provided by the <tt>SELECTED_INT_KIND</tt> intrinsic function.

== Derived types ==

=== [[Array data type|Array]] ===

<div class="rellink">Further information: [[Comparison of programming languages (array)]]</div>
{| class="wikitable"
|- valign="top"
! rowspan=2|
! colspan=2| fixed size array
! colspan=2| dynamic size array
|- valign="top"
! one-dimensional array
! [[Array data structure|multi-dimensional array]]
! one-dimensional array
! [[Array data structure|multi-dimensional array]]
|- valign="top"
| [[Ada (programming language)|Ada]]
| <tt>'''array ('''<first>''' .. '''<last>''') of '''<type></tt><br>or<br>'''array ('''<discrete_type>''') of '''<type></tt>
| <tt>'''array ('''<first<sub>1</sub>>''' .. '''<last<sub>1</sub>>''', '''<first<sub>2</sub>>''' .. '''<last<sub>2</sub>>''',''' ...''') of '''<type><br>or<br>'''array ('''<discrete_type<sub>1</sub>>''', '''<discrete_type<sub>2</sub>>''', '''...''') of '''<type></tt>
| <tt>'''array ('''<discrete_type>''' range <>) of '''<type></tt>
| <tt>'''array ('''<discrete_type<sub>1</sub>>''' range <>, '''<discrete_type<sub>2</sub>>''' range <>,''' ...''') of '''<type></tt>
|- valign="top"
| ALGOL 68
| <tt>[''first'':''last'']'''<wbr/>«modename»'''</tt><br/>or simply:<br/><tt>[''size'']'''<wbr/>«modename»'''</tt>
| <tt>[''first<sub>1</sub>'':''last<sub>1</sub>'', ''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»'''</tt><br/>or<br><tt>[''first<sub>1</sub>'':''last<sub>1</sub>''][''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»'''</tt><br/>etc.
| <tt>'''flex'''[''first'':''last'']'''<wbr/>«modename»'''</tt><br/>or simply:<br/><tt>'''flex'''[''size'']'''<wbr/>«modename»'''</tt>
| <tt>'''flex'''[''first<sub>1</sub>'':''last<sub>1</sub>'', ''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»'''</tt><br/>or<br/><tt>'''flex'''[''first<sub>1</sub>'':''last<sub>1</sub>'']<wbr/>'''flex'''[''first<sub>2</sub>'':''last<sub>2</sub>'']'''<wbr/>«modename»''' etc.</tt>
|- valign="top"
| C (C99)
| <tt>type name'''['''size''']'''<sup class="reference plainlinks nourlexpansion" id="ref_C's array">[[#endnote_C's array|[a]]]</sup></tt>
| <tt>type name'''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''<sup class="reference plainlinks nourlexpansion" id="ref_C's array">[[#endnote_C's array|[a]]]</sup></tt>
| <tt>type '''*'''name</tt><br/>or within a block:<br/><tt>int n = ...; type name'''['''n''']'''</tt>
|
|- valign="top"
| C++ (STL)
| colspan=1| <tt>'''[[std::array|«std::»array]]<'''type, size'''>'''</tt>(C++11)
|
| colspan=2| <tt>'''[[std::vector|«std::»vector]]<'''type'''>'''</tt>
|- valign="top"
| C#
| <tt>type'''[]'''</tt>
| <tt>type'''[,,'''...''']'''</tt>
| <tt>'''System<wbr/>.Collections<wbr/>.ArrayList'''<br/>or<br/>'''System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/><'''type'''>'''</tt>
|
|- valign="top"
| Java
| <tt>type'''[]'''<sup class="reference plainlinks nourlexpansion" id="ref_Java's array">[[#endnote_Java's array|[b]]]</sup></tt>
| <tt>type'''[][]'''...<sup class="reference plainlinks nourlexpansion" id="ref_Java's array">[[#endnote_Java's array|[b]]]</sup></tt>
| <tt>'''ArrayList''' or '''ArrayList<'''type'''>'''</tt>
|
|- valign="top"
| D
| <tt>type'''['''size''']'''</tt>
| <tt>type'''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''</tt>
| <tt>type'''[]'''</tt>
|
|- valign="top"
| Go
| <tt>'''['''size''']'''type</tt>
| <tt>'''['''size<sub>1</sub>''']['''size<sub>2</sub>''']'''...type</tt>
| <tt>'''[]type'''</tt>
| <tt>'''[][]type'''</tt>
|
|- valign="top"
| Objective-C
| <tt>'''NSArray'''</tt>
|
| <tt>'''NSMutableArray'''</tt>
|
|- valign="top"
| JavaScript
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| colspan=2|<tt>'''Array'''</tt><sup class="reference plainlinks nourlexpansion" id="ref_JavaScript's array">[[#endnote_JavaScript's array|[d]]]</sup>
|- valign="top"
| Common Lisp
| 
| 
|
|
|- valign="top"
| Scheme
| 
| 
| 
| 
|- valign="top"
| ISLISP
| 
| 
| 
| 
|- valign="top"
| Pascal
| rowspan=2|<tt>'''array['''first'''..'''last'''] of''' type<sup class="reference plainlinks nourlexpansion" id="ref_subrange">[[#endnote_subrange|[c]]]</sup></tt>
| rowspan=2|<tt>'''array['''first<sub>1</sub>'''..'''last<sub>1</sub>'''] of array['''first<sub>2</sub>'''..'''last<sub>2</sub>'''] ''' ... '''of''' type <sup class="reference plainlinks nourlexpansion" id="ref_subrange">[[#endnote_subrange|[c]]]</sup><br/></tt>
or<br/>
<tt>''' array['''first<sub>1</sub>'''..'''last<sub>1</sub>''', '''first<sub>2</sub>'''..'''last<sub>2</sub>''', '''...'''] of''' type </tt><sup class="reference plainlinks nourlexpansion" id="ref_subrange">[[#endnote_subrange|[c]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Object Pascal (Delphi)
|<tt>'''array of''' type</tt>
|<tt>'''array of array''' ... '''of''' type</tt>
|- valign="top"
| Visual Basic
| <tt></tt>
| <tt></tt>
|
|
|- valign="top"
| Visual Basic .NET
|
|
| <tt>'''System<wbr/>.Collections<wbr/>.ArrayList'''<br/>or<br/>'''System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/>(Of''' type''')'''</tt>
|
|- valign="top"
| Python
| 
| 
| <tt>'''list'''</tt>
| 
|- valign="top"
| S-Lang
| <tt></tt>
| <tt></tt>
|
|
|- valign="top"
| Fortran
| <tt>''' '''type''' :: '''name'''('''size''')'''</tt>
| <tt>''' '''type''' :: '''name'''('''size'''<sub>1</sub>, '''size'''<sub>2</sub>,...)'''</tt>
| <tt>''' '''type''', ALLOCATABLE :: '''name'''(:)'''</tt>
| <tt>''' '''type''', ALLOCATABLE :: '''name'''(:,:,...)'''</tt>
|- valign="top"
| PHP
| 
|
| <tt>'''array'''</tt>
|
|- valign="top"
| Perl
| 
| 
|
|
|- valign="top"
| Perl 6
| 
| 
| <tt>'''Array['''type''']''' or '''Array of''' type</tt>
|
|- valign="top"
| Ruby
| 
| <tt></tt>
| <tt>'''Array'''</tt>
|
|- valign="top"
| Scala
| <tt>'''Array['''type''']'''</tt>
| <tt>'''Array['''...'''[Array['''type''']]'''...''']'''</tt>
| <tt>'''ArrayBuffer['''type''']'''</tt>
|
|- valign="top"
| Seed7
| <tt>'''array''' type<br />or<br />'''array ['''idxType''']''' type</tt>
| <tt>'''array array''' type<br />or<br />'''array ['''idxType'''] array ['''idxType''']''' type</tt>
| <tt>'''array''' type<br />or<br />'''array ['''idxType''']''' type</tt>
| <tt>'''array array''' type<br />or<br />'''array ['''idxType'''] array ['''idxType''']''' type</tt>
|- valign="top"
| Smalltalk
| <tt>'''Array'''</tt>
| 
| <tt>'''OrderedCollection'''</tt>
|
|- valign="top"
| Windows PowerShell
| <tt>type'''[]'''</tt>
|<tt>type'''[,,'''...''']'''</tt>
|
|
|- valign="top"
| OCaml
| <tt>type '''array'''</tt>
| <tt>type '''array''' ... '''array'''</tt>
| 
|
|- valign="top"
| F#
| <tt>type '''[]''' or type '''array'''</tt>
| <tt>type '''[,,'''...''']'''</tt>
| <tt>'''System<wbr/>.Collections<wbr/>.ArrayList'''<br/>or<br/>'''System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/><'''type'''>'''</tt>
|
|- valign="top"
| Standard ML
| <tt>type '''vector''' or type '''array'''</tt>
| 
|
|
|- valign="top"
| Haskell (GHC)
| <tt></tt>
| <tt></tt>
|
|
|- valign="top"
| COBOL
| <tt>level-number type '''OCCURS''' size «'''TIMES'''»'''.'''
| <tt>one-dimensional array definition...</tt>
| <tt>level-number type '''OCCURS''' min-size '''TO''' max-size «'''TIMES'''» '''DEPENDING''' «'''ON'''» size'''.'''</tt><sup class="reference plainlinks nourlexpansion" id="ref_COBOL DEPENDING ON clause">[[#endnote_COBOL DEPENDING ON clause|[e]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}
<span class="citation wikicite" id="endnote_C's array"><b>[[#ref_C's array|^a]]</b></span>In most expressions (except the <tt>sizeof</tt> and <tt>&</tt> operators), values of array types in C are automatically converted to a pointer of its first argument. See [[C syntax#Arrays]] for further details of syntax and pointer operations.
<br/><span class="citation wikicite" id="endnote_Java's array"><b>[[#ref_Java's array|^b]]</b></span> The C-like "type '''<tt>x[]</tt>'''" works in Java, however "type'''<tt>[] x</tt>'''" is the preferred form of array declaration.
<br/><span class="citation wikicite" id="endnote_subrange"><b>[[#ref_subrange|^c]]</b></span> Subranges are used to define the bounds of the array.
<br/><span class="citation wikicite" id="endnote_JavaScript's array"><b>[[#ref_JavaScript's array|^d]]</b></span> JavaScript's array are a special kind of object. 
<br/><span class="citation wikicite" id="endnote_COBOL DEPENDING ON clause"><b>[[#ref_COBOL DEPENDING ON clause|^e]]</b></span> The <code>DEPENDING ON</code> clause in COBOL does not create a 'true' variable length array and will always allocate the maximum size of the array.

=== Other types ===
{| class="wikitable"
! rowspan=2|
! colspan=2|Simple composite types
! rowspan=2|[[Algebraic data type]]s
! rowspan=2|[[Union (computer science)|Unions]]
|-
! [[Record (computer science)|Records]]
! [[Tuple]] expression
|-
| [[Ada (programming language)|Ada]]
| <tt>'''type''' identifier '''is''' «'''abstract'''» «'''tagged'''» «'''limited'''» ['''record'''
 <ul>fieldname<sub>1</sub> ''':''' type''';'''</ul>
 <ul>fieldname<sub>2</sub> ''':''' type''';'''</ul>...<br>
'''end record''' 
'''null record''']</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| Any combination of records, unions and enumerations (as well as references to those, enabling recursive types).
| <tt>'''type''' identifier '''('''variation ''':''' discrete_type''') is record'''
<ul>'''case''' variation '''is'''
<ul>'''when''' choice_list<sub>1</sub> ''''''
<ul>fieldname<sub>1</sub> ''':''' type''';'''</ul>
<ul>...</ul></ul>
 <ul>'''when''' choice_list<sub>2</sub> ''''''
<ul>fieldname<sub>2</sub> ''':''' type''';'''</ul>
<ul>...</ul></ul>
<ul>...</ul>
 '''end case;'''</ul>'''end record'''</tt>
|-
| ALGOL 68
| <tt>'''struct''' ('''modename''' ''«fieldname»'', '''...''');</tt>
| colspan=2 align=center| Required types and operators can be [[User-defined function|user defined]]
| <tt>'''union''' ('''modename''', '''...''');</tt>
|-
| C (C99)
| rowspan=2| <tt>'''struct''' «name» '''{'''type name''';'''...'''};'''</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=3| <tt>'''union {'''type name''';'''...'''};'''</tt>
|-
| Objective-C
|-
| C++
| <tt>'''struct''' «name» '''{'''type name''';'''...'''};'''<sup class="reference plainlinks nourlexpansion" id="ref_C++'s struct">[[#endnote_C++'s struct|[b]]]</sup></tt>
| <tt>[[C++11#Tuple_types|«std::»tuple]]<type<sub>1</sub>..type<sub>n</sub>></tt>
|-
| C#
| <tt>'''struct''' name '''{'''type name''';'''...'''}'''</tt>
|
|
| rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Java
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_just classes">[[#endnote_just classes|[a]]]</sup>
|
|
|-
| JavaScript
|
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| D
| <tt>'''struct''' name '''{'''type name''';'''...'''}'''</tt>
| 
| <tt>'''std.variant.Algebraic'''!(type,...)</tt>
| <tt>'''union {'''type name''';'''...'''}'''</tt>
|-
| Go
| <tt>'''struct {<ul>'''«name» type'''<br/>'''...'''</ul>}'''</tt>
| 
| 
| 
|-
| Common Lisp
|
| rowspan=3| <tt>'''(cons '''val<sub>1</sub> val<sub>2</sub>''')'''<sup class="reference plainlinks nourlexpansion" id="ref_pair only">[[#endnote_pair only|[c]]]</sup></tt>
|
|
|-
| Scheme
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|
|-
| ISLISP
|
|
|
|-
| Pascal
| <tt>'''record'''<ul>name''':''' type''';'''<br/>...</ul>'''end'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''record'''<ul>'''case''' type '''of''' <br/>value''': ('''types''');'''<br/>...</ul>'''end'''</tt>
|-
| Visual Basic
|
|
|
|
|-
| Visual Basic .NET
| <tt>'''Structure''' name <ul> '''Dim''' name '''As''' type <br/> ... </ul>''' End Structure'''</tt>
|
|
|
|-
| Python
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_just classes">[[#endnote_just classes|[a]]]</sup>
| <tt>«'''('''»val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... «''')'''»</tt>
|
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| S-Lang
| <tt>'''struct {'''name [=value], ...'''}'''</tt>
|
|
|
|-
| Fortran
|'''TYPE''' name <ul> ''' '''type''' :: ''' name <br/> ... </ul>''' END TYPE'''
|
|
|
|-
| PHP
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_just classes">[[#endnote_just classes|[a]]]</sup>
|
|
|
|-
| Perl
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_Perl's records">[[#endnote_Perl's records|[d]]]</sup>
|
|
| rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Perl 6
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small><sup class="reference plainlinks nourlexpansion" id="ref_just classes">[[#endnote_just classes|[a]]]</sup>
|
|
|-
| Ruby
| <code   ><syntaxhighlight lang="ruby" enclose="none">OpenStruct.new({:name => value})</syntaxhighlight></code>
|
|
|-
| Scala
| <tt>'''case class''' name'''('''«'''var'''» name''':''' type''',''' ...''')'''</tt>
| <tt>'''('''val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... ''')'''</tt>
| <tt>'''abstract class''' name<br/>
'''case class''' Foo'''('''«parameters»''') extends''' name<br/>
'''case class''' Bar'''('''«parameters»''') extends''' name<br/>
...<br /></tt>
or<br />
<tt>'''abstract class''' name<br/>
'''case object''' Foo '''extends''' name<br/>
'''case object''' Bar '''extends''' name<br/>
...<br /></tt>
or combination of case classes and case objects
|
|-
| Windows PowerShell
|
|
|
|
|-
| OCaml
| rowspan=2| <tt>'''type''' name '''= {'''«'''mutable'''» name ''':''' type''';'''...'''}'''</tt>
| rowspan=2| <tt>«'''('''»val<sub>1</sub>''',''' val<sub>2</sub>''',''' val<sub>3</sub>''',''' ... «''')'''»</tt>
| rowspan=2| <tt>'''type''' name '''=''' Foo «'''of''' type»''' ''' Bar «'''of''' type»''' ''' ...</tt>
| rowspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| F#
|-
| Standard ML
| <tt>'''type''' name '''= {'''name ''':''' type''','''...'''}'''</tt>
| rowspan=2| <tt>'''('''val<sub>1</sub>''', '''val<sub>2</sub>''', '''val<sub>3</sub>''', '''... ''')'''</tt>
| <tt>'''datatype''' name '''=''' Foo «'''of''' type»''' ''' Bar «'''of''' type»''' ''' ...</tt>
|-
| Haskell
| <tt>'''data''' Name '''=''' Constr '''{'''name '''::''' type''','''...'''}'''</tt>
| <tt>'''data''' Name '''=''' Foo «types»''' ''' Bar «types»''' ''' ...</tt>
|-
| COBOL
| <tt>level-number name type clauses'''.'''<br/>
&nbsp;&nbsp;level-number+n name type clauses'''.'''<br/>
&nbsp;&nbsp;...</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>name '''REDEFINES''' variable type'''.'''</tt>
|}
<span class="citation wikicite" id="endnote_just classes"><b>[[#ref_just classes|^a]]</b></span> Only classes are supported.
<br /><span class="citation wikicite" id="endnote_C++'s struct"><b>[[#ref_C++'s struct|^b]]</b></span> <code>struct</code>s in C++ are actually classes, but have default public visibility and ''are'' also [[Plain old data structure|POD]] objects. C++11 extended this further, to make classes act identically to POD objects in many more cases.
<br /><span class="citation wikicite" id="endnote_pair only"><b>[[#ref_pair only|^c]]</b></span> pair only
<br /><span class="citation wikicite" id="endnote_Perl's records"><b>[[#ref_Perl's records|^d]]</b></span> Although Perl doesn't have records, because Perl's type system allows different data types to be in an array, "hashes" (associative arrays) that don't have a variable index would effectively be the same as records.
<br /><span class="citation wikicite" id="endnote_enum"><b>[[#ref_enum|^e]]</b></span> Enumerations in this language are algebraic types with only nullary constructors

== Variable and constant declarations ==
{| class="wikitable"
!
! variable
! constant
! type synonym
|-
| [[Ada (programming language)|Ada]]
| <tt>identifier ''':''' type «''':=''' initial_value»<sup class="reference plainlinks nourlexpansion" id="ref_Ada declaration">[[#endnote_Ada declaration|[e]]]</sup></tt>
| <tt>identifier ''': constant''' type ''':=''' final_value</tt>
| <tt>'''subtype''' identifier '''is''' type</tt>
|-
| [[ALGOL 68]]
|<tt>'''modename''' ''name'' «''':=''' initial_value»;</tt>
|<tt>'''modename''' ''name'' '''=''' value;</tt>
|<tt>'''[[typedef|mode]]''' '''synonym''' = '''modename''';</tt>
|-
| C (C99)
| rowspan=3| <tt>type name «'''=''' initial_value»''';'''</tt>
| rowspan=2| <tt>'''enum{''' name '''=''' value '''};'''</tt>
| rowspan=3| <tt>'''[[typedef]]''' type synonym''';'''</tt>
|-
| Objective-C
|-
| C++
| <tt>'''const''' type name '''=''' value''';'''</tt>
|-
| C#
| <tt>type name «'''=''' initial_value»''';''' or <br/> '''var''' name '''=''' value''';'''</tt>
| <tt>'''const''' type name '''=''' value''';''' or <br/> '''readonly''' type name '''=''' value''';'''</tt>
| <tt>'''using''' synonym '''=''' type''';'''</tt>
|-
| D
| <tt>type name «'''=''' initial_value»''';''' or <br/> '''auto''' name '''=''' value''';'''</tt>
| <tt>'''const''' type name '''=''' value''';''' or <br/> '''immutable''' type name '''=''' value''';'''</tt>
| <tt>'''alias''' type synonym''';'''</tt>
|-
| Java
| <tt>type name «'''=''' initial_value»''';'''</tt>
| <tt>'''final''' type name '''=''' value''';'''</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| JavaScript
| <tt>'''var''' name «'''=''' initial_value»''';'''</tt>
| <tt>'''const''' name '''=''' value''';'''</tt>
|-
| Go
| <tt>'''var''' name type «'''=''' initial_value» or <br/> name ''':=''' initial_value</tt>
| <tt>'''const''' name «type» '''=''' initial_value</tt>
| <tt>'''type''' synonym type</tt>
|-
| Common Lisp
| <tt>'''(defparameter''' name initial_value''')''' or <br/> '''(defvar''' name initial_value''')''' or <br/> '''(setf (symbol-value '''symbol''')''' initial_value''')'''</tt>
| <tt>'''(defconstant''' name value''')'''</tt>
| <tt>'''(deftype '''synonym''' () '''type''')'''</tt>
|-
| Scheme
| <tt>'''(define''' name initial_value''')'''</tt>
| 
| 
|-
| ISLISP
| <tt>'''(defglobal''' name initial_value''')''' or <br/> '''(defdynamic''' name initial_value''')'''</tt>
| <tt>'''(defconstant''' name value''')'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| <tt>Pascal<sup class="reference plainlinks nourlexpansion" id="ref_Pascal's declarations">[[#endnote_Pascal's declarations|[a]]]</sup></tt>
| <tt>name''':''' type «'''=''' initial_value»</tt>
| <tt>name '''=''' value</tt>
| <tt>synonym '''=''' type</tt>
|-
| Visual Basic
| <tt>'''Dim''' name '''As''' type</tt>
| rowspan=2| <tt>'''Const''' name '''As''' type '''=''' value</tt>
|
|-
| Visual Basic .NET
| <tt>'''Dim''' name '''As''' type«'''=''' initial_value»'''</tt>
| <tt>'''Imports''' synonym '''=''' type</tt>
|-
| Python
| rowspan=2| <tt>name '''=''' initial_value</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>synonym '''=''' type<sup class="reference plainlinks nourlexpansion" id="ref_variable types">[[#endnote_variable types|[b]]]</sup></tt>
|-
| [[CoffeeScript]]
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| S-Lang
| <tt>name '''=''' initial_value''';'''</tt>
|
| <tt>'''typedef struct {...}''' typename</tt>
|-
| Fortran
| type name
| <tt>type''', PARAMETER :: ''' name '''=''' value</tt>
|
|-
| PHP
| <tt>'''$'''name '''=''' initial_value''';'''</tt>
| <tt>'''define("'''name'''", '''value''');''' <br /> '''const '''name''' = '''value (5.3+)</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Perl
| <tt>«'''my'''» '''$'''name «'''=''' initial_value'''»;'''<sup class="reference plainlinks nourlexpansion" id="ref_Perl's my keyword">[[#endnote_Perl's my keyword|[c]]]</sup></tt>
| <tt>'''use constant''' name '''=>''' value''';'''</tt>
|-
| Perl 6
| <tt>«'''my''' «type»» $name «'''=''' initial_value'''»;'''<sup class="reference plainlinks nourlexpansion" id="ref_Perl's my keyword">[[#endnote_Perl's my keyword|[c]]]</sup></tt>
| <tt>«'''my''' «type»» '''constant''' name '''=''' value''';'''</tt>
| <tt>'''::'''synonym '''::=''' type</tt>
|-
| Ruby
| <tt>name '''=''' initial_value</tt>
| <tt>Name '''=''' value</tt>
| <tt>synonym '''=''' type<sup class="reference plainlinks nourlexpansion" id="ref_variable types">[[#endnote_variable types|[b]]]</sup></tt>
|-
| Scala
| <tt>'''var''' name«''':''' type» '''=''' initial_value</tt>
| <tt>'''val''' name«''':''' type» '''=''' value</tt>
| <tt>'''type''' synonym '''=''' type</tt>
|-
| Windows PowerShell
| <tt>«'''['''type''']'''»''' $'''name '''=''' initial_value</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Bash shell
| <tt>name'''='''initial_value</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
| <tt>'''let''' name «''':''' type '''ref'''» '''= ref''' value<sup class="reference plainlinks nourlexpansion" id="ref_ML ref">[[#endnote_ML ref|[d]]]</sup></tt>
| rowspan=2| <tt>'''let''' name «''':''' type» '''=''' value</tt>
| rowspan=3| <tt>'''type''' synonym '''=''' type</tt>
|-
| F#
| <tt>'''let mutable''' name «''':''' type» '''=''' value</tt>
|-
| Standard ML
| <tt>'''val''' name «''':''' type '''ref'''» '''= ref''' value<sup class="reference plainlinks nourlexpansion" id="ref_ML ref">[[#endnote_ML ref|[d]]]</sup></tt>
| <tt>'''val''' name «''':''' type» '''=''' value</tt>
|-
| Haskell
|
| <tt>«name'''::'''type''';'''» name '''=''' value</tt>
| <tt>'''type''' Synonym '''=''' type</tt>
|-
| [[Forth (programming language)|Forth]]
| <tt>'''VARIABLE''' name (in some systems use value '''VARIABLE''' name instead)</tt>
| <tt>value '''CONSTANT''' name</tt>
| 
|-
| COBOL
| <tt>level-number name type clauses'''.'''</tt>
| <tt>«'''0'''»'''1''' name '''CONSTANT''' «'''AS'''» value'''.'''</tt>
| <tt>level-number name type clauses «'''IS'''» '''TYPEDEF.'''
|-
| Mathematica
| <tt>name'''='''initialvalue</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}
<span class="citation wikicite" id="endnote_Pascal's declarations"><b>[[#ref_Pascal's declarations|^a]]</b></span> Pascal has declaration blocks. See [[Comparison of programming languages (basic instructions)#Functions]].
<br/><span class="citation wikicite" id="endnote_variable types"><b>[[#ref_variable types|^b]]</b></span>Types are just regular objects, so you can just assign them.
<br/><span class="citation wikicite" id="endnote_Perl's my keyword"><b>[[#ref_Perl's my keyword|^c]]</b></span> In Perl, the "my" keyword scopes the variable into the block.
<br/><span class="citation wikicite" id="endnote_ML ref"><b>[[#ref_ML ref|^d]]</b></span> Technically, this does not declare ''name'' to be a mutable variable—in ML, all names can only be bound once; rather, it declares ''name'' to point to a "reference" data structure, which is a simple mutable cell. The data structure can then be read and written to using the <tt>!</tt> and <tt>:=</tt> operators, respectively.
<br/><span class="citation wikicite" id="endnote_Ada declaration"><b>[[#ref_Ada declaration|^[e]]]</b></span> If no initial value is given, an invalid value is automatically assigned (which will trigger a run-time exception if it used before a valid value has been assigned). While this behaviour can be suppressed it is recommended in the interest of predictability. If no invalid value can be found for a type (for example in case of an unconstraint integer type), a valid, yet predictable value is chosen instead.

== [[Control flow]] ==

=== [[Conditional (programming)|Conditional]] statements ===
{| class="wikitable"
|- valign="top"
!
! if
! else if
! [[switch statement|select case]]
! [[Conditional (programming)#If expressions|conditional expression]]
|- valign="top"
| [[Ada (programming language)|Ada]]
| rowspan=2| <tt>'''if''' condition '''then''' <ul>statements</ul> «'''else''' <ul>statements»</ul> '''end if'''</tt>
| rowspan=2| <tt>'''if''' condition<sub>1</sub> '''then''' <ul>statements</ul> '''elsif''' condition<sub>2</sub> '''then''' <ul>statements</ul>...<br>«'''else''' <ul>statements»</ul> '''end if'''</tt>
| <tt>'''case''' expression '''is'''<ul>'''when''' value_list<sub>1</sub> '''''' statements</ul><ul>'''when''' value_list<sub>2</sub> '''=>''' statements</ul>...<ul>«'''when others ''' statements» </ul>'''end case'''</tt>
| <tt>'''(if''' condition<sub>1</sub> '''then''' <ul>expression<sub>1</sub></ul> «'''elsif''' condition<sub>2</sub> '''then''' <ul>expression<sub>2</sub>»</ul> ... <br> '''else''' <ul>expression<sub>n</sub></ul>''')'''<br>'''(case''' expression '''is''' <ul>'''when''' value_list<sub>1</sub> '''''' expression<sub>1</sub></ul><ul>'''when''' value_list<sub>2</sub> '''=>''' expression<sub>2</sub></ul> ... <ul> «'''when others ''' expression<sub>n</sub>» </ul>''')'''</tt>
|- valign="top"
| [[Seed7]]
| <tt>'''case''' expression '''of'''<br />'''when''' set1 ''':''' statements<br/>...<br/>«'''otherwise:''' statements» <br />'''end case'''</tt>
|
|- valign="top"
| [[Modula-2]]
| <tt>'''if''' condition '''then''' <ul>statements</ul> «'''else''' <ul>statements»</ul> '''end'''</tt>
| <tt>'''if''' condition<sub>1</sub> '''then''' <ul>statements</ul> '''elsif''' condition<sub>2</sub> '''then''' <ul>statements</ul>...<br>«'''else''' <ul>statements»</ul> '''end'''</tt>
| rowspan=1 | <tt>'''case''' expression '''of'''<br />caseLabelList ''':''' statements ''''''<br/>...<br/>«'''else''' statements» <br />'''end'''</tt>
|
|- valign="top"
| rowspan=2 |[[ALGOL 68]] & "brief form"
| <tt>'''if''' condition '''then ''' statements «'''else''' statements» '''fi'''</tt>
| <tt>'''if''' condition '''then''' statements '''elif''' condition '''then''' statements '''fi'''</tt>
| <tt>'''case''' switch '''in''' statements, statements«,... '''out''' statements» '''esac'''</tt>
| rowspan=2 | <source lang="algol68" enclose="none">( condition | valueIfTrue | valueIfFalse )</source>
|- valign="top"
|<source lang="algol68" enclose="none">( condition | statements «| statements» )</source>
|<source lang="algol68" enclose="none">( condition | statements |: condition |  statements )</source>
|<source lang="algol68" enclose="none">( variable | statements,... «| statements» )</source>
|- valign="top"
| C (C99)
| rowspan=9|<tt>'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| rowspan=8|<tt>'''if ('''condition''') {'''instructions'''}<br/>else if ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»</tt>
| rowspan=7|<tt>'''switch ('''variable''') {<ul>case''' case1''':''' instructions «'''break;'''»<br/>...<br/>«'''default:''' instructions»</ul>'''}'''</tt>
| rowspan=8| <tt>condition '''[[?:|?]]''' valueIfTrue '''[[?:|:]]''' valueIfFalse</tt>
|- valign="top"
| Objective-C
|- valign="top"
| C++ (STL)
|- valign="top"
| D
|- valign="top"
| Java
|- valign="top"
| JavaScript
|- valign="top"
| PHP
|- valign="top"
| C#
| <tt>'''switch ('''variable''') {<ul>case''' case1''':''' instructions'''; '''«jump statement''';'''»<br/>...<br/>«'''default:''' instructions''';''' «jump statement''';'''»» </ul> '''}'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''if ('''condition''') { '''instructions''' }<br/>elseif ('''condition''') { '''instructions''' }'''<br/>...<br/>«'''else { '''instructions''' }'''»</tt>
| <tt>'''switch ('''variable''') { '''case1''' { '''instructions «'''break;'''» '''}''' ... «'''default { '''instructions''' }'''»'''}'''</tt>
| 
|- valign="top"
| Go
| <tt>'''if '''condition''' {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if '''condition''' {'''instructions'''}<br/>else if '''condition''' {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/> or <br/> '''switch {<ul>case''' condition''':''' instructions <br/>...<br/>«'''default:''' instructions»</ul>'''}'''</tt>
| <tt>'''switch '''variable''' {<ul>case''' case1''':''' instructions <br/>...<br/>«'''default:''' instructions»</ul>'''}'''</tt>
| 
|- valign="top"
| Perl
| <tt>'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless ('''notcondition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if ('''condition''') {'''instructions'''}<br/>elsif ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless ('''notcondition''') {'''instructions'''}<br/>elsif ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''use feature "switch";'''<br/>...<br/>'''given ('''variable''') {<ul>when ('''case1''') { '''instructions''' }'''<br/>...<br/>«'''default { '''instructions''' }'''»</ul>'''}'''</tt>
| <tt>condition '''[[?:|?]]''' valueIfTrue '''[[?:|:]]''' valueIfFalse</tt>
|- valign="top"
| Perl 6
| <tt>'''if''' condition '''{'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»<br/>or<br/>'''unless''' notcondition '''{'''instructions'''}'''</tt>
| <tt>'''if''' condition''' {'''instructions'''}<br/>elsif''' condition '''{'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''</tt>
| <tt>'''given''' variable '''{<ul>when''' case1 '''{ '''instructions''' }'''<br/>...<br/>«'''default { '''instructions''' }'''»</ul>'''}'''</tt>
| <tt>condition '''[[?:|??]]''' valueIfTrue '''!!''' valueIfFalse</tt>
|- valign="top"
| Ruby
| <tt>'''if''' condition <ul>instructions</ul> «'''else''' <ul>instructions»</ul> </tt>
| <tt>'''if''' condition <ul>instructions</ul> '''elsif''' condition <ul>instructions</ul> ... <br/>«'''else''' <ul>instructions»</ul> '''end'''</tt>
| <tt>'''case''' variable <br/> '''when''' case1 <br/> <ul>instructions</ul> ... <br/> «'''else'''<ul>instructions»</ul>'''end'''</tt>
| <tt>condition '''[[?:|?]]''' valueIfTrue '''[[?:|:]]''' valueIfFalse</tt>
|- valign="top"
| Scala
| <tt>'''if ('''condition''') {'''instructions'''}'''<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>'''if ('''condition''') {'''instructions'''}<br/>else if ('''condition''') {'''instructions'''}'''<br/>...<br/>«'''else {'''instructions'''}'''»</tt>
| <tt>expression '''match {'''<ul>'''case''' pattern1 '''=>''' expression<br/>'''case''' pattern2 '''=>''' expression<br/>...<br/>«'''case _ =>''' expression»</ul>'''}'''<sup class="reference plainlinks nourlexpansion" id="ref_pattern matching">[[#endnote_pattern matching|[b]]]</sup></tt>
| <tt>'''if ('''condition''')''' valueIfTrue '''else''' valueIfFalse</tt>
|- valign="top"
| Smalltalk
| <tt>condition '''ifTrue:''' <ul>trueBlock</ul> «'''ifFalse:''' <ul>falseBlock»</ul> '''end'''</tt>
| 
| 
| <tt>condition '''ifTrue:''' trueBlock '''ifFalse:''' falseBlock</tt>
|- valign="top"
| Common Lisp
| <tt>'''(when '''condition<br/> <ul>instructions''')'''</ul> or<br/> '''(unless '''condition<br/> <ul>instructions''')'''</ul> or<br/> '''(if '''condition'''<br/><ul>(progn '''instructions''')</ul><ul>'''«'''(progn '''instructions''')'''»''')'''</ul></tt>
| <tt>'''(cond ('''condition1 instructions''')<br/><ul>('''condition2 instructions''')</ul><ul>'''...'''</ul><ul>'''«'''(t '''instructions''')'''»''')'''</ul></tt>
| <tt>'''(case '''expression'''<ul>('''case1 instructions''')</ul><ul>('''case2 instructions''')</ul><ul>'''...'''</ul><ul>'''«'''(otherwise '''instructions''')'''»''')'''</ul></tt>
| rowspan=2| <tt>'''(if '''condition valueIfTrue valueIfFalse''')'''</tt>
|- valign="top"
| Scheme
| <tt>'''(when '''conditioninstructions''')''' or <br/> '''(if '''condition''' (begin '''instructions''') '''«'''(begin '''instructions''')'''»''')'''</tt>
| <tt>'''(cond ('''condition1 instructions''') ('''condition2 instructions''') '''...''' '''«'''(else '''instructions''')'''»''')'''</tt>
| <tt>'''(case ('''variable''') (('''case1''')''' instructions''') (('''case2''')''' instructions''') '''...''' '''«'''(else '''instructions''')'''»''')'''</tt>
|- valign="top"
| ISLISP
| <tt>'''(if '''condition'''<br/><ul>(progn '''instructions''')</ul><ul>'''«'''(progn '''instructions''')'''»''')'''</ul></tt>
| <tt>'''(cond ('''condition1 instructions''')<br/><ul>('''condition2 instructions''')</ul><ul>'''...'''</ul><ul>'''«'''(t '''instructions''')'''»''')'''</ul></tt>
| <tt>'''(case '''expression'''<ul>('''case1 instructions''')</ul><ul>('''case2 instructions''')</ul><ul>'''...'''</ul><ul>'''«'''(t '''instructions''')'''»''')'''</ul></tt>
| <tt>'''(if '''condition valueIfTrue valueIfFalse''')'''</tt>
|- valign="top"
| Pascal
| <tt>'''if''' condition '''then begin''' <ul>instructions</ul> '''end''' <br/> «'''else begin'''<ul>instructions</ul>'''end'''»<sup class="reference plainlinks nourlexpansion" id="ref_pascal semicolon">[[#endnote_pascal semicolon|[c]]]</sup></tt>
| <tt>'''if''' condition '''then begin''' <ul>instructions</ul> '''end <br/> else if''' condition '''then begin'''<ul>instructions</ul> '''end'''<br/>...<br/>«'''else begin'''<ul>instructions</ul> '''end'''»<sup class="reference plainlinks nourlexpansion" id="ref_pascal semicolon">[[#endnote_pascal semicolon|[c]]]</sup></tt>
| <tt>'''case '''variable''' of''' <ul>case1''':''' instructions <br/> ... <br/> «'''else:''' instructions»</ul>'''end'''<sup class="reference plainlinks nourlexpansion" id="ref_pascal semicolon">[[#endnote_pascal semicolon|[c]]]</sup></tt>
|- valign="top"
| Visual Basic
| rowspan=2| <tt>'''If''' condition '''Then''' <ul>instructions</ul> «'''Else''' <ul>instructions»</ul>'''End If'''</tt>
| rowspan=2| <tt>'''If''' condition '''Then''' <ul>instructions</ul> '''ElseIf''' condition '''Then''' <ul>instructions</ul> ... <br/> «'''Else''' <ul>instructions»</ul>'''End If'''</tt>
| rowspan=2| <tt>'''Select Case''' variable <br/> '''Case''' case1 <ul>instructions</ul> ... <br/> «'''Case Else''' <ul>instructions»</ul> '''End Select'''</tt>
| <tt>'''[[IIf]]('''condition''', '''valueIfTrue''', '''valueIfFalse''')'''</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''If('''condition''', '''valueIfTrue''', '''valueIfFalse''')'''</tt>
|- valign="top"
| Python <sup class="reference plainlinks nourlexpansion" id="ref_python indent">[[#endnote_python indent|[a]]]</sup>
| <tt>'''if''' condition ''':''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
| <tt>'''if''' condition ''':''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> '''elif''' condition ''':''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/>  ... <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
| 
| <tt>valueIfTrue '''if''' condition '''else''' valueIfFalse <br/>(Python 2.5+)</tt>
|- valign="top"
| S-Lang
| <tt>'''if ('''condition''') { '''instructions''' } '''«'''else { '''instructions''' }'''»</tt>
| <tt>'''if ('''condition''') { '''instructions''' } else if ('''condition''') {''' instructions '''}''' ... «'''else { '''instructions '''}'''»</tt>
| <tt>'''switch ('''variable''') { case '''case1''': '''instructions''' } { case '''case2''': '''instructions''' }''' ...</tt>
|
|- valign="top"
| Fortran
| <tt>'''IF ('''condition''') THEN <ul> '''instructions''' </ul> ELSE <ul> '''instructions''' </ul> ENDIF'''</tt>
| <tt>'''IF ('''condition''') THEN <ul> '''instructions''' </ul> ELSEIF ('''condition''') THEN <ul> '''instructions''' </ul> ... <br/> ELSE <ul> '''instructions''' </ul> ENDIF'''</tt>
| <tt>'''SELECT CASE('''variable''')<ul> CASE ('''case1''') <ul> '''instructions''' </ul> ... <br/> CASE DEFAULT <ul> '''instructions''' </ul> </ul> END SELECT</tt>
|
|- valign="top"
| Forth
| <tt>condition''' IF '''instructions «''' ELSE '''instructions»''' THEN'''</tt>
| <tt>condition''' IF '''instructions ''' ELSE '''condition''' IF '''instructions''' THEN THEN'''</tt>
| <tt>value''' CASE'''<br/>case''' OF '''instructions''' ENDOF'''<br/>case''' OF '''instructions''' ENDOF'''<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default instructions<br/>'''ENDCASE'''</tt>
| <tt>condition''' IF '''valueIfTrue''' ELSE '''valueIfFalse''' THEN'''</tt>
|- valign="top"
| OCaml
| <tt>'''if''' condition '''then begin''' instructions '''end''' «'''else begin''' instructions '''end'''»</tt>
| <tt>'''if''' condition '''then begin''' instructions '''end else if''' condition '''then begin''' instructions '''end''' ... «'''else begin''' instructions '''end'''»</tt>
| rowspan=2| <tt>'''match''' value '''with <ul>'''pattern1'''   '''expression'''<br/> '''pattern2'''  '''expression<br/> ... <br/>«''' '''expression»<sup class="reference plainlinks nourlexpansion" id="ref_pattern matching">[[#endnote_pattern matching|[b]]]</sup></ul></tt>
| rowspan=4| <tt>'''if''' condition '''then''' valueIfTrue '''else''' valueIfFalse</tt>
|- valign="top"
| F#
| <tt>'''if''' condition '''then''' <br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> «'''else''' <br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
| <tt>'''if''' condition '''then''' <br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> '''elif''' condition '''then''' <br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> ... <br/> «'''else''' <br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
|- valign="top"
| Standard ML
| <tt>'''if''' condition '''then''' «'''('''»instructions «''')'''»<br/>'''else''' «'''('''» instructions «''')'''»</tt>
| <tt>'''if''' condition '''then''' «'''('''»instructions «''')'''»<br/>'''else if''' condition '''then''' «'''('''» instructions «''')'''»<br/>...<br/>'''else''' «'''('''» instructions «''')'''»</tt>
| <tt>'''case''' value '''of<ul>'''pattern1'''  '''expression'''<br/>  '''pattern2''' => '''expression<br/> ...<br/> «''' '''expression»<sup class="reference plainlinks nourlexpansion" id="ref_pattern matching">[[#endnote_pattern matching|[b]]]</sup></ul></tt>
|- valign="top"
| Haskell (GHC)
| <tt>'''if''' condition '''then''' expression '''else''' expression</tt><br/>or<br/><tt>'''when''' condition '''(do''' instructions''')'''</tt><br/>or<br/><tt>'''unless''' notcondition '''(do''' instructions''')'''</tt>
| <tt>result '''''' condition '''=''' expression <ul>'''''' condition '''=''' expression <br/>''' otherwise =''' expression</ul></tt>
| <tt>'''case''' value '''of {<ul>'''pattern1'''   '''expression''';<br/>'''pattern2''' '''expression''';'''<br/> ... <br/>«''' '''expression»</ul>'''}'''<sup class="reference plainlinks nourlexpansion" id="ref_pattern matching">[[#endnote_pattern matching|[b]]]</sup></tt>
|- valign="top"
| Bash shell
| <poem><tt>'''if''' condition-command; '''then'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>expression 
«'''else''' 
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>expression»
'''fi'''</tt></poem>
| <poem><tt>'''if''' condition-command; '''then'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>expression 
'''elif''' condition-command; '''then'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>expression 
«'''else''' 
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>expression»
'''fi'''</tt></poem>
| <poem><tt>'''case''' "$variable" '''in'''
"$condition1" )
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>command...
;;
"$condition2" )
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>command...
;;
'''esac'''</tt></poem>
| 
|- valign="top"
| rowspan=5| CoffeeScript
| <tt>'''if''' condition '''then''' expression «'''else''' expression»</tt>
| <tt>'''if''' condition '''then''' expression '''else if''' condition '''then''' expression «'''else''' expression»</tt>
| rowspan=2| <tt>'''switch''' expression <ul>'''when''' condition '''then''' expression</ul> <ul>'''else''' expression</ul></tt>
| rowspan=5| ''All conditions are expressions''
|- valign="top"
| <tt>'''if''' condition <ul>expression</ul> «'''else''' <ul>expression»</ul></tt>
| <tt>'''if''' condition <ul>expression</ul> '''else if''' condition <ul>expression</ul> «'''else''' <ul>expression»</ul></tt>
|- valign="top"
| <tt>expression '''if''' condition</tt>
| rowspan=3| <tt>'''unless''' condition <ul>expression</ul> '''else unless''' condition <ul>expression</ul> «'''else''' <ul>expression»</ul></tt>
| rowspan=3| <tt>'''switch''' expression <ul>'''when''' condition <ul>expression</ul> «'''else''' <ul>expression»</ul></ul></tt>
|- valign="top"
| <tt>'''unless''' condition <ul>expression</ul> «'''else''' <ul>expression»</ul></tt>
|- valign="top"
| <tt>expression '''unless''' condition</tt>
|- valign="top"
| COBOL
| <tt>'''IF''' condition «'''THEN'''» <ul> expression </ul> «'''ELSE''' <ul> expression»'''.''' </ul></tt><sup class="reference plainlinks nourlexpansion" id="ref_COBOL END-IF">[[#endnote_COBOL END-IF|[d]]]</sup>
| 
| <tt>'''EVALUATE''' expression «'''ALSO''' expression...» <ul> '''WHEN''' case-or-condition «'''ALSO''' case-or-condition...» <ul> expression </ul></ul> <ul> ... </ul> <ul>«'''WHEN OTHER''' <ul> expression» </ul></ul> '''END-EVALUATE'''</tt>
|
|- valign="top"
!
! if
! else if
! [[switch statement|select case]]
! [[Conditional (programming)#If expressions|conditional expression]]
|}

<span class="citation wikicite" id="endnote_python indent"><b>[[#ref_python indent|^a]]</b></span> A single instruction can be written on the same line following the colon. Multiple instructions are grouped together in a [[block (programming)|block]] which starts on a newline (The indentation is required). The conditional expression syntax does not follow this rule.
<br/>
<span class="citation wikicite" id="endnote_pattern matching"><b>[[#ref_pattern matching|^b]]</b></span> This is [[pattern matching]] and is similar to select case but not the same. It is usually used to deconstruct [[algebraic data type]]s.
<br/>
<span class="citation wikicite" id="endnote_pascal semicolon"><b>[[#ref_pascal semicolon|^c]]</b></span> In languages of the Pascal family, the semicolon is not part of the statement. It is a separator between statements, not a terminator.
<br/>
<span class="citation wikicite" id="endnote_COBOL END-IF"><b>[[#ref_COBOL END-IF|^d]]</b></span> <tt>'''END-IF'''</tt> may be used instead of the period at the end.

=== [[Control flow#Loops|Loop statements]] ===
{| class="wikitable"
|-
!
! [[while loop|while]]
! [[do while loop|do while]]
! [[for loop|for i = first to last]]
! [[foreach]]
|-
| [[Ada (programming language)|Ada]]
| <tt>'''while''' condition '''loop''' <UL>statements</UL> '''end loop'''</tt>
| <tt>'''loop''' <UL>statements</UL><UL>'''exit when not''' condition</UL> '''end loop'''</tt>
| <tt>'''for''' index '''in''' «'''reverse'''» [first '''..''' last  discrete_type] '''loop''' <UL>statements</UL> '''end loop'''</tt>
| <tt>'''for''' item '''of''' «'''reverse'''» iterator '''loop''' <UL>statements</UL> '''end loop''' <br><br> '''(for''' ['''all'''  '''some'''] ['''in'''  '''of'''] [first '''..''' last  discrete_type  iterator] '''=>''' predicate''')'''<sup class="reference plainlinks nourlexpansion" id="ref_Ada_quantifiers">[[#endnote_Ada_quantifiers|[b]]]</sup></tt>
|-
|rowspan=2| [[ALGOL 68]] ||colspan=3 align=center| <tt>«'''for''' index» «'''from''' first» «'''by''' increment» «'''to''' last» «'''while''' condition» '''do''' statements '''od'''</tt> ||rowspan=2| <tt>'''for''' ''key'' «'''to''' '''upb''' ''list''» '''do''' «'''typename''' ''val''=''list''[''key''];» statements '''od'''</tt>
|-
| <tt>«'''while''' condition»</tt>
&nbsp;&nbsp;&nbsp;&nbsp;'''do''' statements '''od'''
| <tt>«'''while''' statements; condition»</tt>
&nbsp;&nbsp;&nbsp;&nbsp;'''do''' statements '''od'''
| <tt>«'''for''' index» «'''from''' first» «'''by''' increment» «'''to''' last» '''do''' statements '''od'''</tt>
|-
| C (C99)
| rowspan=9|<tt>'''while ('''condition''')''' '''{''' instructions '''}'''</tt>
| rowspan=9|<tt>'''do {''' instructions '''} while ('''condition''')'''</tt>
| rowspan=5|<tt>'''for ('''«type» i '''=''' first''';''' i '''''' last'''; ++'''i''') {''' instructions '''}'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Objective-C
| <tt>'''for ('''type item '''in''' set''') {''' instructions '''}'''</tt>
|-
| C++ (STL)
| <tt>«'''std::'''»'''for_each('''start''',''' end''',''' function''')'''</tt>
([[C++11]]) <tt>'''for ('''type item ''':''' set''') {''' instructions '''}'''</tt>
|-
| C#
| <tt>'''foreach ('''type item '''in''' set''') {''' instructions '''}'''</tt>
|-
| Java
| <tt>'''for ('''type item ''':''' set''') {''' instructions '''}'''</tt>
|-
| JavaScript
|<tt>'''for (var''' i '''=''' first''';''' i '''''' last''';''' i'''++) {''' instructions '''}'''</tt>
|<tt>'''for (var''' index '''in''' set''') {''' instructions '''}''' <br/> or <br/> '''for each (var''' item '''in''' set''') {''' instructions '''}'''</tt> (JS 1.6+, deprecated)<br/>or<br/><tt>'''for (var''' item '''of''' set''') {''' instructions '''}'''</tt> ([[EcmaScript 6]] proposal, supported in Firefox)
|-
| PHP
| <tt>'''foreach (range('''first''', '''last'''-1) as $i) {''' instructions '''}''' or <br/> '''for ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''foreach ('''set '''as''' item''') {''' instructions '''}''' <br/> or <br/> '''foreach ('''set '''as '''key''' =>''' item''') {''' instructions '''}'''</tt>
|-
| Windows PowerShell
| <tt>'''for ($i = '''first'''; $i -le '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''foreach ('''item '''in''' set''') {''' instructions using item '''}'''</tt>
|-
| D
| <tt>'''foreach''' (i; '''first''' ... '''last''') '''{''' instructions '''}'''</tt>
| <tt>'''foreach''' («type» item; set) '''{''' instructions '''}'''</tt>
|-
| Go
| <tt>'''for '''condition''' {''' instructions '''}'''</tt>
| 
| <tt>'''for '''i ''':=''' first''';''' i '''''' last'''; '''i'''++ {''' instructions '''}'''</tt>
| <tt>'''for '''key''', '''item''' := range '''set''' {''' instructions '''}'''</tt>
|-
| Perl
| <tt>'''while ('''condition''')''' '''{''' instructions '''}''' or <br/> '''until ('''notcondition''')''' '''{''' instructions '''}'''</tt>
| <tt>'''do {''' instructions '''} while ('''condition''')''' or <br/> '''do {''' instructions '''} until ('''notcondition''')'''</tt>
| <tt>'''for'''«'''each'''»''' '''«'''$i'''»''' (0 .. N-1) {''' instructions '''}''' or <br/> '''for ($i = '''first'''; $i <= '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''for'''«'''each'''» «$item» '''('''set''') {''' instructions '''}'''</tt>
|-
| Perl 6
| <tt>'''while''' condition '''{''' instructions '''}''' or <br/> '''until''' notcondition '''{''' instructions '''}'''</tt>
| <tt>'''repeat {''' instructions '''} while '''condition or <br/> '''repeat {''' instructions '''} until''' notcondition</tt>
| <tt>'''for'''  first'''..'''last ''' $i  {''' instructions '''}''' or <br/> '''loop ($i = '''first'''; $i '''last'''; $i++) {''' instructions '''}'''</tt>
| <tt>'''for''' set« '''''' $item»  '''{''' instructions '''}'''</tt>
|-
| Ruby
| <tt>'''while''' condition <ul>instructions</ul>'''end''' <br/> or <br/> '''until''' notcondition <ul>instructions</ul> '''end'''</tt>
| <tt>'''begin''' <ul>instructions</ul> '''end while''' condition <br/> or <br/> '''begin''' <ul>instructions</ul> '''end until''' notcondition</tt>
| <tt>'''for i in '''first'''...'''last <ul>instructions</ul> '''end''' <br/> or <br/> first'''.upto('''last'''-1) {  '''instructions '''}'''</tt>
| <tt>'''for''' item '''in''' set <ul>instructions</ul> '''end''' <br/> or <br/> set'''.each { '''item''' '''instructions '''}'''</tt>
|-
| Bash shell
| <tt>'''while''' condition ;'''do'''<ul>instructions</ul>'''done''' <br/> or <br/> '''until''' notcondition ;'''do'''<ul>instructions</ul> '''done'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''for (('''i '''=''' first''';''' i '''''' last'''; ++'''i''')) ; do'''
<ul>instructions</ul>
'''done'''
</tt>
| <tt>'''for''' item '''in''' set ;'''do'''<ul>instructions</ul> '''done'''</tt>
|-
| Scala
| <tt>'''while ('''condition''')''' '''{''' instructions '''}'''</tt>
| <tt>'''do {''' instructions '''} while ('''condition''')'''</tt>
| <tt>'''for ('''i '''''' first '''to''' last «'''by 1'''»''') {''' instructions '''}'''<br/>or<br/>first '''to''' last «'''by 1'''» '''foreach ('''i ''' {''' instructions '''})'''</tt>
| <tt>'''for ('''item '''''' set''') {''' instructions '''}'''<br/>or<br/>set '''foreach ('''item '''=> {''' instructions '''})'''</tt>
|-
| Smalltalk
| <tt>conditionBlock '''whileTrue:''' <ul>loopBlock</ul></tt>
| <tt>loopBlock '''doWhile:''' <ul>conditionBlock</ul></tt>
| <tt>first '''to:''' last '''do:''' <ul>loopBlock</ul></tt>
| <tt>collection '''do:''' <ul>loopBlock</ul></tt>
|-
| Common Lisp
| <tt>'''(loop<ul>while '''condition'''</ul><ul>do</ul><ul>'''instructions''')'''</ul> or <br/> '''(do () ('''notcondition''')<ul>'''instructions''')'''</ul></tt>
| <tt>'''(loop<ul>do</ul><ul>'''instructions'''</ul><ul>while '''condition''')'''</ul></tt>
| <tt>'''(loop<ul>for i from '''first''' to '''last''' «by 1»</ul><ul>do</ul><ul>'''instructions''')'''</ul> or <br/> '''(dotimes (i N)'''<ul>instructions''')'''</ul> or<br/> '''(do ((i '''first''' (1+ i))) (( i '''last'''))<ul>'''instructions''')'''</ul></tt>
| <tt>'''(loop<ul>for '''item''' in '''set'''</ul><ul>do</ul><ul>'''instructions''')'''</ul> or <br/> '''(dolist ('''item set''')<ul>'''instructions''')'''</ul> or <br/>'''(mapc '''function list''')''' or <br/> '''(map '''type function sequence''')'''</tt>
|-
| Scheme
| <tt>'''(do () ('''notcondition''') '''instructions''')''' or <br/> '''(let loop () (if '''condition''' (begin '''instructions''' (loop))))'''</tt>
| <tt>'''(let loop () ('''instructions''' (if '''condition''' (loop))))'''</tt>
| <tt>'''(do ((i '''first''' (+ i 1))) (( i '''last''')) '''instructions''')''' or <br/> '''(let loop ((i '''first''')) (if (< i '''last''') (begin '''instructions''' (loop (+ i 1)))))'''</tt>
| <tt>'''(for-each (lambda ('''item''') '''instructions''') '''list''')'''</tt>
|-
| ISLISP
| <tt>'''(while '''condition''' '''instructions''')'''</tt>
| <tt>'''(tagbody loop''' instructions '''(if''' condition '''(go loop))'''</tt>
| <tt>'''(for ((i '''first''' (+ i 1))) (( i '''last''')) '''instructions''')'''</tt>
| <tt>'''(mapc (lambda ('''item''') '''instructions''') '''list''')'''</tt>
|-
| Pascal
| <tt>'''while''' condition '''do begin''' <ul>instructions</ul> '''end'''</tt>
| <tt>'''repeat''' <ul>instructions</ul> '''until''' notcondition''';'''</tt>
| <tt>'''for''' i ''':=''' first «'''step 1'''» '''to''' last '''do begin''' <ul>instructions</ul> '''end;'''<sup class="reference plainlinks nourlexpansion" id="ref_step">[[#endnote_step|[a]]]</sup></tt>
| <tt>'''for''' item '''in''' set '''do''' ...</tt>
|-
| Visual Basic
| rowspan=2| <tt>'''Do While''' condition <ul>instructions</ul>'''Loop''' <br/> or <br/>'''Do Until''' notcondition <ul>instructions</ul>'''Loop'''</tt>
| rowspan=2| <tt>'''Do''' <ul>instructions</ul> '''Loop While''' condition <br/> or <br/>'''Do''' <ul>instructions</ul> '''Loop Until''' notcondition</tt>
| <tt>'''For''' i '''=''' first '''To''' last «'''Step 1'''» <ul>instructions</ul> '''Next i'''</tt>
| <tt>'''For Each''' item '''In''' set <ul>instructions</ul> '''Next''' item</tt>
|-
| Visual Basic .NET
| <tt>'''For i '''«'''As '''type» '''=''' first '''To''' last «'''Step 1'''» <ul>instructions</ul>'''Next i'''<sup class="reference plainlinks nourlexpansion" id="ref_step">[[#endnote_step|[a]]]</sup></tt>
| <tt>'''For Each''' item '''As '''type''' In''' set <ul>instructions</ul> '''Next''' item</tt>
|-
| Python
| <tt>'''while''' condition ''':''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''for i in range('''first''', '''last'''):''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>(Python 3.x)<br/>
<tt>'''for i in xrange('''first''', '''last'''):''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd>instructions»</tt>(Python 2.x)
| <tt>'''for''' item '''in''' set''':''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
|-
| S-Lang
| <tt>'''while ('''condition''') {''' instructions '''}''' «'''then''' optional-block»</tt>
| <tt>'''do {''' instructions '''} while ('''condition''')''' «'''then''' optional-block»</tt>
| <tt>'''for (i = '''first'''; i  '''last'''; i++) {''' instructions '''}''' «'''then''' optional-block»</tt>
| <tt>'''foreach''' item'''('''set''')''' «'''using ('''what''')'''» '''{''' instructions '''}''' «'''then''' optional-block»</tt>
|-
| Fortran
| <tt>'''DO WHILE ('''condition''') <ul> '''instructions'''</ul> ENDDO'''</tt>
| <tt>'''DO <ul> '''instructions''' <br/> IF ('''condition''') EXIT </ul> ENDDO'''</tt>
| <tt>'''DO '''I''' = '''first''','''last''' <ul> '''instructions''' </ul> ENDDO'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Forth
| <tt>'''BEGIN '''« instructions » condition''' WHILE '''instructions''' REPEAT'''</tt>
| <tt>'''BEGIN ''' instructions condition''' UNTIL'''</tt>
| <tt>limit start''' DO '''instructions''' LOOP'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
| <tt>'''while''' condition '''do''' instructions '''done'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''for i = '''first''' to '''last'''-1 do''' instructions '''done'''</tt>
| <tt>'''Array.iter (fun '''item'''  '''instructions''') '''array <br/> '''List.iter (fun '''item''' -> '''instructions''') '''list</tt>
|-
| F#
| <tt>'''while''' condition '''do''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''for i = '''first''' to '''last'''-1 do''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
| <tt>'''for '''item''' in '''set''' do''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> or <br/> '''Seq.iter (fun '''item''' -> '''instructions''') '''set</tt>
|-
| Standard ML
| <tt>'''while''' condition '''do (''' instructions ''')'''</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''Array.app (fn '''item'''  '''instructions''') '''array <br/> '''app (fn '''item''' => '''instructions''') '''list</tt>
|-
| Haskell (GHC)
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''Control.Monad.forM_ [0..N-1] (\i  do '''instructions''')'''</tt>
| <tt>'''Control.Monad.forM_ '''list '''(\item  do '''instructions''')'''</tt>
|-
| Eiffel
| colspan=4| <tt>'''from''' <ul>setup</ul> '''until''' <ul>condition</ul> '''loop''' <ul>instructions</ul> '''end'''</tt>
|-
| rowspan=6| CoffeeScript
| <tt>'''while''' condition <ul>expression</ul></tt>
| rowspan=6 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=4| <tt>'''for''' i '''in''' [first..last] <ul>expression</ul></tt>
| rowspan=4| <tt>'''for''' item '''in''' set <ul>expression</ul></tt>
|-
| <tt>expression '''while''' condition</tt>
|-
| <tt>'''while''' condition '''then''' expression</tt>
|-
| <tt>'''until''' condition <ul>expression</ul></tt>
|-
| <tt>expression '''until''' condition</tt>
| <tt>'''for''' i '''in''' [first..last] '''then''' expression</tt>
| <tt>'''for''' item '''in''' set '''then''' expression</tt>
|-
| <tt>'''until''' condition '''then''' expression</tt>
| <tt>expression '''for''' i '''in''' [first..last]</tt>
| <tt>expression '''for''' item '''in''' set</tt>
|-
| rowspan=2 | COBOL
| <tt>'''PERFORM''' procedure-1 «'''THROUGH''' procedure-2» ««'''WITH'''» '''TEST BEFORE'''» '''UNTIL''' condition<sup class="reference plainlinks nourlexpansion" id="ref_COBOL THRU">[[#endnote_COBOL THRU|[c]]]</sup></tt>
| <tt>'''PERFORM''' procedure-1 «'''THROUGH''' procedure-2» «'''WITH'''» '''TEST AFTER UNTIL''' condition<sup class="reference plainlinks nourlexpansion" id="ref_COBOL THRU">[[#endnote_COBOL THRU|[c]]]</sup></tt>
| <tt>'''PERFORM''' procedure-1 «'''THROUGH''' procedure-2» '''VARYING''' i '''FROM''' first '''BY''' increment '''UNTIL''' i '''>''' last<sup class="reference plainlinks nourlexpansion" id="ref_COBOL GREATER THAN">[[#endnote_COBOL GREATER THAN|[d]]]</sup></tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| <tt>'''PERFORM''' ««'''WITH'''» '''TEST BEFORE'''» '''UNTIL''' condition <ul> expression </ul> '''END-PERFORM'''</tt>
| <tt>'''PERFORM''' «'''WITH'''» '''TEST AFTER UNTIL''' condition <ul> expression </ul> '''END-PERFORM'''</tt>
| <tt>'''PERFORM VARYING''' i '''FROM''' first '''BY''' increment '''UNTIL''' i '''>''' last <ul> expression </ul> '''END-PERFORM'''<sup class="reference plainlinks nourlexpansion" id="ref_COBOL GREATER THAN">[[#endnote_COBOL GREATER THAN|[d]]]</sup></tt>
|}
<span class="citation wikicite" id="endnote_step"><b>[[#ref_step|^a]]</b></span> "<tt>'''step'''</tt> n" is used to change the loop interval. If "<tt>'''step'''</tt>" is omitted, then the loop interval is 1.

<span class="citation wikicite" id="endnote_Ada_quantifiers"><b>[[#ref_Ada_quantifiers|^b]]</b></span> This implements the universal quantifier ("for all" or "∀") as well as the existential quantifier ("there exists" or "∃").

<span class="citation wikicite" id="endnote_COBOL THRU"><b>[[#ref_COBOL THRU|^c]]</b></span> <tt>'''THRU'''</tt> may be used instead of <tt>'''THROUGH'''</tt>.

<span class="citation wikicite" id="endnote_COBOL GREATER THAN"><b>[[#ref_COBOL GREATER THAN|^d]]</b></span> <tt>«'''IS'''» '''GREATER''' «'''THAN'''»</tt> may be used instead of <tt>'''>'''</tt>.

=== [[Exception handling|Exceptions]] ===
<div class="rellink">Further information: [[Exception handling syntax]]</div>
{| class="wikitable"
|-
!
! throw
! handler
! assertion
|-
| [[Ada (programming language)|Ada]]
| <tt>'''raise''' exception_name «'''with''' string_expression»</tt>
| <tt>'''begin'''<ul>statements</ul>'''exception'''<ul>'''when''' exception_list<sub>1</sub> '''''' statements;</ul><ul>'''when''' exception_list<sub>2</sub> '''''' statements;</ul>...<br><ul>«'''when others ''' statements;»</ul>'''end'''<sup class="reference plainlinks nourlexpansion" id="ref_Ada_uncaught_exceptions">[[#endnote_Ada_uncaught_exceptions|[b]]]</sup></tt>
| <tt>'''pragma Assert ('''«'''Check '''» boolean_expression ««'''Message =>'''» string_expression»''')'''<br><br>[function  procedure  entry] '''with'''<ul>'''Pre ''' boolean_expression</ul><ul>'''Post ''' boolean_expression</ul><br>any_type '''with Type_Invariant ''' boolean_expression</tt>
|-
| C (C99)
| <tt>'''[[longjmp]]('''state''',''' exception''');'''</tt>
| <tt>'''switch ([[setjmp]]('''state''')) { case 0: '''instructions''' break; case '''exception''': '''instructions''' ... }'''</tt>
| rowspan=2|<tt>'''assert('''condition''');'''</tt>
|-
| C++
| rowspan=8|<tt>'''throw''' exception''';'''</tt>
| <tt>'''try { '''instructions''' } catch''' «'''('''exception''')'''» '''{ '''instructions''' }''' ...</tt>
|-
| C#
| <tt>'''try { '''instructions''' } catch''' «'''('''exception''')'''» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''Debug.Assert('''condition''');'''</tt>
|-
| Java
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''assert '''condition''';'''</tt>
|-
| JavaScript
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' «'''finally { '''instructions''' }'''»</tt>
| '''''?'''''
|-
| D
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''assert('''condition''');'''</tt>
|-
| PHP
| <tt>'''try { '''instructions''' } catch ('''exception''') { '''instructions''' }''' ...</tt>
| <tt>'''assert('''condition''');'''</tt>
|-
| S-Lang
| <tt>'''try { '''instructions''' } catch''' «exception» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| '''''?'''''
|-
| Windows PowerShell
| <tt>'''trap''' «'''['''exception''']'''» '''{ '''instructions''' }''' ... instructions or '''try { '''instructions''' } catch''' «'''['''exception''']'''» '''{ '''instructions''' }''' ... «'''finally { '''instructions''' }'''»</tt>
| <tt>'''[Debug]::Assert('''condition''')'''</tt>
|-
| Objective-C
| <tt>'''@throw''' exception''';'''</tt>
| <tt>'''@try { '''instructions''' } @catch ('''exception''') { '''instructions''' }''' ... «'''@finally { '''instructions''' }'''»</tt>
| <tt>'''NSAssert('''condition''', '''description''');'''</tt>
|-
| Perl
| rowspan=2| <tt>'''die''' exception''';'''</tt>
| <tt>'''eval { '''instructions''' }; if ($@) { '''instructions''' }'''</tt>
| '''''?'''''
|-
| Perl 6
| <tt>'''try { '''instructions''' CATCH { when '''exception''' { '''instructions''' } '''...'''}}'''</tt>
| '''''?'''''
|-
| Ruby
| <tt>'''raise''' exception</tt>
| <tt>'''begin''' <ul>instructions</ul> '''rescue''' exception <ul>instructions</ul>... <br/> «'''else''' <ul>instructions»</ul> «'''ensure''' <ul>instructions»</ul> '''end'''</tt>
|
|-
| Smalltalk
| <tt>exception '''raise'''</tt>
| <tt>instructionBlock '''on:''' exception '''do:''' handlerBlock</tt>
| <tt>'''assert:''' conditionBlock</tt>
|-
| Common Lisp
| <tt>'''(error '''"exception"''')''' or <br/> '''(error (make-condition<ul>'''type</ul><ul>arguments'''))'''</ul></tt>
| <tt>'''(handler-case<ul>(progn '''instructions''')</ul><ul>('''exception instructions''')</ul><ul>'''...''')'''</ul> or <br/>'''(handler-bind<ul>('''condition <ul>'''(lambda</ul><ul>'''instructions</ul><ul>«'''invoke-restart''' restart args»'''))'''</ul>...''')'''<sup class="reference plainlinks nourlexpansion" id="ref_a">[[#endnote_a|[a]]]</sup></ul></tt>
| <tt>'''(assert '''condition''')''' or <br/>'''(assert '''condition<ul>«'''('''place''')'''</ul><ul>«error»»''')'''</ul> or <br/>'''(check-type '''var type''')'''</tt>
|-
| Scheme (R<sup>6</sup>RS)
| <tt>'''(raise '''exception''')'''</tt>
| <tt>'''(guard (con ('''condition''' '''instructions''') '''...''') '''instructions''')'''</tt>
| '''''?'''''
|-
| ISLISP
| <tt>'''(error '''"error-string" objects''')''' or <br/> '''(signal-condition '''condition continuable''')'''</tt>
| <tt>'''(with-handler<ul>'''handler form*''')'''</tt>
| '''''?'''''
|-
| Pascal
| <tt>'''raise''' Exception.Create()</tt>
| <tt>'''try''' Except '''on''' E: exception '''do begin ''' instructions ''' end; end;'''</tt>
| '''''?'''''
|-
| Visual Basic
| <tt>'''Err.Raise''' ERRORNUMBER</tt>
| <tt>'''With New '''Try''': On Error Resume Next''' <ul>OneInstruction</ul> .Catch''': On Error GoTo 0: Select Case '''.Number <ul>'''Case''' ERRORNUMBER</ul> <ul><ul>instructions</ul></ul> '''End Select: End With'''
<source lang="vb" enclose="div">
'*** Try class ***
Private mstrDescription As String
Private mlngNumber As Long
Public Sub Catch()

mstrDescription = Err.Description

mlngNumber = Err.Number

End Sub
Public Property Get Number() As Long

Number = mlngNumber

End Property
Public Property Get Description() As String

Description = mstrDescription
End Property
</source>
| <tt>'''Debug.Assert''' condition</tt>
|-
| Visual Basic .NET
| <tt>'''Throw''' exception</tt>
| <tt>'''Try''' <ul>instructions</ul> '''Catch''' «exception» «'''When''' condition» <ul>instructions</ul> ... <br/> «'''Finally''' <ul>instructions»</ul> '''End Try'''</tt>
| <tt>'''Debug.Assert('''condition''')'''</tt>
|-
| Python
| <tt>'''raise''' exception</tt>
| <tt>'''try:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> '''except''' «exception»''':''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> ... <br/> «'''else:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions» <br/> «'''finally:''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions»</tt>
| <tt>'''assert '''condition</tt>
|-
| Fortran
| colspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Forth
| <tt>code''' THROW'''</tt>
| <tt>xt''' CATCH''' ( code or 0 )</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| OCaml
| rowspan=2| <tt>'''raise''' exception</tt>
| <tt>'''try''' expression '''with''' pattern '''->''' expression ...</tt>
| rowspan=2| <tt>'''assert''' condition</tt>
|-
| F#
| <tt>'''try''' expression '''with''' pattern '''->''' expression ... <br/> or <br/>'''try''' expression '''finally''' expression</tt>
|-
| Standard ML
| <tt>'''raise''' exception «arg»</tt>
| <tt>expression '''handle''' pattern '''=>''' expression ...</tt>
| 
|-
| Haskell (GHC)
| <tt>'''throw''' exception <br/> ''or'' <br/> '''throwError''' expression</tt>
| <tt>'''catch''' tryExpression catchExpression <br/> ''or'' <br/> '''catchError''' tryExpression catchExpression</tt>
| <tt>'''assert''' condition expression</tt>
|-
| COBOL
| <tt>'''RAISE''' «'''EXCEPTION'''» exception</tt>
| <tt>'''USE''' «'''AFTER'''» '''EXCEPTION OBJECT''' class-name'''.''' or<br/>
'''USE''' «'''AFTER'''» '''EO''' class-name'''.''' or<br/>
'''USE''' «'''AFTER'''» '''EXCEPTION CONDITION''' exception-name «'''FILE''' file-name»'''.''' or<br/>
'''USE''' «'''AFTER'''» '''EC''' exception-name «'''FILE''' file-name»'''.'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}

<span class="citation wikicite" id="endnote_common lisp restarts"><b>[[#ref_common lisp restarts|^a]]</b></span> Common Lisp allows <code>with-simple-restart</code>, <code>restart-case</code> and <code>restart-bind</code> to define restarts for use with <code>invoke-restart</code>.  Unhandled conditions may cause the implementation to show a restarts menu to the user before unwinding the stack.

<span class="citation wikicite" id="endnote_Ada_uncaught_exceptions"><b>[[#ref_Ada_uncaught_exceptions|^b]]</b></span> Uncaught exceptions are propagated to the innermost dynamically enclosing execution. Exceptions are not propagated across tasks (unless these tasks are currently synchronised in a rendezvous).

=== Other control flow statements ===
{| class="wikitable"
|-
!
! exit block(break)
! continue
! [[Label (programming language)|label]]
! branch ([[goto]])
! return value from generator
|-
| [[Ada (programming language)|Ada]]
| <tt>'''exit''' «loop_name» «'''when''' condition»</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>label''':'''</tt>
| <tt>'''goto''' label</tt>
|  style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| ALGOL 68
| <tt>value '''exit''';</tt> ...
| <tt>'''do''' statements; '''skip exit'''; label: statements '''od'''</tt>
| <tt>label:</tt> ...
| <tt>'''go to''' label; ...<br>
'''goto''' label; ...<br>
label; ...</tt>
| <tt>''yield''(''value'')</tt>
([[Callback (computer science)|Callback]])
|-
| C (C99)
| rowspan=5| <tt>'''break;'''</tt>
| rowspan=5| <tt>'''continue;'''</tt>
| rowspan=11| <tt>label''':'''</tt>
| rowspan=5| <tt>'''goto''' label''';'''</tt>
| rowspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Objective-C
|-
| C++ (STL)
|-
| D
|-
| C#
| <tt>'''yield return''' value''';'''</tt>
|-
| Java
| rowspan=2| <tt>'''break''' «label»''';'''</tt>
| rowspan=2| <tt>'''continue''' «label»''';'''</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| JavaScript
| <tt>'''yield''' value«;»</tt>
|-
| PHP
| <tt>'''break''' «levels»''';'''</tt>
| <tt>'''continue''' «levels»''';'''</tt>
| rowspan=3| <tt>'''goto''' label''';'''</tt>
| <tt>'''yield''' «key » value;</tt>
|-
| Perl
| rowspan=2| <tt>'''last''' «label»''';'''</tt>
| rowspan=2| <tt>'''next''' «label»''';'''</tt>
| 
|-
| Perl 6
| 
|-
| Go
| <tt>'''break''' «label»</tt>
| <tt>'''continue''' «label»</tt>
| <tt>'''goto''' label</tt>
| 
|-
| Bash shell
| <tt>'''break''' «levels»</tt>
| <tt>'''continue''' «levels»</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>

| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Common Lisp
| <tt>'''(return)''' or <br/> '''(return-from '''block''')''' or <br/> '''(loop-finish)'''</tt>
| 
| <tt>'''(tagbody '''tag<ul><ul>...</ul><ul>tag</ul>...''')'''</tt>
| <tt>'''(go '''tag''')'''</tt>
|
|-
| Scheme
| 
| 
|
| 
|
|-
| ISLISP
| <tt>'''(return-from '''block''')'''</tt>
| 
| <tt>'''(tagbody '''tag<ul><ul>...</ul><ul>tag</ul>...''')'''</tt>
| <tt>'''(go '''tag''')'''</tt>
|
|-
| Pascal(ISO)
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>label''':'''</tt><sup class="reference plainlinks nourlexpansion" id="ref_Pascal's declarations">[[#endnote_Pascal's declarations|[a]]]</sup>
| rowspan=2| <tt>'''goto''' label''';'''</tt>
| rowspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Pascal(FPC)
| <tt>'''break;'''</tt>
| <tt>'''continue;'''</tt>
|-
| Visual Basic
| rowspan=2| <tt>'''Exit''' block</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| rowspan=2| <tt>label''':'''</tt>
| rowspan=2| <tt>'''GoTo''' label</tt>
|-
| Visual Basic .NET 
| <tt>'''Continue''' block</tt>
|-
| Python
| <tt>'''break'''</tt>
| <tt>'''continue'''</tt>
| colspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''yield '''value</tt>
|-
| RPG IV
| <tt>'''LEAVE;'''</tt>
| <tt>'''ITER;'''</tt>
| 
| 
| 
|-
| S-Lang
| <tt>'''break;'''</tt>
| <tt>'''continue;'''</tt>
|
| 
|
|-
| Fortran
| <tt>'''EXIT'''</tt>
| <tt>'''CYCLE'''</tt>
| <tt>label</tt><sup class="reference plainlinks nourlexpansion" id="ref_Fortran label">[[#endnote_Fortran label|[b]]]</sup>
| <tt>'''GOTO''' label</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Ruby
| <tt>'''break'''</tt>
| <tt>'''next'''</tt>
| 
| 
| 
|-
| Windows PowerShell
| <tt>'''break''' «label»</tt>
| <tt>'''continue'''</tt>
|
|
|
|-
| OCaml
| rowspan=4 colspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|
|-
| F#
| 
|-
| Standard ML
|
|-
| Haskell (GHC)
|
|-
| COBOL
| <tt>'''EXIT&nbsp;PERFORM''' or '''EXIT&nbsp;PARAGRAPH''' or '''EXIT&nbsp;SECTION''' or '''EXIT.'''
| <tt>'''EXIT PERFORM CYCLE'''</tt>
| <tt>label «'''SECTION'''»'''.'''
| <tt>'''GO TO''' label</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Ya
| <tt>'''break''' «from where»''';'''</tt> f.e.<br>
<tt>'''break for switch;'''
| <tt>'''continue''' «to where»''';'''</tt> f.e.<br>
<tt>'''continue for switch;'''
| <tt>''':'''label</tt>
| <tt>'''goto :'''label''';'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}
<span class="citation wikicite" id="endnote_Pascal's declarations"><b>[[#ref_Pascal's declarations|^a]]</b></span> Pascal has declaration blocks. See [[Comparison of programming languages (basic instructions)#Functions]].
<br/><span class="citation wikicite" id="endnote_Fortran label"><b>[[#ref_Fortran label|^b]]</b></span> label must be a number between 1 and 99999.

== [[Subroutine|Functions]] ==
See [[Reflection (computer science)|reflection]] for calling and declaring functions by strings.
{| class="wikitable"
|- valign="top"
!
! calling a function
! basic/void function
! value-returning function
! required [[main function]]
|- valign="top"
| [[Ada (programming language)|Ada]]
| <tt>''foo'' «(parameters)»</tt>
| <tt>'''procedure''' ''foo'' «(parameters)» '''is begin''' statements '''end''' foo</tt>
| <tt>'''function''' ''foo'' «(parameters)» '''return''' type '''is begin''' statements '''end''' foo</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| [[ALGOL 68]]
|<tt>''foo''«(parameters)»;</tt>
|<tt>'''proc''' ''foo'' = «(parameters)» [[void type|void]]: ( ''instructions'' );</tt>
|<tt>'''proc''' ''foo'' = «(parameters)» '''rettype''': ( ''instructions ...; retvalue'' );</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| C (C99)
| rowspan=8| <tt>'''foo('''«parameters»''')'''</tt>
| rowspan=6| <tt>'''[[void type|void]] foo('''«parameters»''') { '''instructions''' }'''</tt>
| rowspan=6| <tt>type '''foo('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
| rowspan=3| <tt>«global declarations» <br/> '''int main('''«'''int argc, char *argv[]'''»''') { <ul>'''instructions'''</ul> }'''</tt>
|- valign="top"
| Objective-C
|- valign="top"
| C++ (STL)
|- valign="top"
| C#
| <tt>'''static void Main('''«'''string[] args'''»''') { '''instructions''' }''' or<br/> '''static int Main('''«'''string[] args'''»''') { '''instructions''' }'''</tt>
|- valign="top"
| Java
| <tt>'''public static void main(String[] args) { '''instructions''' }''' or<br/> '''public static void main(String[[variadic function|...]] args) { '''instructions''' }'''</tt>
|- valign="top"
| D
| <tt>'''int main('''«'''char[][] args'''»''') { '''instructions'''}''' or<br /> '''int main('''«'''string[] args'''»''') { '''instructions'''}''' or<br /> '''void main('''«'''char[][] args'''»''') { '''instructions'''}''' or<br /> '''void main('''«'''string[] args'''»''') { '''instructions'''}'''</tt>
|- valign="top"
| JavaScript
| <tt>'''function foo('''«parameters»''') { '''instructions''' }''' or<br/> '''var foo = function ('''«parameters»''') {'''instructions''' }''' or<br/> '''var foo = new Function ('''«'''"'''parameter'''",''' ... ''',"'''last parameter'''"'''»''' "'''instructions'''");'''</tt>
| <tt>'''function foo('''«parameters»''') { '''instructions ... '''return''' value'''; }'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Go
| <tt>'''func foo('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''func foo('''«parameters»''') '''type''' { '''instructions ... '''return''' value''' }'''</tt>
| <tt>'''func main() { '''instructions''' }'''</tt>
|- valign="top"
| Common Lisp
| rowspan=3| <tt>'''(foo '''«parameters»''')'''</tt>
| <tt>'''([[defun]] foo ('''«parameters»''')'''<ul>instructions''')'''</ul> or <br/>'''(setf (symbol-function '''symbol''')'''<ul>lambda''')'''</ul></tt>
| <tt>'''([[defun]] foo ('''«parameters»''')'''<ul>...</ul><ul>value''')'''</ul></tt>
| rowspan=3 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Scheme
| <tt>'''(define (foo '''parameters''')''' instructions''')''' or <br/> '''(define foo ([[anonymous function|lambda]] ('''parameters''')''' instructions'''))'''</tt>
| <tt>'''(define (foo '''parameters''')''' instructions... return_value''')''' or <br/> '''(define foo ([[anonymous function|lambda]] ('''parameters''')''' instructions... return_value'''))'''</tt>
|- valign="top"
| ISLISP
| <tt>'''([[defun]] foo ('''«parameters»''')'''<ul>instructions''')'''</ul></tt>
| <tt>'''([[defun]] foo ('''«parameters»''')'''<ul>...</ul><ul>value''')'''</ul></tt>
|- valign="top"
| Pascal
| <tt>'''foo'''«'''('''parameters''')'''»</tt>
| <tt>'''procedure foo'''«'''('''parameters''')'''»''';''' «'''forward;'''»<sup class="reference plainlinks nourlexpansion" id="ref_forward declaration">[[#endnote_forward declaration|[a]]]</sup><br/>
«'''label'''<ul>label declarations»</ul>
«'''const'''<ul>constant declarations»</ul>
«'''type'''<ul>type declarations»</ul>
«'''var'''<ul>variable declarations»</ul>
«local function declarations»<br/>'''begin'''<ul>instructions</ul>'''end;'''</tt>
| <tt>'''function foo'''«'''('''parameters''')'''»''': '''type'''; '''«'''forward;'''»<sup class="reference plainlinks nourlexpansion" id="ref_forward declaration">[[#endnote_forward declaration|[a]]]</sup><br/>
«'''label'''<ul>label declarations»</ul>
«'''const'''<ul>constant declarations»</ul>
«'''type'''<ul>type declarations»</ul>
«'''var'''<ul>variable declarations»</ul>
«local function declarations»<br/>'''begin'''<ul> instructions'''; <br/> foo := '''value</ul>'''end;'''</tt>
| <tt>'''program''' name''';'''<br/>
«'''label'''<ul>label declarations»</ul>
«'''const'''<ul>constant declarations»</ul>
«'''type'''<ul>type declarations»</ul>
«'''var'''<ul>variable declarations»</ul>
«function declarations»<br/>'''begin'''<ul>instructions</ul> '''end.'''</tt> 
|- valign="top"
| Visual Basic
| rowspan=2| <tt>'''Foo('''«parameters»''')'''</tt>
| rowspan=2| <tt>'''Sub Foo('''«parameters»''') <ul> '''instructions''' </ul> End Sub'''</tt>
| <tt>'''Function Foo('''«parameters»''') As '''type <ul>instructions<br/> '''Foo = '''value</ul>'''End Function'''</tt>
| <tt>'''Sub Main()'''<ul>instructions</ul>'''End Sub'''</tt>
|- valign="top"
| Visual Basic .NET
| <tt>'''Function Foo('''«parameters»''') As '''type <ul>instructions<br/>'''Return '''value</ul>'''End Function'''</tt>
| <tt>'''Sub Main('''«'''ByVal CmdArgs() As String'''»''') <ul>'''instructions'''</ul> End Sub'''<br/>or<br/> '''Function Main('''«'''ByVal CmdArgs() As String'''»''') As Integer <ul>'''instructions'''</ul>End Function'''</tt>
|- valign="top"
| Python
| <tt>'''foo('''«parameters»''')'''</tt>
| <tt>'''def foo('''«parameters»'''):''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions </tt>
| <tt>'''def foo('''«parameters»'''):''' <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions <br/> <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''return''' value</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| S-Lang
| <tt>'''foo('''«parameters» «;qualifiers»''')'''</tt>
| <tt>'''define foo ('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''define foo ('''«parameters»''') { '''instructions ... '''return '''value'''; }'''</tt>
| <tt>'''public define slsh_main () { '''instructions''' }'''</tt>
|- valign="top"
| Fortran
| <tt>'''foo ('''«arguments»''') <br> CALL sub_foo ('''«arguments»''')'''<sup class="reference plainlinks nourlexpansion" id="ref_Fortran arguments">[[#endnote_Fortran arguments|[c]]]</sup></tt>
| <tt>'''SUBROUTINE sub_foo ('''«arguments»''') <ul> '''instructions''' </ul> END SUBROUTINE'''<sup class="reference plainlinks nourlexpansion" id="ref_Fortran arguments">[[#endnote_Fortran arguments|[c]]]</sup></tt>
| <tt>type''' FUNCTION foo ('''«arguments»''') <ul> '''instructions''' <br/> ... <br/> foo '''= value''' </ul> END FUNCTION'''<sup class="reference plainlinks nourlexpansion" id="ref_Fortran arguments">[[#endnote_Fortran arguments|[c]]]</sup></tt>
| <tt>'''PROGRAM '''main''' <ul> '''instructions''' </ul> END PROGRAM'''</tt>
|- valign="top"
| Forth
| <tt>«parameters»''' FOO'''</tt>
| <tt>''': FOO ''' « ''stack effect comment:'' '''( '''before '''-- )''' » ''' <ul> '''instructions''' </ul> ;'''</tt>
| <tt>''': FOO ''' « ''stack effect comment:'' '''( '''before '''--''' after ''')''' » ''' <ul> '''instructions''' </ul> ;'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| PHP
| <tt>'''foo('''«parameters»''')'''</tt>
| <tt>'''function foo('''«parameters»''') { '''instructions''' }'''</tt>
| <tt>'''function foo('''«parameters»''') { '''instructions''' ... return '''value'''; }'''</tt>
| rowspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| Perl
| <tt>'''foo('''«parameters»''')''' or <br/> '''&foo'''«'''('''parameters''')'''»</tt>
| <tt>'''sub foo { '''«'''my ('''parameters''') = @_;'''»''' '''instructions''' }'''</tt>
| <tt>'''sub foo { '''«'''my ('''parameters''') = @_;'''»''' '''instructions'''... '''«'''return'''»''' '''value'''; }'''</tt>
|- valign="top"
| Perl 6
| <tt>'''foo('''«parameters»''')''' or <br/> '''&foo'''«'''('''parameters''')'''»</tt>
| <tt>«'''multi''' »'''sub foo('''parameters''') { '''instructions''' }'''</tt>
| <tt>«'''our''' «type» »«'''multi''' »'''sub foo('''parameters''') { '''instructions'''... '''«'''return'''»''' '''value'''; }'''</tt>
|- valign="top"
| Ruby
| rowspan=2| <tt>'''foo'''«'''('''parameters''')'''»</tt>
| <tt>'''def foo'''«'''('''parameters''')'''» <ul>instructions </ul> '''end'''</tt>
| <tt>'''def foo'''«'''('''parameters''')'''» <ul>instructions <br/> «'''return'''» value </ul> '''end'''</tt>
|- valign="top"
| Scala
| <tt>'''def foo'''«'''('''parameters''')'''»«''': Unit ='''» '''{''' instructions '''}'''</tt>
| <tt>'''def foo'''«'''('''parameters''')'''»«''':''' type» '''= {''' instructions ... «'''return'''» value '''}'''</tt>
| <tt>'''def main(args: Array[String]) {''' instructions '''}'''</tt>
|- valign="top"
| Windows PowerShell
| <tt>'''foo''' «parameters»</tt>
| <tt>'''function foo ''' { '''instructions''' };'''<br/>or<br/>'''function foo { '''«'''param('''parameters''')'''»''' '''instructions''' }'''</tt>
| <tt>'''function foo '''«'''('''parameters''')'''» ''' { '''instructions''' ''' … '''return '''value''' };''' or<br/>'''function foo { '''«'''param('''parameters''')'''» '''instructions''' …''' return '''value''' }'''</tt>
| rowspan=4 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| rowspan=2|Bash shell
| rowspan=2|<tt>'''foo''' «parameters»</tt>
| <poem><tt>'''function foo {'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>instructions
'''}'''
</tt>or<tt>
'''foo () {'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>instructions
''' }'''</tt></poem>
| <poem><tt>'''function foo {'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>instructions
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>'''return''' «exit_code»
'''}'''
</tt>or<tt>
'''foo () {'''
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>instructions
<span style="white-space:nowrap;">&nbsp;&nbsp;&nbsp;&nbsp;</span>'''return''' «exit_code»
''' }'''</tt></poem>
|- valign="top"
| colspan=2|
* parameters
** <tt>'''$'''n</tt> ('''$1''', '''$2''', '''$3''', ...)
** <tt>'''$@'''</tt> (all parameters)
** <tt>'''$#'''</tt> (the number of parameters)
** <tt>'''$0'''</tt> (this function name)
|- valign="top"
| OCaml
| rowspan=4| <tt>'''foo '''parameters</tt>
| rowspan=2| <tt>'''let''' «'''rec'''» '''foo''' parameters '''=''' instructions</tt>
| rowspan=2| <tt>'''let''' «'''rec'''» '''foo''' parameters '''=''' instructions... return_value</tt>
|- valign="top"
| F#
| <tt>'''[<EntryPoint>] let main args =''' instructions</tt>
|- valign="top"
| Standard ML
| <tt>'''fun foo''' parameters '''= (''' instructions ''')'''</tt>
| <tt>'''fun foo''' parameters '''= (''' instructions... return_value ''')'''</tt>
| 
|- valign="top"
| Haskell
| <tt>'''foo''' parameters '''= do'''<br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions</tt>
| <tt>'''foo''' parameters '''=''' return_value <br/> or <br/> '''foo''' parameters '''= do'''<br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> instructions<br/><kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.2em 0.2em #ddd; -webkit-box-shadow: 0.1em 0.2em 0.2em #ddd; box-shadow: 0.1em 0.2em 0.2em #ddd; background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">Tab <span class="Unicode">↹</span></kbd> '''return''' value</tt>
| <tt>«'''main :: IO ()'''» <br/> '''main = do''' instructions</tt>
|- valign="top"
| Eiffel
| <tt>'''foo ('''«parameters»''')'''</tt>
| <tt>'''foo ('''«parameters»''')'''<br/><ul>'''require''' <ul>preconditions</ul> '''do''' <ul>instructions</ul> '''ensure''' <ul>postconditions</ul> '''end'''</ul></tt>
| <tt>'''foo ('''«parameters»''')''': type<br/><ul>'''require''' <ul>preconditions</ul> '''do''' <ul>instructions</ul><ul>'''Result''' := value</ul> '''ensure''' <ul>postconditions</ul> '''end'''</ul></tt>
| <sup class="reference plainlinks nourlexpansion" id="ref_root class and feature">[[#endnote_root class and feature|[b]]]</sup>
|- valign="top"
| rowspan=2| CoffeeScript
| <tt>'''foo()'''</tt>
| <tt>'''foo = '''</tt>
| <tt>'''foo = ''' value</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|- valign="top"
| <tt>'''foo''' parameters</tt>
| <tt>'''foo = '''</tt>
| <tt>'''foo = (''' parameters ''') ''' value</tt>
|- valign="top"
| rowspan=2 | COBOL
| <tt>'''CALL''' '''"'''foo'''"''' «'''USING''' parameters» <ul> «exception-handling» </ul> «'''END-CALL'''»</tt><sup class="reference plainlinks nourlexpansion" id="ref_COBOL calling programs">[[#endnote_COBOL calling programs|[d]]]</sup>
| <tt>«'''IDENTIFICATION DIVISION.'''»<br/>
'''PROGRAM-ID.''' foo'''.'''<br/>
«other divisions...»<br/>
'''PROCEDURE DIVISION''' «'''USING''' parameters»'''.'''<br/>
<ul> instructions'''.'''</ul> </tt>
| rowspan=2 | <tt>«'''IDENTIFICATION DIVISION.'''»<br/>
'''PROGRAM-ID'''/'''FUNCTION-ID.''' foo'''.'''<br/>
«other divisions...»<br/>
'''DATA DIVISION.'''<br/>
«other sections...»<br/>
'''LINKAGE SECTION.'''<br/>
«parameter definitions...»<br/>
variable-to-return definition<br/>
«other sections...»<br/>
'''PROCEDURE DIVISION''' «'''USING''' parameters» '''RETURNING''' variable-to-return'''.'''<br/>
<ul> instructions'''.'''</ul></tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
|<tt>«'''FUNCTION'''» foo«(«parameters»)»</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}
<span class="citation wikicite" id="endnote_forward declaration"><b>[[#ref_forward declaration|^a]]</b></span> Pascal requires "<tt>forward;</tt>" for [[forward declaration]]s.<br/>
<span class="citation wikicite" id="endnote_root class and feature"><b>[[#ref_root class and feature|^b]]</b></span> Eiffel allows the specification of an application's root class and feature.<br/>
<span class="citation wikicite" id="endnote_Fortran arguments"><b>[[#ref_Fortran arguments|^c]]</b></span> In Fortran, function/subroutine parameters are called arguments (since <tt>PARAMETER</tt> is a language keyword); the <tt>CALL</tt> keyword is required for subroutines.<br/>
<span class="citation wikicite" id="endnote_COBOL calling programs"><b>[[#ref_COBOL calling programs|^d]]</b></span> Instead of using <tt>"foo"</tt>, a string variable may be used instead containing the same value.

== [[Type conversion]]s ==
Where ''string'' is a signed decimal number:
{| class="wikitable"
|-
! 
! string to integer
! string to long integer
! string to floating point
! integer to string
! floating point to string
|-
| [[Ada (programming language)|Ada]]
| <tt> '''Integer'Value ('''string_expression''')'''</tt>
| <tt> '''Long_Integer'Value ('''string_expression''')'''</tt>
| <tt> '''Float'Value ('''string_expression''')'''</tt>
| <tt> '''Integer'Image ('''integer_expression''')'''</tt>
| <tt> '''Float'Image ('''float_expression''')'''</tt>
|-
| rowspan=3 | [[ALGOL 68]] with general, and then specific formats
| colspan=5 align=center| With prior declarations and association of: <tt>'''string''' buf := "12345678.9012e34 "; '''file''' proxy; associate(proxy, buf);</tt>
|-
| <source lang="algol68" enclose="none">get(proxy, ivar);</source>
| <source lang="algol68" enclose="none">get(proxy, livar);</source>
| <source lang="algol68" enclose="none">get(proxy, rvar);</source>
| <source lang="algol68" enclose="none">put(proxy, ival);</source>
| <source lang="algol68" enclose="none">put(proxy, rval);</source>
|-
| <source lang="algol68" enclose="none">getf(proxy, ($g$, ivar));</source><br/>orv
<source lang="algol68" enclose="none">getf(proxy, ($dddd$, ivar));</source>
| <source lang="algol68" enclose="none">getf(proxy, ($g$, livar));</source><br/>or<br/>
<source lang="algol68" enclose="none">getf(proxy, ($8d$, livar));</source>
| <source lang="algol68" enclose="none">getf(proxy, ($g$, rvar));</source><br/>or<br/>
<source lang="algol68" enclose="none">getf(proxy, ($8d.4dE2d$, rvar));</source>
| <source lang="algol68" enclose="none">putf(proxy, ($g$, ival));</source><br/>or<br/>
<source lang="algol68" enclose="none">putf(proxy, ($4d$, ival));</source>
| <source lang="algol68" enclose="none">putf(proxy, ($g(width, places, exp)$, rval));</source><br/>or<br/>
<source lang="algol68" enclose="none">putf(proxy, ($8d.4dE2d$, rval));</source><br/>etc.
|-
| C (C99)
| <tt> integer '''= [[atoi]]('''string''');'''</tt>
| <tt> long '''= [[atol (programming)|atol]]('''string''');'''</tt>
| <tt> float '''= [[atof]]('''string''');'''</tt>
| <tt> '''[[sprintf]]('''string''', "%i", '''integer''');'''</tt>
| <tt> '''[[sprintf]]('''string''', "%f", '''float''');'''</tt>
|-
| Objective-C
| <tt> integer '''= ['''string''' intValue];'''</tt>
| <tt> long '''= ['''string''' longLongValue];'''</tt>
| <tt> float '''= ['''string''' doubleValue];'''</tt>
| <tt> string '''= [NSString stringWithFormat<wbr/>:@"%i", '''integer'''];'''</tt>
| <tt> string '''= [NSString stringWithFormat<wbr/>:@"%f", '''float'''];'''</tt>
|-
| C++ (STL)
| colspan=3| <tt>«'''std::'''»'''istringstream('''string''') >> '''number;</tt>
| colspan=2| <tt>«'''std::'''»'''ostringstream '''o''';''' o''' << '''number'''; '''string '''= '''o'''.str();'''</tt>
|-
| C++11
| <tt> integer '''= «'''std::'''»stoi('''string''');'''</tt>
| <tt> long '''= «'''std::'''»stol('''string''');'''</tt>
| <tt> float '''= «'''std::'''»stof('''string''');''' 
double '''= «'''std::'''»stod('''string''');''' </tt>
| colspan=2| <tt>string '''= «'''std::'''»to_string('''number''');'''</tt>
|-
| C#
| <tt> integer '''= int.Parse<wbr/>('''string''');'''</tt>
| <tt> long '''= long.Parse<wbr/>('''string''');'''</tt>
| <tt> float '''= float.Parse<wbr/>('''string''');''' or<br/> double '''= double.Parse<wbr/>('''string''');'''</tt>
| colspan=2| <tt>string '''= '''number'''<wbr/>.ToString();'''</tt>
|-
| D
| <tt> integer '''= std.conv.to!int<wbr/>('''string''')'''</tt>
| <tt> long '''= std.conv.to!long<wbr/>('''string''')'''</tt>
| <tt> float '''= std.conv.to!float<wbr/>('''string''')''' or<br/> double '''= std.conv.to!double<wbr/>('''string''')'''</tt>
| colspan=2| <tt> string '''= std.conv.to!string<wbr/>('''number''')'''</tt>
|-
| Java
| <tt> integer '''= Integer.parseInt<wbr/>('''string''');'''</tt>
| <tt> long''' = Long.parseLong<wbr/>('''string''');'''</tt>
| <tt> float''' = Float.parseFloat<wbr/>('''string''');''' or<br/> double '''= Double.parseDouble<wbr/>('''string''');'''</tt>
| <tt> string''' = Integer.toString<wbr/>('''integer''');''' or<br/> string''' = String.valueOf<wbr/>('''integer''');'''</tt>
| <tt> string''' = Float.toString<wbr/>('''float''');''' or<br/> string''' = Double.toString<wbr/>('''double''');'''</tt>
|-
| <tt> JavaScript<sup class="reference plainlinks nourlexpansion" id="ref_JavaScript's technicalities">[[#endnote_JavaScript's technicalities|[a]]]</sup></tt>
| colspan=2| <tt> integer '''= parseInt('''string''');'''</tt>
| <tt> float '''= parseFloat('''string''');''' or<br/> float''' = new Number ('''string''')''' or<br/> float''' = Number ('''string''')''' or<br/> float '''= +'''string</tt>
| colspan=2| <tt> string''' = '''number'''.toString ();''' or<br/> string '''= new String ('''number''');''' or<br/> string '''= String ('''number''');''' or<br/> string''' = '''number'''+"";'''</tt>
|-
| Go
| <tt> integer''',''' error '''= strconv.Atoi('''string''')''' or<br /> integer''',''' error '''= strconv.ParseInt<wbr/>('''string''', 10, 0)'''</tt>
| <tt> long''',''' error  '''= strconv.ParseInt<wbr/>('''string''', 10, 64)'''</tt>
| <tt> float''',''' error  '''= strconv.ParseFloat<wbr/>('''string''', 64)'''</tt>
| <tt> string '''= strconv.Itoa('''integer''')''' or<br/> string '''= strconv.FormatInt<wbr/>('''integer''', 10)''' or<br/> string '''= fmt.Sprint('''integer''')'''</tt>
| <tt> string '''= strconv.FormatFloat<wbr/>('''float''')''' or<br/> string '''= fmt.Sprint<wbr/>('''float''')'''</tt>
|-
| Common Lisp
| colspan=2| <tt>'''(setf''' integer '''(parse-integer '''string'''))'''</tt>
| <tt> '''(setf''' float '''(read-from-string '''string'''))'''</tt>
| colspan=2| <tt>'''(setf''' string '''(princ-to-string '''number'''))'''</tt>
|-
| Scheme
| colspan=3| <tt>'''(define''' number '''(string->number '''string'''))'''</tt>
| colspan=2| <tt>'''(define''' string '''(number->string '''number'''))'''</tt>
|-
| ISLISP
| colspan=2| <tt>'''(setf''' integer '''(convert '''string''' &lt;integer&gt;))'''</tt>
| <tt> '''(setf''' float '''(convert '''string''' &lt;float&gt;))'''</tt>
| colspan=2| <tt>'''(setf''' string '''(convert '''number''' &lt;string&gt;))'''</tt>
|-
| Pascal 
| <tt> integer ''':= StrToInt('''string''');'''</tt>
| 
| <tt> float ''':= StrToFloat('''string''');'''</tt>
| <tt> string ''':= IntToStr('''integer''');'''</tt>
| <tt> string ''':= FloatToStr('''float''');'''</tt>
|-
| Visual Basic
| rowspan=2| <tt>integer''' = CInt('''string''')'''</tt>
| rowspan=2| <tt>long''' = CLng('''string''')'''</tt>
| rowspan=2| <tt>float''' = CSng('''string''')''' or<br/> double''' = CDbl('''string''')'''</tt>
| <tt> rowspan=2 colspan=2|string''' = CStr('''number''')'''</tt>
|-
| Visual Basic .NET
|-
| Python
| <tt> integer''' = int('''string''')'''</tt>
| <tt> long''' = long('''string''')'''</tt>
| <tt> float''' = float('''string''')'''</tt>
| colspan=2| <tt>string''' = str('''number''')'''</tt>
|-
| S-Lang
| <tt> integer''' = [[atoi]]('''string''');'''</tt>
| <tt> long''' = [[atol (programming)|atol]]('''string''');'''</tt>
| <tt> float''' = [[atof]]('''string''');'''</tt>
| colspan=2| <tt>string''' = string('''number''');'''</tt>
|-
| Fortran
| colspan=3| <tt>'''READ('''string''','''format''') '''number</tt>
| colspan=2| <tt>'''WRITE('''string''','''format''') '''number</tt>
|-
| PHP
| colspan=2| <tt> integer '''= intval('''string''');''' or<br/> integer '''= (int)'''string''';'''</tt>
| <tt> float '''= floatval('''string''');''' or<br/> float '''= (float)'''string''';'''</tt>
| colspan=2| <tt> string '''= "'''number'''";''' or<br/> string '''= strval('''number''');''' or<br/> string '''= (string)'''number''';'''</tt>
|-
| Perl<sup class="reference plainlinks nourlexpansion" id="ref_Perl's technicalities">[[#endnote_Perl's technicalities|[b]]]</sup>
| colspan=3| <tt> number '''= 0 +''' string;</tt>
| colspan=2| <tt> string '''= "'''number'''";'''</tt>
|-
| Perl 6
| colspan=3| <tt> number '''= +'''string;</tt>
| colspan=2| <tt> string '''= ~'''number''';'''</tt>
|-
| Ruby
| colspan=2| <tt> integer '''=''' string'''.to_i''' or<br/>integer '''= Integer('''string''')'''</tt>
| <tt> float '''=''' string'''.to_f''' or<br/>float '''= Float('''string''')'''</tt>
| colspan=2| <tt> string '''=''' number'''.to_s'''</tt>
|-
| Scala
| <tt> integer '''=''' string'''.toInt'''</tt>
| <tt> long '''=''' string'''.toLong'''</tt>
| <tt> float '''=''' string'''.toFloat''' or<br/> double '''=''' string'''.toDouble'''</tt>
| colspan=2| <tt>string '''= '''number'''.toString'''</tt>
|-
| Windows PowerShell
| <tt> integer''' = [int]'''string</tt>
| <tt> long''' = [long]'''string</tt>
| <tt> float''' = [float]'''string</tt>
| colspan=2| <tt>string''' = [string]'''number''';''' or<br/>string''' = "'''number'''";''' or<br/>string''' = ('''number''').ToString()'''</tt>
|-
| OCaml
| <tt> '''let''' integer''' = int_<wbr/>of_string '''string</tt>
| 
| <tt> '''let''' float''' = float_<wbr/>of_string '''string</tt>
| <tt> '''let''' string''' = string_<wbr/>of_int '''integer</tt>
| <tt> '''let''' string''' = string_<wbr/>of_float '''float</tt>
|-
| F#
| <tt> '''let''' integer''' = int '''string</tt>
| <tt> '''let''' integer''' = int64 '''string</tt>
| <tt> '''let''' float''' = float '''string</tt>
| colspan=2| <tt> '''let''' string''' = string '''number</tt>
|-
| Standard ML
| <tt> '''val''' integer''' = Int<wbr/>.fromString '''string</tt>
| 
| <tt> '''val''' float''' = Real<wbr/>.fromString '''string</tt>
| <tt> '''val''' string''' = Int<wbr/>.toString '''integer</tt>
| <tt> '''val''' string''' = Real<wbr/>.toString '''float</tt>
|-
| Haskell (GHC)
| colspan=3| <tt> number '''= read '''string</tt>
| colspan=2| <tt> string '''= show '''number</tt>
|-
| COBOL
| colspan=3 | <code>'''MOVE''' «'''FUNCTION'''» '''NUMVAL('''string''')'''<sup class="reference plainlinks nourlexpansion" id="ref_COBOL's NUMVAL alternatives">[[#endnote_COBOL's NUMVAL alternatives|[c]]]</sup> '''TO''' number</code>
| colspan=2 | <code>'''MOVE''' number '''TO''' numeric-edited</code>
|-
|}
<span class="citation wikicite" id="endnote_JavaScript's technicalities"><b>[[#ref_JavaScript's technicalities|^a]]</b></span> JavaScript only uses floating point numbers so there are some technicalities.
<br/><span class="citation wikicite" id="endnote_Perl's technicalities"><b>[[#ref_Perl's technicalities|^b]]</b></span> Perl doesn't have separate types. Strings and numbers are interchangeable.
<br/><span class="citation wikicite" id="endnote_COBOL's NUMVAL alternatives"><b>[[#ref_COBOL's NUMVAL alternatives|^c]]</b></span> <code>NUMVAL-C</code> or <code>NUMVAL-F</code> may be used instead of <code>NUMVAL</code>.

== [[Standard streams|Standard stream I/O]] ==
{| class="wikitable"
|-
! rowspan=2| 
! read from
! colspan=2| write to
|-
! [[stdin]]
! [[stdout]]
! [[stderr]]
|-
| [[Ada (programming language)|Ada]]
| <tt>'''Get ('''x''')'''</tt>
| <tt>'''Put ('''x''')'''</tt>
| <tt>'''Put (Standard_Error, '''x''')'''</tt>
|-
| [[ALGOL 68]]
| <tt>'''readf(('''$format$''', '''x'''));''' or <br/> '''getf(stand in, ('''$format$''', '''x'''));'''</tt>
| <tt>'''[[printf]](('''$format$''', '''x'''));''' or <br/> '''putf(stand out, ('''$format$''', '''x'''));''' </tt>
| <tt>'''putf(stand error, ('''$format$''', '''x'''));'''<sup class="reference plainlinks nourlexpansion" id="ref_ALGOL Unformatted">[[#endnote_ALGOL Unformatted|[a]]]</sup></tt>
|-
| C (C99) 
| <tt>'''[[scanf]]('''format''', &'''x''');''' or <br/> '''[[fscanf]](stdin, '''format''', &'''x''');''' <sup class="reference plainlinks nourlexpansion" id="ref_more c input">[[#endnote_more c input|[b]]]</sup></tt>
| <tt>'''[[printf]]( '''format''', '''x''');''' or <br/> '''[[fprintf]](stdout, '''format''', '''x''');''' <sup class="reference plainlinks nourlexpansion" id="ref_more c output">[[#endnote_more c output|[c]]]</sup></tt>
| <tt>'''[[fprintf]](stderr, '''format''', '''x''' );'''<sup class="reference plainlinks nourlexpansion" id="ref_more c error output">[[#endnote_more c error output|[d]]]</sup></tt>
|-
| Objective-C
| <tt>data = '''[[NSFileHandle fileHandleWithStandardInput] readDataToEndOfFile];'''</tt>
| <tt>'''[[NSFileHandle fileHandleWithStandardOutput] writeData:'''data'''];'''</tt>
| <tt>'''[[NSFileHandle fileHandleWithStandardError] writeData:'''data'''];'''</tt>
|-
| C++
| <tt>[[iostream|«'''std::'''»'''cin''']] '''>>''' x''';''' or <br/> «'''std::'''»'''getline('''«'''std::'''»'''cin, '''str''');'''</tt>
| <tt>[[iostream|«'''std::'''»'''cout''']] '''<<''' x''';'''</tt>
| <tt>[[iostream|«'''std::'''»'''cerr''']] '''<<''' x''';''' or<br/> [[iostream|«'''std::'''»'''clog''']] '''<<''' x''';'''</tt>
|-
| C#
| <tt>x ''' = Console.Read();''' or <br/> x '''= Console.ReadLine();'''</tt>
| <tt>'''Console.Write('''«format''', '''»x''');''' or <br/> '''Console.WriteLine('''«format''', '''»x''');'''</tt>
| <tt>'''Console.Error<wbr/>.Write('''«format''', '''»x''');''' or <br/> '''Console.Error<wbr/>.WriteLine('''«format''', '''»x''');'''</tt>
|-
| D
| <tt>x = '''std.stdio.readln()'''</tt>
| <tt>'''std.stdio.write('''x''')''' or <br /> '''std.stdio.writeln('''x''')''' or <br /> '''std.stdio.writef('''format''', '''x''')''' or <br /> '''std.stdio.writefln('''format''', '''x''')'''</tt>
| <tt>'''stderr.write('''x''')''' or <br /> '''stderr.writeln('''x''')''' or <br /> '''std.stdio<wbr/>.writef(stderr, '''format''', '''x''')''' or <br /> '''std.stdio<wbr/>.writefln(stderr, '''format''', '''x''')'''</tt>
|-
| Java
| <tt>x '''= System.in.read();''' or <br/> x '''= new Scanner(System.in)<wbr/>.nextInt();''' or <br/> x '''= new Scanner(System.in)<wbr/>.nextLine();'''</tt>
| <tt>'''System.out.print('''x''');''' or <br/> '''System.out.[[printf]]('''format''', '''x''');''' or <br/> '''System.out.println('''x''');'''</tt>
| <tt>'''System.err.print('''x''');''' or <br/> '''System.err.[[printf]]('''format''', '''x''');''' or <br/> '''System.err.println('''x''');'''</tt>
|-
| Go
| <tt>'''fmt.Scan(&'''x''')''' or <br/> '''fmt.[[Scanf]]('''format''', &'''x''')''' or <br/> x = '''bufio.NewReader(os.Stdin)<wbr/>.ReadString('\n')'''</tt>
| <tt>'''fmt.Println('''x''')''' or<br/> '''fmt.[[Printf]]('''format''', '''x''')'''</tt>
| <tt>'''fmt.Fprintln(os.Stderr, '''x''')''' or<br/> '''fmt.[[Fprintf]](os.Stderr, '''format''', '''x''')'''</tt>
|-
| JavaScript<br/><small>[[Client-side JavaScript|Web Browser implementation]]</small>
| 
| <tt>'''document.write('''x''')'''</tt>
| 
|-
| JavaScript<br/><small>[[Active Server Pages]]</small>
| 
| <tt>'''Response.Write('''x''')'''</tt>
| 
|-
| JavaScript<br/><small>[[Windows Script Host]]</small>
| <tt>x '''= WScript.StdIn.Read('''chars''')''' or<br/> x '''= WScript.StdIn.ReadLine()'''</tt>
| <tt>'''WScript.Echo('''x''')''' or<br/> '''WScript.StdOut.Write('''x''')''' or<br/> '''WScript.StdOut.WriteLine('''x''')'''</tt>
| <tt>'''WScript.StdErr.Write('''x''')''' or<br/> '''WScript.StdErr.WriteLine('''x''')'''</tt>
|-
| Common Lisp
| <tt>'''(setf''' x '''(read-line))'''</tt>
| <tt>'''(princ''' x''')''' or<br/> '''(format t '''format x''')'''</tt>
| <tt>'''(princ''' x''' *error-output*)''' or<br/> '''(format *error-output* '''format x''')'''</tt>
|-
| Scheme (R<sup>6</sup>RS)
| <tt>'''(define''' x''' (read-line))'''</tt>
| <tt>'''(display''' x''')''' or<br/> '''(format #t '''format x''')'''</tt>
| <tt>'''(display''' x''' (current-error-port))''' or<br/> '''(format (current-error-port) '''format x''')'''</tt>
|-
| ISLISP
| <tt>'''(setf''' x '''(read-line))'''</tt>
| <tt>'''(format (standard-output) '''format x''')'''</tt>
| <tt>'''(format (error-output) '''format x''')'''</tt>
|-
| Pascal
| <tt>'''read('''x''');''' or <br/> '''readln('''x''');'''</tt>
| <tt>'''write('''x''');''' or <br/> '''writeln('''x''');'''</tt>
| rowspan=2 style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Visual Basic
| <tt>'''Input'''« prompt''','''»''' '''x'''</tt>
| <tt>'''Print '''x or <br/> '''? '''x'''</tt>
|-
| Visual Basic .NET
| <tt>x ''' = Console.Read()''' or <br/> x '''= Console.ReadLine()'''</tt>
| <tt>'''Console.Write('''«format''', '''»x''')''' or <br/> '''Console.WriteLine('''«format''', '''»x''')'''</tt>
| <tt>'''Console.Error<wbr/>.Write('''«format''', '''»x''')''' or <br/> '''Console.Error<wbr/>.WriteLine('''«format''', '''»x''')'''</tt>
|-
| Python 2.x
| <tt>x '''= raw_input('''«prompt»''')'''</tt>
| <tt>'''print''' x or <br/> '''sys.stdout.write('''x''')'''</tt>
| <tt>'''print >> sys.stderr,''' x or <br/> '''sys.stderr.write('''x''')'''</tt>
|-
| Python 3.x
| <tt>x '''= input('''«prompt»''')'''</tt>
| <tt>'''print('''x«''', end=""'''»''')'''</tt>
| <tt>'''print('''x«''', end=""'''»''', file=sys.stderr)'''</tt>
|-
| S-Lang
| <tt>'''[[fgets]] (&'''x''', stdin)'''</tt>
| <tt>'''[[fputs]] ('''x''', stdout)'''</tt>
| <tt>'''[[fputs]] ('''x''', stderr)'''</tt>
|-
| Fortran
| <tt>'''READ(*,'''format''') '''variable names''' or <br/> READ(INPUT_UNIT,'''format''') '''variable names'''<sup class="reference plainlinks nourlexpansion" id="ref_Fortran standard units">[[#endnote_Fortran standard units|[e]]]</sup></tt>
| <tt>'''WRITE(*,'''format''') '''expressions''' or <br/>WRITE(OUTPUT_UNIT,'''format''') '''expressions'''<sup class="reference plainlinks nourlexpansion" id="ref_Fortran standard units">[[#endnote_Fortran standard units|[e]]]</sup></tt>
| <tt>'''WRITE(ERROR_UNIT,'''format''') '''expressions<sup class="reference plainlinks nourlexpansion" id="ref_Fortran standard units">[[#endnote_Fortran standard units|[e]]]</sup></tt>
|-
| Forth
| <tt>buffer length''' ACCEPT''' ( # chars read ) <br/>'''KEY''' ( char )</tt>
| <tt>buffer length''' TYPE'''<br/>char''' EMIT'''</tt>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| PHP
| <tt>$x '''= [[fgets]](STDIN);''' or <br/> $x '''= [[fscanf]](STDIN, '''format''');'''</tt>
| <tt>'''print '''x''';''' or <br/> '''[[echo (command)|echo]] '''x''';''' or <br/> '''[[printf]]('''format''', '''x''');'''</tt>
| <tt>'''[[fprintf]](STDERR, '''format''', '''x''');'''</tt>
|-
| Perl
| <tt>$x '''= <>;''' or <br/> $x '''= <STDIN>;'''</tt>
| <tt>'''print '''x''';''' or <br/> '''[[printf]] '''format''', '''x''';'''</tt>
| <tt>'''print STDERR '''x''';''' or <br/> '''[[printf]] STDERR '''format''', '''x''';'''</tt>
|-
| Perl 6
| <tt>$x '''= $*IN.get;'''</tt>
| <tt>x'''.print''' or<br/> x'''.say'''</tt>
| <tt>x'''.note''' or<br/> '''$*ERR.print('''x''')''' or<br/> '''$*ERR.say('''x''')'''</tt>
|-
| Ruby
| <tt>x '''= gets'''</tt>
| <tt>'''puts''' x or<br/> '''[[printf]]('''format''', '''x''')'''</tt>
| <tt>'''$stderr.puts('''x''')''' or<br/> '''$stderr.[[printf]]('''format''', '''x''')'''</tt>
|-
| Windows PowerShell
| <tt>$x '''= Read-Host'''««''' -Prompt'''» text»''';''' or <br/> $x '''= [Console]::Read();''' or <br/> $x '''= [Console]::ReadLine()'''</tt>
| <tt>x''';''' or <br/> '''Write-Output '''x''';''' or <br/> '''echo '''x</tt>
| <tt>'''Write-Error '''x</tt>
|-
| OCaml
| <tt>'''let''' x '''= read_int ()''' or <br/> '''let''' str '''= read_line ()''' or <br/> '''Scanf.[[scanf]]''' format '''(fun '''x ...'''   '''...''')'''</tt>
| <tt>'''print_int''' x or <br/> '''print_endline''' str or <br/> '''Printf.[[printf]]''' format x ...</tt>
| <tt>'''prerr_int''' x or <br/> '''prerr_endline''' str or <br/> '''Printf.[[fprintf|eprintf]]''' format x ...</tt>
|-
| F#
| <tt>'''let''' x '''= System.Console<wbr/>.ReadLine()'''</tt>
| <tt>'''[[printf]]''' format x ... or <br/> '''[[printf]]n''' format x ...</tt>
| <tt>'''[[fprintf|eprintf]]''' format x ... or <br/>'''[[fprintf|eprintf]]n''' format x ...</tt>
|-
| Standard ML
| <tt>'''val''' str '''= TextIO.inputLIne TextIO.stdIn'''</tt>
| <tt>'''print''' str</tt>
| <tt>'''TextIO.output (TextIO.stdErr, '''str''')'''</tt>
|-
| Haskell (GHC)
| <tt>x '''<- readLn''' or <br/> str ''' getLine'''</tt>
| <tt>'''print '''x or <br/> '''putStrLn''' str</tt>
| <tt>'''hPrint stderr '''x or <br/> '''hPutStrLn stderr''' str</tt>
|-
| COBOL
| <code>'''ACCEPT''' x</code>
| <code>'''DISPLAY''' x</code>
|
|-
|}
<br><span class="citation wikicite" id="endnote_ALGOL Unformatted"><b>[[#ref_ALGOL Unformatted|^a]]</b></span> Algol 68 additionally as the "unformatted" [[transput]] routines: <tt>''read'', ''write'', ''get''</tt> and <tt>''put''</tt>.
<br><span class="citation wikicite" id="endnote_more c input"><b>[[#ref_more c input|^b]]</b></span> <tt>'''[[gets()|gets]](x)'''</tt> and <tt>'''[[fgets]](x,''' length''', stdin)'''</tt> read unformatted text from stdin. Use of gets is not recommended.
<br/><span class="citation wikicite" id="endnote_more c input"><b>[[#ref_more c input|^c]]</b></span> <tt>'''[[puts (C)|puts]](x)'''</tt> and <tt>'''[[fputs]](x, stdout)'''</tt> write unformatted text to stdout.
<br/><span class="citation wikicite" id="endnote_more c error output"><b>[[#ref_more c error output|^d]]</b></span> <tt>'''fputs(x, stderr)'''</tt> writes unformatted text to stderr
<br/><span class="citation wikicite" id="endnote_Fortran standard units"><b>[[#ref_Fortran standard units|^e]]</b></span> <tt>'''INPUT_UNIT''', '''OUTPUT_UNIT''', '''ERROR_UNIT'''</tt> are defined in the <tt>ISO_FORTRAN_ENV</tt> module.

== Reading [[command-line argument]]s ==
{| class="wikitable"
|-
! 
! Argument values
! Argument counts
! Program name / Script name
|-
| [[Ada (programming language)|Ada]]
| <tt>'''Argument ('''n''')'''</tt>
| <tt>'''Argument_Count'''</tt>
| <tt>'''Command_Name'''</tt>
|-
| C (C99) 
| rowspan=3| <tt>'''argv['''n''']'''</tt>
| rowspan=3| <tt>'''argc'''</tt>
| rowspan=3| first argument
|-
| Objective-C
|-
| C++
|-
| C#
| rowspan=3| <tt>'''args['''n''']'''</tt>
| <tt>'''args.Length'''</tt>
| <tt>'''Assembly.GetEntryAssembly()<wbr/>.Location;'''</tt>
|-
| Java
| rowspan=2| <tt>'''args.length'''</tt>
|  
|-
| D
| first argument
|-
| JavaScript <br/><small>[[Windows Script Host]] implementation</small>
| <tt>'''WScript.Arguments('''n''')'''</tt>
| <tt>'''WScript.Arguments.length'''</tt>
| <tt>'''WScript.ScriptName''' or '''WScript.ScriptFullName'''</tt>
|-
| Go
| <tt>'''os.Args['''n''']'''</tt>
| <tt>'''len(os.Args)'''</tt> 
| first argument
|-
| Common Lisp
| '''''?'''''
| '''''?'''''
| '''''?'''''
|-
| Scheme (R<sup>6</sup>RS)
| <tt>'''(list-ref (command-line) '''n''')'''</tt>
| <tt>'''(length (command-line))'''</tt>
| first argument
|-
| ISLISP
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Pascal
| <tt>'''ParamStr('''n''')'''</tt>
| <tt>'''ParamCount'''</tt>
| first argument
|-
| Visual Basic
| <tt>'''Command'''</tt><sup class="reference plainlinks nourlexpansion" id="ref_unseparated">[[#endnote_unseparated|[a]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| <tt>'''App.Path'''</tt>
|-
| Visual Basic .NET
| <tt>'''CmdArgs('''n''')'''</tt>
| <tt>'''CmdArgs.Length'''</tt>
| <tt>'''[Assembly].GetEntryAssembly().Location'''</tt>
|-
| Python
| <tt>'''sys.argv['''n''']'''</tt>
| <tt>'''len(sys.argv)'''</tt>
| first argument
|-
| S-Lang
| <tt>'''__argv['''n''']'''</tt>
| <tt>'''__argc'''</tt>
| first argument
|-
| Fortran
| <tt>'''DO '''i''' = '''1''','''argc''' <ul> CALL GET_COMMAND_ARGUMENT ('''i''','''argv(i)''') </ul> ENDDO'''</tt>
| <tt>argc''' = COMMAND_ARGUMENT_COUNT ()'''</tt>
| <tt>'''CALL GET_COMMAND_ARGUMENT ('''0''','''progname''')'''</tt>
|-
| PHP
| <tt>'''$argv['''n''']'''</tt>
| <tt>'''$argc'''</tt>
| first argument
|-
| Bash shell
| <tt>'''$'''n ('''$1''', '''$2''', '''$3''', ...)</tt><br/><tt>'''$@''' (all arguments)</tt>
| <tt>'''$#'''</tt>
| <tt>'''$0'''</tt>
|-
| Perl
| <tt>'''$ARGV['''n''']'''</tt>
| <tt>'''scalar(@ARGV)'''</tt>
| <tt>'''$0'''</tt>
|-
| Perl 6
| <tt>'''@*ARGS['''n''']'''</tt>
| <tt>'''@*ARGS.elems'''</tt>
| <tt>'''$PROGRAM_NAME'''</tt>
|-
| Ruby
| <tt>'''ARGV['''n''']'''</tt>
| <tt>'''ARGV.size'''</tt>
| <tt>'''$0'''</tt>
|-
| Windows PowerShell
| <tt>'''$args['''n''']'''</tt>
| <tt>'''$args.Length'''</tt>
| <tt>'''$MyInvocation.MyCommand<wbr/>.Name'''</tt>
|-
| OCaml
| <tt>'''Sys.argv.('''n''')'''</tt>
| <tt>'''Array.length Sys.argv'''</tt>
| first argument
|-
| F#
| <tt>'''args.['''n''']'''</tt>
| <tt>'''args.Length'''</tt>
| <tt>'''Assembly.GetEntryAssembly()<wbr/>.Location'''</tt>
|-
| Standard ML
| <tt>'''List.nth (CommandLine<wbr/>.arguments (), '''n''')'''</tt>
| <tt>'''length (CommandLine<wbr/>.arguments ())'''</tt>
| <tt>'''CommandLine.name ()'''</tt>
|-
| Haskell (GHC)
| <tt>'''do { args  System.getArgs; return args !! '''n''' }'''</tt>
| <code   ><syntaxhighlight lang="haskell" enclose="none">do { args <- System.getArgs; return length args </syntaxhighlight></code>}
| <tt>'''System.getProgName'''</tt>
|-
| COBOL
| colspan=2 | <sup class="reference plainlinks nourlexpansion" id="ref_COBOL Arguments">[[#endnote_COBOL Arguments|[b]]]</sup>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|}
* <span class="citation wikicite" id="endnote_unseparated"><b>[[#ref_unseparated|^a]]</b></span>The command-line arguments in Visual Basic are not separated. A split function '''Split('''string''')''' is required for separating them.
* <span class="citation wikicite" id="endnote_COBOL Arguments"><b>[[#ref_COBOL Arguments|^b]]</b></span> The COBOL standard does not include any way to access command-line arguments but common compiler-extensions for accessing them include defining parameters for the main program or using <code>ACCEPT</code> statements.

== Execution of commands ==

{| class="wikitable"
!
!Shell command
!Execute program
![[exec (operating system)|Replace current program with new executed program]]
|-
| [[Ada (programming language)|Ada]]
| colspan=3 align="center"| Not part of the language standard. Commonly done by compiler provided packages or by interfacing to C or Posix. 
|-
| C
| rowspan=3| <tt>'''[[system (C standard library)|system]]("'''command'''");'''</tt>
|
| rowspan=2| <tt>'''[[Exec (operating system)|execl]]('''path''',''' args''');''' or<br/> '''[[Exec (operating system)|execv]]('''path''',''' arglist''');'''</tt>
|-
| C++
| 
|-
| Objective-C
| <tt>'''[NSTask launchedTaskWithLaunchPath:(NSString *)'''path''' arguments:(NSArray *)'''arguments'''];'''</tt>
| 
|-
| C#
|
| rowspan=2| <tt>'''System.Diagnostics<wbr/>.Process.Start('''path''',''' argstring''');'''</tt>
|
|-
| F#
|
|
|-
| Go
|
| <tt>'''exec.Run('''path''',''' argv''',''' envv''',''' dir''', exec.DevNull, exec.DevNull, exec.DevNull)'''</tt>
| <tt>'''os.Exec('''path''',''' argv''',''' envv''')'''</tt>
|-
| Visual Basic
| <tt>'''Interaction.Shell('''command «''',&nbsp;'''WindowStyle» «''',&nbsp;'''isWaitOnReturn»''')'''</tt>
|
|
|-
| Visual Basic .NET
| <tt>'''Microsoft.VisualBasic<wbr/>.Interaction.Shell('''command «''',&nbsp;'''WindowStyle» «''',&nbsp;'''isWaitOnReturn»''')'''</tt>
| <tt>'''System.Diagnostics<wbr/>.Process.Start('''path''',''' argstring''')'''</tt>
|
|-
| D
| <tt>'''std.process.system("'''command'''");'''</tt>
| 
| <tt>'''std.process.execv('''path''',''' arglist''');'''</tt>
|-
| Java
|
| <tt>'''Runtime.exec('''command''');''' or<br/> '''new ProcessBuilder('''command''').start();'''</tt>
|
|-
| JavaScript <br/> <small>[[Windows Script Host]] implementation</small>
| <tt>'''WScript.CreateObject ("WScript.Shell").Run('''command «''',&nbsp;'''WindowStyle» «''',&nbsp;'''isWaitOnReturn»''');'''</tt>
| <tt>'''WshShell.Exec(command)'''</tt>
|
|-
| Common Lisp
| <tt>'''(shell '''command''')'''</tt>
|
|
|-
| Scheme
| <tt>'''(system '''command''')'''</tt>
|
| 
|-
| ISLISP
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
| style="background: #ececec; color: grey; vertical-align: middle; text-align: center; " class="table-na" | <small>N/A</small>
|-
| Pascal
| <tt>'''system('''command''');'''</tt>
|
| 
|-
| OCaml
| <tt>'''Sys.command '''command, '''Unix.open_process_full''' command env (stdout, stdin, stderr),...</tt>
| <tt>'''Unix.create_process''' prog args new_stdin new_stdout new_stderr, ...</tt>
| <tt>'''Unix.execv''' prog args or <br/> '''Unix.execve''' prog args env</tt>
|-
| Standard ML
| <tt>'''OS.Process.system '''command</tt>
| <tt>'''Unix.execute ('''path''', '''args''')'''</tt>
| <tt>'''Posix.Process.exec ('''path''', '''args''')'''</tt>
|-
| Haskell (GHC)
| <tt>'''System.system '''command</tt>
| <tt>'''System.Process<wbr/>.runProcess '''path''' '''args''' ...</tt>
| <tt>'''Posix.Process<wbr/>.executeFile '''path''' True '''args''' ...</tt>
|-
| Perl
| <tt>'''system('''command''')''' or <br/>$output '''= `'''command'''`''' or<br/>$output '''= qx('''command''')'''</tt> 
|
| <tt>'''exec('''path''',''' args''')'''</tt>
|-
| Ruby
| <tt>'''system('''command''')''' or <br/> output '''= `'''command'''`'''</tt>
|
| <tt>'''exec('''path''',''' args''')'''</tt>
|-
| PHP
| <tt>'''system('''command''')''' or <br/> $output '''= `'''command'''`''' or <br/> '''exec('''command''')''' or <br/> '''passthru('''command''')'''</tt>
|
|
|-
| Python
| <tt>'''os.system('''command''')''' or <br/> '''subprocess.Popen('''command''')''' </tt>
|
| <tt>'''os.execv('''path''',''' args''')'''</tt>
|-
| S-Lang
| <tt>'''system('''command''')'''</tt>
|
|
|-
| Fortran
| <tt>'''CALL SYSTEM ('''command''', '''status''') or <br/> '''status''' = SYSTEM ('''command''')'''<sup class="reference plainlinks nourlexpansion" id="ref_Fortran extension">[[#endnote_Fortran extension|[a]]]</sup></tt>
|
|
|-
| Windows PowerShell
| <tt>'''[Diagnostics.Process]::Start('''command''')'''</tt>
| <tt>«'''Invoke-Item''' »program arg1 arg2 …</tt>
|
|-
| Bash shell
| <tt>output'''=`'''command'''`'''</tt> or
<tt>output'''=$('''command''')'''</tt>
| <tt>program arg1 arg2 …</tt>
| 
|}
<span class="citation wikicite" id="endnote_Fortran extension"><b>[[#ref_Fortran extension|^a]]</b></span> Compiler-dependent extension.

== References ==
<div class="reflist " style=" list-style-type: decimal;">
<references group=""></references></div>



[[Category:Programming constructs]]
[[Category:Programming language comparisons]]
