<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" role="presentation"><tr><td class="mbox-image"><div style="width:52px;">[[File:Question book-new.svg|50x40px|alt=]]</div></td><td class="mbox-text"><span class="mbox-text-span">This article '''needs additional citations for [[Wikipedia:Verifiability|verification]]'''.<span class="hide-when-compact"> Please help [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit improve this article] by [[Help:Introduction to referencing/1|adding citations to reliable sources]]. Unsourced material may be challenged and removed.</span>  <small>''(December 2010)''</small><span class="hide-when-compact"></span></span></td></tr></table>
<table class="vertical-navbox nowraplinks " cellspacing="5" cellpadding="0" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;"><tr><th class="" style=";padding:0.2em 0.4em 0.2em;;font-size:145%;line-height:1.2em;">[[Programming paradigm]]s</th>
      </tr><tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
* [[Action language|Action]]
* [[Agent-oriented programming|Agent-oriented]]
* [[Aspect-oriented programming|Aspect-oriented]]
* [[Automata-based programming|Automata-based]]
* [[Concurrent computing]]
** [[Relativistic programming]]
* [[Data-driven programming|Data-driven]]
* [[Declarative programming|Declarative]] (contrast: [[Imperative programming|Imperative]])
** [[Constraint programming|Constraint]]
** [[Dataflow programming|Dataflow]]
*** [[Flow-based programming|Flow-based]]
*** Cell-oriented ([[spreadsheet]]s)
*** [[Reactive programming|Reactive]]
** [[Functional programming|Functional]]
** [[Logic programming|Logic]]
*** [[Abductive logic programming|Abductive logic]]
*** [[Answer set programming|Answer set]]
*** [[Constraint logic programming|Constraint logic]]
*** [[Functional logic programming|Functional logic]]
*** [[Inductive logic programming|Inductive logic]]
* [[End-user development|End-user programming]]
* [[Event-driven programming|Event-driven]]
** [[Service-oriented architecture|Service-oriented]]
** [[Time-driven programming|Time-driven]]
* [[Expression-oriented_programming_language|Expression-oriented]]
* [[Feature-oriented programming|Feature-oriented]]
* [[Function-level programming|Function-level]] (contrast: [[Value-level programming|Value-level]])
* [[Generic programming|Generic]]
* [[Imperative programming|Imperative]] (contrast: [[Declarative programming|Declarative]])
** [[Procedural programming|Procedural]]
* [[Language-oriented programming|Language-oriented]]
** [[Natural language programming]]
** [[Service-oriented modeling#Discipline-specific modeling|Discipline-specific]]
** [[Domain-specific language|Domain-specific]]
** [[Grammar-oriented programming|Grammar-oriented]]
*** [[Dialecting]]
** [[Intentional programming|Intentional]]
* [[Metaprogramming]]
** [[Automatic programming|Automatic]]
** [[Reflection (computer programming)|Reflective]]
*** [[Attribute-oriented programming|Attribute-oriented]]
** [[Homoiconicity|Homoiconic]]
** [[Template metaprogramming|Template]]
*** [[Policy-based design|Policy-based]]
* [[Non-structured programming|Non-structured]] (contrast: [[Structured programming|Structured]])
** [[Array programming|Array]]
* [[Nondeterministic programming|Nondeterministic]]
* [[Parallel computing]]
** [[Process-oriented programming|Process-oriented]]
* [[Pointless programming|Point-free style]]
** [[Concatenative programming language|Concatenative]]
* [[Semantic-oriented programming|Semantic]]
* [[Structured programming|Structured]] (contrast: [[Non-structured programming|Non-structured]])
** [[Block (programming)|Block-structured]]
** [[Modular programming|Modular]] (contrast: [[Monolithic application|Monolithic]])
** [[Object-oriented programming|Object-oriented (OOP)]]
*** By [[separation of concerns]]:
**** [[Aspect-oriented programming|Aspect-oriented]]
**** [[Role-oriented programming|Role-oriented]]
**** [[Subject-oriented programming|Subject-oriented]]
*** [[Class-based programming|Class-based]]
*** [[Prototype-based programming|Prototype-based]]
** [[Recursion (computer science)|Recursive]]
* [[Value-level programming|Value-level]] (contrast: [[Function-level programming|Function-level]])
* [[Probabilistic relational programming language|Probabilistic]]
* [[Concept programming|Concept]]</td>
</tr><tr><td style="text-align:right;font-size:115%;"><div class="plainlinks hlist navbar mini" style=""><ul><li class="nv-view">[[Template:Programming paradigms|<span title="View this template" style="">v</span>]]</li><li class="nv-talk">[[Template talk:Programming paradigms|<span title="Discuss this template" style="">t</span>]]</li><li class="nv-edit">[//en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&action=edit <span title="Edit this template" style="">e</span>]</li></ul></div></td></tr>
</table>
This article attempts to set out the various similarities and differences between the various [[programming paradigm]]s as a summary in both graphical and tabular format with links to the separate discussions concerning these similarities and differences in extant Wikipedia articles.

== Main paradigm approaches ==
<table class="metadata plainlinks ambox ambox-content ambox-Original_research" role="presentation"><tr><td class="mbox-image"><div style="width:52px;">[[File:Ambox content.png|40x40px|link=|alt=]]</div></td><td class="mbox-text"><span class="mbox-text-span">This section  '''possibly contains [[Wikipedia:No original research|original research]]'''.<span class="hide-when-compact"> Please [//en.wikipedia.org/w/index.php?title=Special:ExpandTemplates&action=edit improve it] by [[WP:Verifiability|verifying]] the claims made and adding [[Wikipedia:Citing sources#Inline citations|inline citations]]. Statements consisting only of original research may be removed.</span>  <small>''(January 2010)''</small><span class="hide-when-compact"></span></span></td></tr></table>
The following are considered<sup class="noprint Inline-Template" style="white-space:nowrap;">&#91;<i>[[Wikipedia:Manual of Style/Words to watch#Unsupported attributions|<span title="The material near this tag may use weasel words or too-vague attribution. (January 2010)">by whom?</span>]]</i>&#93;</sup> the main programming paradigms. There is inevitably some overlap in these paradigms but the main features or identifiable differences are summarized in the following table:
 
* [[Imperative programming]] – defines [[computation]] as [[statement (programming)|statements]] that change a program [[state (computer science)|state]]
* [[Procedural programming]], [[structured programming]] – specifies the steps the program must take to reach the desired state.
* [[Declarative programming]] – defines computation logic without defining its [[control flow]].
* [[Functional programming]] – treats computation as the evaluation of [[function (mathematics)|mathematical functions]] and avoids [[program state|state]] and [[immutable object|mutable]] data
* [[Object-oriented programming]] (OOP) – organizes programs as ''[[object (computer science)|objects]]'': [[data structure]]s consisting of [[field (computer science)|datafields]] and [[method (computer science)|methods]] together with their interactions.
* [[Event-driven programming]] – the [[program flow|flow of the program]] is determined by [[event (computing)|events]], such as [[sensor]] outputs or user actions ([[computer mouse|mouse]] clicks, key presses) or [[message passing|messages]] from other programs or [[thread (computer science)|threads]].
* [[Automata-based programming]] – a program, or part, is treated as a model of a finite state machine or any other formal automata.

None of the main programming paradigms have a precise, globally unanimous definition, let alone an official international standard. Nor is there any agreement on which paradigm constitutes the best approach to developing software. The subroutines that actually implement OOP methods might be ultimately coded in an imperative, functional or procedural style that might, or might not, directly alter [[state (computer science)|state]] on behalf of the invoking program.

{| class="wikitable sortable"
|- 
! [[programming paradigm|Paradigm]]
! Description 
! Main characteristics
! Related paradigm(s)	
! Critics
! Examples
|-
! [[imperative programming|Imperative]]
| Computation as [[statement (programming)|statements]] that ''directly'' change a program [[state (computer science)|state]] ([[field (computer science)|datafields]]) 
| Direct [[assignment (computer science)|assignments]], common [[data structure]]s, [[global variable]]s
| 
| [[Edsger W. Dijkstra]], [[Michael A. Jackson]] 
| [[C (programming language)|C]], [[C++]], [[Java (programming language)|Java]], [[PHP]], [[Python (programming language)|Python]]
|-
! [[structured programming|Structured]]
| A style of [[imperative programming]] with more logical program structure
| [[Structogram]]s, [[indent style|indentation]], either no, or limited use of, [[goto]] statements
| Imperative
| 
| [[C (programming language)|C]], [[C++]], [[Java (programming language)|Java]]
|-
! [[procedural programming|Procedural]]
| Derived from structured programming, based on the concept of [[modular programming]] or the ''procedure call''
| [[Local variable]]s, sequence, selection, [[iteration]], and [[modular programming|modularization]]
| Structured, imperative
| 
| [[C (programming language)|C]], [[C++]], [[Lisp (programming language)|Lisp]], [[PHP]], [[Python (programming language)|Python]]
|- 
! [[functional programming|Functional]]
| Treats [[computation]] as the evaluation of [[function (mathematics)|mathematical functions]] avoiding [[program state|state]] and [[immutable object|mutable]] data
| [[Lambda calculus]], [[compositionality]], [[formula]], [[recursion (computer science)|recursion]], [[referential transparency (computer science)|referential transparency]], no [[side effect (computer science)|side effects]]
| 
|
| [[Erlang (programming language)|Erlang]], [[Haskell (programming language)|Haskell]], [[Lisp (programming language)|Lisp]], [[Clojure]], [[Scala (programming language)|Scala]], [[F Sharp (programming language)|F#]]
|-
! [[event-driven programming|Event-driven]] including [[time-driven programming|time driven]]
| [[Program flow]] is determined mainly by [[event (computing)|events]], such as [[mouse click]]s or interrupts including timer
| [[Main loop]], event handlers, [[asynchronous programming|asynchronous processes]]
| Procedural, [[dataflow]]
| 
|[[ActionScript]]
|- 
! [[object-oriented programming|Object-oriented]]
| Treats [[Field (computer science)|datafields]] as ''objects'' manipulated through pre-defined [[method (computer science)|methods]] only
| [[object (computer science)|Objects]], methods, [[message passing]], [[information hiding]], [[data abstraction]], [[encapsulation (computer science)|encapsulation]], [[polymorphism in object-oriented programming|polymorphism]], [[inheritance (computer science)|inheritance]], [[serialization]]-marshalling
|
| [[object-oriented programming#Criticism|See here]] and
| [[Common Lisp (programming language)|Common Lisp]], [[C++]], [[C sharp (programming language)|C#]], [[Eiffel (programming language)|Eiffel]], [[Java (programming language)|Java]], [[PHP]], [[Python (programming language)|Python]], [[Ruby (programming language)|Ruby]], [[Scala (programming language)|Scala]]
|- 
! [[declarative programming|Declarative]]
| Defines computation logic without defining its detailed [[control flow]]
| [[4GL]]s, [[spreadsheet]]s, [[report program generator]]s
| 
| 
| [[SQL]], [[regular expressions]], [[Cascading Style Sheets|CSS]]
|- 
! [[Automata-based programming]] 
| Treats programs as a model of a [[finite state machine]] or any other formal automata
| [[enumeration|State enumeration]], [[control variable]], [[state (computer science)|state]] changes, [[isomorphism]], [[state transition table]]
| Imperative, event-driven
| 
| 
|- class="sortbottom"
! [[programming paradigm|Paradigm]]
! Description 
! Main characteristics
! Related paradigm(s)
! Critics?
! Examples
|}

== Differences in terminology ==
Despite multiple (types of) programming [[paradigm]]s existing in parallel (with sometimes apparently conflicting definitions), many of the underlying ''[[essence|fundamental components]]'' remain more or less the same ([[constant (programming)|constants]], [[variable (programming)|variables]], [[field (computer science)|datafields]], [[subroutine]]s, calls etc.) and must somehow therefore inevitably be incorporated into each separate paradigm with equally similar attributes or functions. The table above is not intended as a guide to precise similarities, but more an index of where to look for more information - based on the different naming of these entities - within each paradigm. Non-standardized implementations of each paradigm in numerous [[programming language]]s further complicate the overall picture, especially those languages that support [[multi-paradigm programming language|multiple paradigms]], each with its own [[jargon]].
{| align="center" style="border-collapse:collapse; border-style:none; background-color:transparent;" class="cquote2"
| width="20" valign="top" style="color:#B2B7F2;font-size:40px;font-family:serif;font-weight:bold;text-align:left;padding:10px 10px;" | “
| valign="top" style="padding:4px 10px;" | "You can know the name of a bird in all the languages of the world, but when you're finished, you'll know absolutely nothing whatever about the bird... So let's look at the bird and see what it's doing-- that's what counts. I learned very early the difference between knowing the name of something and knowing something.
| width="20" valign="bottom" style="color:#B2B7F2;font-size:40px;font-family:serif;font-weight:bold;text-align:right;padding:10px 10px;" | ”
|-
| &nbsp;
| valign="top" |<div style="line-height:1em;text-align: right"><cite style="font-style:normal;">&mdash; [[Richard Feynman]]</cite></div>
|}

== Language support ==
<div class="rellink relarticle mainarticle">Main article: [[Syntactic sugar|Syntactic sugar]]</div>
[[Syntactic sugar]] is the ''sweetening'' of program functionality by introducing language features that facilitate particular usage, even if the end result could be achieved without them. One example of syntactic sugar may arguably be classes in [[C++]] (and in [[Java (programming language)|Java]], [[C Sharp (programming language)|C#]], etc.). The [[C (programming language)|C]] language can support [[object-oriented programming]] via its facilities of [[function pointer]]s, type casting, and structures. However, languages such as C++ aim to make object-oriented programming more convenient by introducing syntax specific to this coding style. Moreover, the specialized syntax works to emphasize the object-oriented approach. Similarly, functions and looping syntax in C (and other procedural and structured programming languages) could be considered syntactic sugar. [[Assembly language]] can support procedural or structured programming via its facilities for modifying register values and branching execution depending on program state. However, languages such as C introduced syntax specific to these coding styles to make procedural and structured programming more convenient. Features of the C# (C Sharp) programming language, such as properties and interfaces, similarly do not enable new functionality, but are designed to make good programming practices more prominent and natural.

Some programmers feel that these features are unimportant or even frivolous. For example, [[Alan Perlis]] once quipped, in a reference to [[curly bracket programming language|bracket-delimited languages]], that "syntactic sugar causes cancer of the [[semicolon]]" (see [[Epigrams on Programming]]).

An extension of this is the [[syntactic sugar#Syntactic saccharin|syntactic saccharin]], or gratuitous syntax that does not make programming easier.

== Performance comparison ==
Purely in terms of total [[instruction path length]], a program coded in an imperative style, without using any subroutines at all, would have the lowest count. However, the [[binary file|binary]] size of such a program might be larger than the same program coded using subroutines (as in functional and procedural programming) and would reference more [[locality of reference|"non-local"]] ''physical'' instructions that may increase [[cache misses]] and increase instruction fetch [[computational overhead|overhead]] in modern processors.

The paradigms that use subroutines extensively (including functional, procedural and object-oriented) and do not also use significant [[inlining]] (via [[compiler optimization]]s) will, consequently, use a greater percentage of total resources on the subroutine linkages themselves. Object oriented programs that do not deliberately alter [[program state]] directly, instead using [[mutator method]]s (or "setters") to encapsulate these state changes, will, as a direct consequence, have a greater overhead. This is due to the fact that [[message passing]] is essentially a subroutine call, but with three more additional overheads: [[dynamic memory allocation]], parameter copying and [[dynamic dispatch]]. Obtaining memory from the [[dynamic memory allocation|heap]] and copying parameters for message passing may involve significant resources that far exceed those required for the state change itself. Accessors (or "getters") that merely return the values of private member variables also depend upon similar message passing subroutines, instead of using a more direct assignment (or comparison), adding to total path length.

=== Managed code ===
For programs executing in a ''[[managed code]]'' environment, such as the [[.NET Framework]], many issues affect performance that are significantly affected by the programming language paradigm and various language features used.

=== Pseudocode examples comparing various paradigms ===
A pseudocode comparison of imperative, procedural, and object oriented approaches used to calculate the area of a circle (), assuming no subroutine [[inlining]], no [[macro (computer science)|macro]] preprocessors, register arithmetic and weighting each instruction 'step' as just 1 instruction - as a crude measure of [[instruction path length]] -  is presented below. The instruction step that is conceptually performing the actual state change is highlighted in bold typeface in each case. Note that the actual arithmetic operations used to compute the area of the circle are the same in all three paradigms, with the difference being that the procedural and object-oriented paradigms wrap those operations in a subroutine call that makes the computation general and reusable. The same effect could be achieved in a [[purely imperative]] program using a macro preprocessor at just the cost of increased program size (only at each macro invocation site) without a corresponding [[pro rata]] runtime cost (proportional to ''n'' invocations - that may be situated within an [[inner loop]] for instance). Conversely, subroutine inlining by a compiler could reduce procedural programs to something similar in size to the purely imperative code. However, for object-oriented programs, even with inlining, messages still have to be built (from copies of the arguments) for processing by the object-oriented methods. The overhead of calls, virtual or otherwise, is not dominated by the [[control flow]] alteration itself - but by the surrounding [[calling convention]] costs, like [[function prologue|prologue and epilogue]] code, stack setup and [[parameter (computer programming)#Parameters and arguments|argument]] passing (see here for more realistic instruction path length, stack and other costs associated with calls on an [[x86]] platform). See also here for a slide presentation by [[Eric S. Roberts]] ("The Allocation of Memory to Variables", chapter 7) - illustrating the use of stack and heap memory usage when summing three [[rational number]]s in the [[Java (programming language)|Java]] object-oriented language.

{| class="wikitable" border="1" cellpadding="1"
!Imperative
!Procedural
!Object-oriented
|- 
| 
<code>
  load r;                      1
  r2 = r * r;                  2
  '''result = r2 * "3.142";'''       3
 . 
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .... storage .............
 result variable
 constant "3.142"
</code>
|
<code>
 area proc(r2,res):
    push stack                                 5
    load r2;                                   6
    r3 = r2 * r2;                              7
    '''res = r3 * "3.142";'''                        8
    pop stack                                  9
    return;                                   10
 ...............................................
 main proc:
    load r;                                    1
    call area(r,result);
     +load p = address of parameter list;      2
     +load v = address of subroutine 'area';   3
     +goto v with return;                      4
 .
 .
 .
 .
 .... storage .............
 result variable
 constant "3.142" 
 parameter list variable
 function pointer (==>area)
 stack storage
</code>
|
<code>
 circle.area method(r2):
    push stack                                 7
    load r2;                                   8
    r3 = r2 * r2;                              9
    res = r3 * "3.142";                       10
    pop stack                                 11
    '''return(res);'''                           12,13
 ...............................................
 main proc:
    load r;                                    1
    result = circle.area(r); 
       +allocate heap storage;                 2                  
       +copy r to message;                     3
       +load p = address of message;           4
       +load v = addr. of method 'circle.area' 5
       +goto v with return;                    6
 .
 .
 .... storage .............
 result variable (assumed pre-allocated)
 immutable variable "3.142" (final)
 (heap) message variable for circle method call
 vtable(==>area)
 stack storage
</code>
|}
<references group="See" />
The advantages of procedural abstraction and object-oriented-style polymorphism are not well illustrated by a small example like the one above. This example is designed principally to illustrate some intrinsic performance differences, not abstraction or code re-use.

==== Subroutine, method call overhead ====
The presence of a (called) subroutine in a program contributes nothing extra to the functionality of the program regardless of paradigm, but may contribute greatly to the structuring and generality of the program, making it much easier to write, modify, and extend. The extent to which different paradigms utilize subroutines (and their consequent memory requirements) influences the overall performance of the complete algorithm, although as [[Guy Steele]] pointed out in a 1977 paper, a well-designed programming language implementation ''can'' have very low overheads for procedural abstraction (but laments, in most implementations, that they seldom achieve this in practice - being "rather thoughtless or careless in this regard"). In the same paper, Steele also makes a considered case for [[automata-based programming]] (utilizing procedure calls with [[tail recursion]]) and concludes that "we should have a healthy respect for procedure calls" (because they are powerful) but suggested "use them sparingly"
 
In terms of the frequency of subroutine calls:
* for procedural programming, the [[granularity#Data granularity|granularity]] of the code is largely determined by the number of discrete procedures or [[modular programming|modules]].
* for functional programming, frequent calls to [[library (computing)|library]] subroutines are commonplace<sup class="Template-Fact" style="white-space:nowrap;">&#91;<i>[[Wikipedia:Citation needed|<span title="This claim needs references to reliable sources. (March 2010)">citation needed</span>]]</i>&#93;</sup> (but may be frequently inlined by the optimizing compiler)
* for object-oriented programming, the number of method calls invoked is also partly determined by the granularity of the data structures and may therefore include many ''read-only'' accesses to low level objects that are encapsulated (and therefore accessible in no other, more direct, way). Since increased granularity is a prerequisite for greater [[code reuse]], the tendency is towards fine-grained data structures, and a corresponding increase in the number of discrete objects (and their methods) and, consequently, subroutine calls. The creation of ''[[god object]]s'' is actively discouraged. [[constructor (object-oriented programming)|Constructors]] also add to the count as they are also subroutine calls (unless they are inlined). Performance problems caused by excessive granularity may not become apparent until [[scalability]] becomes an issue.
* for other paradigms, where a mixture of the above paradigms may be employed, subroutine usage is less predictable.

==== Allocation of dynamic memory for message and object storage ====
Uniquely, the object-oriented paradigm involves dynamic allocation of memory from [[dynamic memory allocation|heap storage]] for both object creation and message passing. A 1994 benchmark - "Memory Allocation Costs in Large C and C++ Programs" conducted by [[Digital Equipment Corporation]] on a variety of software, using an instruction-level profiling tool, measured how many instructions were required per dynamic storage allocation. The results showed that the lowest absolute number of instructions executed averaged around 50 but others reached as high as 611. See also "Heap:Pleasures and pains" by Murali R. Krishnan that states "Heap implementations tend to stay general for all platforms, and hence have heavy overhead". The 1996 IBM paper "Scalability of Dynamic Storage Allocation Algorithms" by Arun Iyengar of IBM  demonstrates various dynamic storage algorithms and their respective instruction counts. Even the recommended MFLF I algorithm (H.S. Stone, RC 9674) shows instruction counts in a range between 200 and 400. The above pseudocode example does not include a realistic estimate of this memory allocation pathlength or the memory prefix overheads involved and the subsequent associated garbage collection overheads. Suggesting strongly that heap allocation is a non-trivial task, one [[open source]] microallocator, by game developer [[John W. Ratcliff]], consists of nearly 1,000 lines of code.

==== Dynamically dispatched message calls v. direct procedure call overheads ====
In their Abstract "''Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis''", Jeffrey Dean, David Grove, and Craig Chambers of the Department of Computer Science and Engineering, at the [[University of Washington]], claim that "Heavy use of inheritance and dynamically-bound messages is likely to make code more extensible and reusable, but it also imposes a significant performance overhead, compared to an equivalent but non-extensible program written in a non-object-oriented manner. In some domains, such as structured graphics packages, the performance cost of the extra flexibility provided by using a heavily object-oriented style is acceptable. However, in other domains, such as basic data structure libraries, numerical computing packages, rendering libraries, and trace-driven simulation frameworks, the cost of message passing can be too great, forcing the programmer to avoid object-oriented programming in the “hot spots” of their application."

=== Serialization of objects ===
<div class="rellink relarticle mainarticle">Main article: [[Serialization|Serialization]]</div>
[[Serialization]] imposes quite considerable overheads when passing [[object (computer science)|objects]] from one system to another, especially when the transfer is in human-readable formats such as [[XML]] and [[JSON]]. This contrasts with compact binary formats for non object-oriented data. Both encoding and decoding of the objects data value and its attributes are involved in the serialization process (that also includes awareness of complex issues such as inheritance, encapsulation and data hiding).

=== Parallel computing ===
<div class="rellink relarticle mainarticle">Main article: [[Parallel computing|Parallel computing]]</div>
[[Carnegie-Mellon University]] Professor [[Robert Harper (computer scientist)|Robert Harper]] in March 2011 wrote: "This semester Dan Licata and I are co-teaching a new course on [[functional programming]] for first-year prospective CS majors... Object-oriented programming is eliminated entirely from the introductory curriculum, because it is both anti-modular and anti-parallel by its very nature, and hence unsuitable for a modern CS curriculum. A proposed new course on object-oriented design methodology will be offered at the sophomore level for those students who wish to study this topic."

== See also ==
* [[Comparison of programming languages]]
* [[Comparison of programming languages (basic instructions)]]
* [[granularity#Computing|Granularity]]
* [[Message passing]]
* [[Subroutine]]

== References ==
<div class="reflist " style=" list-style-type: decimal;">
<references group=""></references></div>

== Further reading ==
* [http://g.oswego.edu/dl/html/malloc.html "A Memory Allocator"] by Doug Lea
* [http://www.sqa.org.uk/e-learning/LinkedDS01CD/page_01.htm "Dynamic Memory Allocation and Linked Data Structures"] by ([[Scottish Qualifications Authority]])
* [http://www.flounder.com/inside_storage_allocation.htm "Inside A Storage Allocator"] by Dr. Newcomer Ph.D

== External links ==
* [http://users.ecs.soton.ac.uk/mrd/research/prog.html Comparing Programming Paradigms] by Dr Rachel Harrison and Mr Lins Samaraweera
* [http://eprints.ecs.soton.ac.uk/597/ Comparing Programming Paradigms: an Evaluation of Functional and Object-Oriented Programs] by Harrison, R., Samaraweera, L. G., Dobie, M. R. and Lewis, P. H. (1996) pp.&nbsp;247–254. ISSN 0268-6961
* [http://www.info.ucl.ac.be/~pvr/paradigmsDIAGRAMeng101.pdf "The principal programming paradigms"] By Peter Van Roy
* [http://www.info.ucl.ac.be/~pvr/book.html "Concepts, Techniques, and Models of Computer Programming" ](2004) by Peter Van Roy & Seif Haridi, ISBN 0-262-22069-5
* [http://hbfs.wordpress.com/2008/12/30/the-true-cost-of-calls/ The True Cost of Calls]- from "Harder, Better, Faster, Stronger" blog by computer scientist [http://www.stevenpigeon.org/Publications/ Steven Pigeon]



[[Category:Programming paradigms| Comparison]]
