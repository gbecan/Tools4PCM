<?xml version="1.0" encoding="ASCII"?>
<pcmmm:PCM xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pcmmm="pcmmm" name="Comparison_of_programming_paradigms">
  <matrices name="Main paradigm approaches">
    <cells xsi:type="pcmmm:Header" name="0,0: paradigm" verbatim="Paradigm" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,1: description" verbatim="Description" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,2: main characteristics" verbatim="Main characteristics" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,3: related paradigm(s)" verbatim="Related paradigm(s)" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,4: critics" verbatim="Critics" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,5: examples" verbatim="Examples" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="1,0: imperative" verbatim="Imperative" row="1" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,1: computation as statements that directly change a p" verbatim="Computation as statements that directly change a program state (datafields)" row="1" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,2: direct assignments, common data structure, global " verbatim="Direct assignments, common data structure, global variable" row="1" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,3: " verbatim="" row="1" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,4: edsger w. dijkstra, michael a. jackson" verbatim="Edsger W. Dijkstra, Michael A. Jackson" row="1" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,5: c, c++, java, php, python" verbatim="C, C++, Java, PHP, Python" row="1" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="2,0: structured" verbatim="Structured" row="2" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="2,1: a style of imperative programming with more logica" verbatim="A style of imperative programming with more logical program structure" row="2" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="2,2: structogram, indentation, either no, or limited us" verbatim="Structogram, indentation, either no, or limited use of, goto statements" row="2" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="2,3: imperative" verbatim="Imperative" row="2" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="2,4: " verbatim="" row="2" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="2,5: c, c++, java" verbatim="C, C++, Java" row="2" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="3,0: procedural" verbatim="Procedural" row="3" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="3,1: derived from structured programming, based on the " verbatim="Derived from structured programming, based on the concept of modular programming or the procedure call" row="3" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="3,2: local variable, sequence, selection, iteration, an" verbatim="Local variable, sequence, selection, iteration, and modularization" row="3" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="3,3: structured, imperative" verbatim="Structured, imperative" row="3" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="3,4: " verbatim="" row="3" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="3,5: c, c++, lisp, php, python" verbatim="C, C++, Lisp, PHP, Python" row="3" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="4,0: functional" verbatim="Functional" row="4" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="4,1: treats computation as the evaluation of mathematic" verbatim="Treats computation as the evaluation of mathematical functions avoiding state and mutable data" row="4" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="4,2: lambda calculus, compositionality, formula, recurs" verbatim="Lambda calculus, compositionality, formula, recursion, referential transparency, no side effects" row="4" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="4,3: " verbatim="" row="4" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="4,4: " verbatim="" row="4" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="4,5: erlang, haskell, lisp, clojure, scala, f#" verbatim="Erlang, Haskell, Lisp, Clojure, Scala, F#" row="4" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="5,0: event-driven including time driven" verbatim="Event-driven including time driven" row="5" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="5,1: program flow is determined mainly by events, such " verbatim="Program flow is determined mainly by events, such as mouse click or interrupts including timer" row="5" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="5,2: main loop, event handlers, asynchronous processes" verbatim="Main loop, event handlers, asynchronous processes" row="5" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="5,3: procedural, dataflow" verbatim="Procedural, dataflow" row="5" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="5,4: " verbatim="" row="5" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="5,5: actionscript" verbatim="ActionScript" row="5" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="6,0: object-oriented" verbatim="Object-oriented" row="6" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="6,1: treats datafields as objects manipulated through p" verbatim="Treats datafields as objects manipulated through pre-defined methods only" row="6" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="6,2: objects, methods, message passing, information hid" verbatim="Objects, methods, message passing, information hiding, data abstraction, encapsulation, polymorphism, inheritance, serialization-marshalling" row="6" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="6,3: " verbatim="" row="6" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="6,4: see here and" verbatim="See here and" row="6" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="6,5: common lisp, c++, c#, eiffel, java, php, python, r" verbatim="Common Lisp, C++, C#, Eiffel, Java, PHP, Python, Ruby, Scala" row="6" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="7,0: declarative" verbatim="Declarative" row="7" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="7,1: defines computation logic without defining its det" verbatim="Defines computation logic without defining its detailed control flow" row="7" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="7,2: 4gl, spreadsheet, report program generator" verbatim="4GL, spreadsheet, report program generator" row="7" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="7,3: " verbatim="" row="7" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="7,4: " verbatim="" row="7" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="7,5: sql, regular expressions, css" verbatim="SQL, regular expressions, CSS" row="7" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="8,0: automata-based programming" verbatim="Automata-based programming" row="8" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="8,1: treats programs as a model of a finite state machi" verbatim="Treats programs as a model of a finite state machine or any other formal automata" row="8" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="8,2: state enumeration, control variable, state changes" verbatim="State enumeration, control variable, state changes, isomorphism, state transition table" row="8" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="8,3: imperative, event-driven" verbatim="Imperative, event-driven" row="8" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="8,4: " verbatim="" row="8" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="8,5: " verbatim="" row="8" rowspan="1" column="5" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="9,0: paradigm" verbatim="Paradigm" row="9" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="9,1: description" verbatim="Description" row="9" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="9,2: main characteristics" verbatim="Main characteristics" row="9" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="9,3: related paradigm(s)" verbatim="Related paradigm(s)" row="9" rowspan="1" column="3" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="9,4: critics?" verbatim="Critics?" row="9" rowspan="1" column="4" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="9,5: examples" verbatim="Examples" row="9" rowspan="1" column="5" colspan="1"/>
  </matrices>
  <matrices name="Differences in terminology">
    <cells xsi:type="pcmmm:Extra" name="0,0: &#x201c;" verbatim="&#x201c;" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="0,1: &quot;you can know the name of a bird in all the langua" verbatim="&quot;You can know the name of a bird in all the languages of the world, but when you're finished, you'll know absolutely nothing whatever about the bird... So let's look at the bird and see what it's doing-- that's what counts. I learned very early the difference between knowing the name of something and knowing something." rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="0,2: &#x201d;" verbatim="&#x201d;" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,0: &#xa0;" verbatim="&#xa0;" row="1" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,1: " verbatim="" row="1" rowspan="1" column="1" colspan="1"/>
  </matrices>
  <matrices name="Pseudocode examples comparing various paradigms">
    <cells xsi:type="pcmmm:Header" name="0,0: imperative" verbatim="Imperative" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,1: procedural" verbatim="Procedural" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Header" name="0,2: object-oriented" verbatim="Object-oriented" rowspan="1" column="2" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,0: " verbatim="" row="1" rowspan="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,1: " verbatim="" row="1" rowspan="1" column="1" colspan="1"/>
    <cells xsi:type="pcmmm:Extra" name="1,2: " verbatim="" row="1" rowspan="1" column="2" colspan="1"/>
  </matrices>
</pcmmm:PCM>
